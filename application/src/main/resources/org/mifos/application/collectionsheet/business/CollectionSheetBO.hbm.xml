<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
<hibernate-mapping>
	<class
		name="org.mifos.application.collectionsheet.business.CollectionSheetBO"
		table="COLL_SHEET">
		<id name="collSheetID" column="COLL_SHEET_ID" type="integer">
			<generator class="native" />
		</id>

		<property name="collSheetDate" column="COLL_SHEET_DATE" type="date" />
		<property name="statusFlag" column="STATUS_FLAG" type="short" />
		<property name="runDate" column="RUN_DATE" type="date" />

		<set name="collectionSheetCustomers" cascade="all" table="COLL_SHEET_CUSTOMER"
			inverse="true">
			<key column="COLL_SHEET_ID" />
			<one-to-many
				class="org.mifos.application.collectionsheet.business.CollSheetCustBO" />
		</set>
	</class>

	<query name="collectionSheet.getCollectionSheetForMeetingDate">
            <![CDATA[from org.mifos.application.collectionsheet.business.CollectionSheetBO 
            collectionSheet where collectionSheet.collSheetDate = date(:MEETING_DATE)]]>
	</query>

	<!-- Query to retrieve meeting date for specified center -->
	<sql-query
		name="collectionSheet.getCollectionSheetForCenterWithSpecifiedMeetingDate">
		<return alias="collectionSheet"
			class="org.mifos.application.collectionsheet.business.CollectionSheetBO" />
		<![CDATA[
			SELECT {collectionSheet.*} from coll_sheet collectionSheet, coll_sheet_customer 
				where coll_sheet_customer.cust_id=:CUSTOMER_ID 
				and coll_sheet_customer.cust_level=:CUSTOMER_LEVEL 
				and coll_sheet_customer.cust_office_id=:OFFICE_ID
				and coll_sheet_customer.loan_officer_id=:LOAN_OFFICER_ID 
				and collectionSheet.coll_sheet_date > date(:FROM_DATE)
				and collectionSheet.coll_sheet_id=coll_sheet_customer.coll_sheet_id
				order by collectionSheet.coll_sheet_date desc
		]]>
	</sql-query>

	<!--
		Query for Collect Sheet Report. Really a loan report as no savings or
		customer charges are involved. Its a complicated query that contains a
		number of assumptions that seem to be GK related (e.g. no group
		loans). However, GK have their own version of the report and the sql
		GK use is an amended version of the query below. The query is made up
		of 4 "sub-queries". For performance reasons each subquery uses similar
		criteria to restrict searches to just those active clients that match
		the input meeting date. i.e. there's a bit of duplication but it was
		needed for speed. This out of the box mifos collection sheet report
		may be reviewed from a functional perspective. 
	-->
	<sql-query name="collectionSheet.extractCollectionSheetReportData">
		<return-scalar column="colldate" type="string" />
		<return-scalar column="offid" type="integer" />
		<return-scalar column="offname" type="string" />
		<return-scalar column="staffid" type="integer" />
		<return-scalar column="staffname" type="string" />
		<return-scalar column="kendraid" type="integer" />
		<return-scalar column="kendraname" type="string" />
		<return-scalar column="groupid" type="integer" />
		<return-scalar column="groupname" type="string" />
		<return-scalar column="Memid" type="integer" />
		<return-scalar column="Memname" type="string" />

		<return-scalar column="loanbal" type="string" />
		<return-scalar column="tloanbal" type="big_decimal" />
		<return-scalar column="loandue" type="string" />
		<return-scalar column="tloandue" type="big_decimal" />

		<return-scalar column="loandis" type="string" />
		<return-scalar column="tloandis" type="big_decimal" />
		<return-scalar column="loanfees" type="string" />
		<return-scalar column="tloanfees" type="big_decimal" />	    
	    
	    <![CDATA[	    
select coll.*, 
       ifnull(loan.loanbal,0) as loanbal, 
       round(ifnull(loan.tloanbal,0),0) as tloanbal, 
       
       ifnull(loanduesch.loandue,0) as loandue ,
       round(ifnull(loanduesch.tloandue,0),0) as tloandue ,
       
       ifnull(ld.loandis,0) as loandis,
       round(ifnull(ld.tloandis,0),null) as tloandis, 
       
       ifnull(ld.loanfees,0) as loanfees, 
       round(ifnull(ld.tloanfees,0),null) as tloanfees from
       
       (SELECT concat(right(date(:MEETING_DATE),2), "-",left(right(date(:MEETING_DATE),5),2),"-",
        left(date(:MEETING_DATE),4)) as colldate ,        
        o.office_id as offid, 
        o.display_name as offname,
        p.personnel_id as staffid,  
        p.display_name as staffname, 
        k.customer_id as kendraid, 
        k.display_name as kendraname, 
        g.customer_id as groupid,
        g.display_name as groupname,
        m.customer_id as Memid, 
        m.display_name as Memname
        
	FROM customer k
	 left join personnel p on k.loan_officer_id = p.personnel_id
	 left join office o on p.office_id = o.office_id
	 left join customer g on g.parent_customer_id = k.customer_id
	 left join customer m on m.parent_customer_id = g.customer_id
	 left join customer_meeting cm on cm.customer_id=k.customer_id
	 left join recurrence_detail rd on rd.meeting_id = cm.meeting_id
	 left join recur_on_day r on r.details_id = rd.details_id	

	 where o.office_id = :BRANCH_ID
       
	 and p.personnel_status = 1
	 and p.personnel_id = (case(:PERSONNEL_ID) when 'ALL'  then p.personnel_id else (:PERSONNEL_ID) end)
	 and k.customer_id = (case (:CENTER_ID)  when 'ALL' then k.customer_id else (:CENTER_ID) end)
     and k.status_id = 13 and k.branch_id = :BRANCH_ID and k.customer_level_id = 3
     and g.status_id = 9  and g.branch_id = :BRANCH_ID and g.customer_level_id = 2
     and m.status_id = 3  and m.branch_id = :BRANCH_ID and m.customer_level_id = 1
	 and r.days = dayofweek(:MEETING_DATE)
	   
     order by k.customer_id, g.customer_id, m.customer_id) coll
       
	left join
	(SELECT a.customer_id as customer_id, 
	 	group_concat(
	 	  concat_ws(':',po.prd_offering_short_name, 
	 	    round(ls.orig_principal + ls.orig_interest + ls.orig_fees + 
	 	      ls.orig_penalty - ls.principal_paid - round(ls.interest_paid,2)- 
	 	      round(ls.fees_paid,2) - ls.penalty_paid, 0
	 	    )
	 	  ) order by po.prd_offering_short_name separator '||'
	 	) as loanbal, 
	 	sum(ls.orig_principal+ls.orig_interest+ls.orig_fees+ls.orig_penalty
	 	  -ls.principal_paid-round(ls.interest_paid,2)-round(ls.fees_paid,2)-
	 	  ls.penalty_paid) as tloanbal 
     from customer k
     join customer_meeting cm on cm.customer_id = k.customer_id
     join recurrence_detail rd on rd.meeting_id = cm.meeting_id
     join recur_on_day r on r.details_id = rd.details_id	
	 join personnel p on k.loan_officer_id = p.personnel_id
     
	 join customer g on g.parent_customer_id = k.customer_id
	 join customer m on m.parent_customer_id = g.customer_id
                                    
     join account a on a.customer_id = m.customer_id
     join loan_account la on la.account_id = a.account_id 
     join loan_summary ls on ls.account_id=la.account_id
     join prd_offering po on po.prd_offering_id = la.prd_offering_id
	 	
	 where a.account_state_id in (5, 9) 
     and a.account_type_id = 1
           
	 and p.personnel_status = 1
	 and p.personnel_id = (case(:PERSONNEL_ID) when 'ALL'  then p.personnel_id else (:PERSONNEL_ID) end)
	 and k.customer_id = (case (:CENTER_ID)  when 'ALL' then k.customer_id else (:CENTER_ID) end)
     and k.status_id = 13 and k.branch_id = :BRANCH_ID and k.customer_level_id = 3
     and g.status_id = 9  and g.branch_id = :BRANCH_ID and g.customer_level_id = 2
     and m.status_id = 3  and m.branch_id = :BRANCH_ID and m.customer_level_id = 1
	 and r.days = dayofweek(:MEETING_DATE)

	 group by a.customer_id
	 ) loan on coll.memid = loan.customer_id

	 left join
        (select loansch.customer_id as customer_id, 
	         group_concat(ifnull(loansch.loandue,0) order by loansch.loandue separator '||') as loandue , 
	         ifnull(sum(loansch.tloandue),0) as tloandue 
        from
                 (select a.customer_id as customer_id, 
                         concat_ws(':',po.prd_offering_short_name, ifnull(round(
                            sum(l.principal+l.interest+l.penalty+ifnull(l.misc_fees,0)),2),0)
                         ) as loandue, 
                         ifnull(sum(l.principal+l.interest+l.penalty+ifnull(l.misc_fees,0)),0)
                          as tloandue
                 from customer k
                 join customer_meeting cm on cm.customer_id = k.customer_id
                 join recurrence_detail rd on rd.meeting_id = cm.meeting_id
                 join recur_on_day r on r.details_id = rd.details_id	
                 join personnel p on k.loan_officer_id = p.personnel_id
     
                 join customer g on g.parent_customer_id = k.customer_id
                 join customer m on m.parent_customer_id = g.customer_id
                                    
                 join account a on a.customer_id = m.customer_id
                 join loan_account la on la.account_id = a.account_id 
                 join loan_schedule l on l.account_id=la.account_id
                 join prd_offering po on po.prd_offering_id = la.prd_offering_id
			 
                 where l.action_date <= date(:MEETING_DATE) 
                 and l.payment_status = 0 
                 and a.account_state_id in (5, 9) 
                 and a.account_type_id = 1      
                 
                 and p.personnel_status = 1
                 and p.personnel_id = (case(:PERSONNEL_ID) when 'ALL'  then p.personnel_id else (:PERSONNEL_ID) end)
                 and k.customer_id = (case (:CENTER_ID)  when 'ALL' then k.customer_id else (:CENTER_ID) end)
                 and k.status_id = 13 and k.branch_id = :BRANCH_ID and k.customer_level_id = 3
                 and g.status_id = 9  and g.branch_id = :BRANCH_ID and g.customer_level_id = 2
                 and m.status_id = 3  and m.branch_id =:BRANCH_ID and m.customer_level_id = 1
                 and r.days = dayofweek(:MEETING_DATE)
     
                 group by l.account_id) loansch
           group by loansch.customer_id 
           ) loanduesch on coll.memid = loanduesch.customer_id

	   left join
           (select loandisb.customer_id as customer_id, 
            	    group_concat(ifnull(loandisb.loandis,0) order by loandisb.loandis separator '||') as loandis,
            	    sum(loandisb.tloandis) as tloandis, 
            	    group_concat(ifnull(loandisb.loanfees,0) order by loandisb.loandis separator '||') as loanfees, 
            	    sum(loandisb.tloanfees) as tloanfees 
            from
                (select a.customer_id as customer_id, 
		            concat_ws(':',po.prd_offering_short_name, round(la.loan_amount,0)) as loandis,
		            la.loan_amount as tloandis,
                    concat_ws(':',po.prd_offering_short_name,round(ls.orig_fees,0)) as loanfees, 
                    ls.orig_fees as tloanfees
                from customer k
                join customer_meeting cm on cm.customer_id = k.customer_id
                join recurrence_detail rd on rd.meeting_id = cm.meeting_id
                join recur_on_day r on r.details_id = rd.details_id	
                join personnel p on k.loan_officer_id = p.personnel_id
     
                join customer g on g.parent_customer_id = k.customer_id
                join customer m on m.parent_customer_id = g.customer_id
                                    
                join account a on a.customer_id = m.customer_id
                join loan_account la on la.account_id = a.account_id
                left join loan_summary ls on ls.account_id = la.account_id
                join prd_offering po on po.prd_offering_id = la.prd_offering_id
                
			    where la.disbursement_date = date(:MEETING_DATE) 
			    and a.account_state_id = 3 
			    and a.office_id = :BRANCH_ID
			    and a.account_type_id = 1 
                
                and p.personnel_status = 1 
                and p.personnel_id = (case(:PERSONNEL_ID) when 'ALL'  then p.personnel_id else (:PERSONNEL_ID) end)
                and k.customer_id = (case (:CENTER_ID)  when 'ALL' then k.customer_id else (:CENTER_ID) end)
                and k.status_id = 13 and k.branch_id = :BRANCH_ID and k.customer_level_id = 3
                and g.status_id = 9  and g.branch_id = :BRANCH_ID and g.customer_level_id = 2
                and m.status_id = 3  and m.branch_id = :BRANCH_ID and m.customer_level_id = 1
                and r.days = dayofweek(:MEETING_DATE)

		     ) loandisb 
             group by loandisb.customer_id 
             ) ld on coll.memid = ld.customer_id
          ]]>
	</sql-query>

</hibernate-mapping>
