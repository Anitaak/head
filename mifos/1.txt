Index: test/org/mifos/application/accounts/loan/struts/action/TestLoanAccountAction.java
===================================================================
--- test/org/mifos/application/accounts/loan/struts/action/TestLoanAccountAction.java	(revision 13536)
+++ test/org/mifos/application/accounts/loan/struts/action/TestLoanAccountAction.java	(working copy)
@@ -22,6 +22,8 @@
 import static org.easymock.classextension.EasyMock.replay;
 import static org.easymock.classextension.EasyMock.verify;
 
+import net.sf.cglib.transform.impl.AddStaticInitTransformer;
+
 import org.easymock.classextension.EasyMock;
 import org.easymock.classextension.IMocksControl;
 import org.joda.time.LocalDate;
@@ -994,9 +996,11 @@
 	 MasterConstants.BUSINESS_ACTIVITIE_NAME, request));
 	 }*/
 
-//  Commented as LoanBO could not be injected as a dependency to the ActionServlet.
+	//Commented because not able to inject LoanBO as a dependency into the action servlet
 //	public void testManagePrevious() {
 //		request.setAttribute(Constants.CURRENTFLOWKEY, flowKey);
+//		LoanBO loanMock = createMock(LoanBO.class);
+//		request.getSession().setAttribute(Constants.BUSINESS_KEY, loanMock);
 //		setRequestPathInfo("/loanAccountAction.do");
 //		addRequestParameter(Constants.CURRENTFLOWKEY, (String) request
 //				.getAttribute(Constants.CURRENTFLOWKEY));
Index: test/org/mifos/application/accounts/loan/struts/action/TestLoanDisbursmentAction.java
===================================================================
--- test/org/mifos/application/accounts/loan/struts/action/TestLoanDisbursmentAction.java	(revision 13536)
+++ test/org/mifos/application/accounts/loan/struts/action/TestLoanDisbursmentAction.java	(working copy)
@@ -21,6 +21,7 @@
 import org.mifos.framework.util.helpers.SessionUtils;
 import org.mifos.framework.util.helpers.TestObjectFactory;
 
+
 public class TestLoanDisbursmentAction extends MifosMockStrutsTestCase {
 
 	protected UserContext userContext = null;
Index: test/org/mifos/application/accounts/loan/business/service/TestLoanBusinessService.java
===================================================================
--- test/org/mifos/application/accounts/loan/business/service/TestLoanBusinessService.java	(revision 13536)
+++ test/org/mifos/application/accounts/loan/business/service/TestLoanBusinessService.java	(working copy)
@@ -1,18 +1,35 @@
 package org.mifos.application.accounts.loan.business.service;
 
+import static java.util.Arrays.asList;
+import static org.easymock.EasyMock.expect;
+import static org.easymock.classextension.EasyMock.createMock;
+import static org.easymock.classextension.EasyMock.replay;
+import static org.easymock.classextension.EasyMock.verify;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
 import org.mifos.application.accounts.business.AccountActionDateEntity;
 import org.mifos.application.accounts.business.AccountBO;
+import org.mifos.application.accounts.business.service.AccountBusinessService;
 import org.mifos.application.accounts.exceptions.AccountException;
 import org.mifos.application.accounts.loan.business.LoanActivityView;
 import org.mifos.application.accounts.loan.business.LoanBO;
+import org.mifos.application.accounts.loan.persistance.LoanPersistence;
 import org.mifos.application.accounts.persistence.AccountPersistence;
 import org.mifos.application.accounts.util.helpers.AccountState;
 import org.mifos.application.accounts.util.helpers.PaymentData;
+import org.mifos.application.configuration.business.service.ConfigurationBusinessService;
 import org.mifos.application.customer.business.CustomerBO;
+import org.mifos.application.customer.business.service.CustomerBusinessService;
+import org.mifos.application.customer.client.business.ClientBO;
+import org.mifos.application.customer.group.business.GroupBO;
+import org.mifos.application.customer.group.business.service.GroupBusinessService;
 import org.mifos.application.customer.util.helpers.CustomerStatus;
 import org.mifos.application.meeting.business.MeetingBO;
 import org.mifos.application.productdefinition.business.LoanOfferingBO;
@@ -205,4 +222,38 @@
 		paymentData.setRecieptNum("423423");
 		return paymentData;
 	}
+	
+	public void testgetActiveLoansForAllClientsUnderGroup() throws Exception {
+		int groupLoanAccountId = 1;
+		GroupBO groupMock = createMock(GroupBO.class);
+		CustomerBO clientMock = createMock(ClientBO.class);
+		LoanBO groupLoanMock = createMock(LoanBO.class);
+		ConfigurationBusinessService configServiceMock = createMock(ConfigurationBusinessService.class);
+		LoanBO loanMock1 = createMock(LoanBO.class);
+		LoanBO loanMock2 = createMock(LoanBO.class);
+		AccountBusinessService accountBusinessServiceMock = createMock(AccountBusinessService.class);
+
+		expect(accountBusinessServiceMock.getCoSigningClientsForGlim(groupLoanAccountId))
+				.andReturn(Arrays.asList(clientMock));
+		expect(configServiceMock.isGlimEnabled()).andReturn(true);
+		expect(loanMock1.isActiveLoanAccount()).andReturn(true);
+		expect(loanMock2.isActiveLoanAccount()).andReturn(false);
+		expect(groupLoanMock.getAccountId()).andReturn(groupLoanAccountId);
+		
+		expect(clientMock.getAccounts()).andReturn(
+				new HashSet(asList(loanMock1, loanMock2)));
+
+		replay(groupMock, clientMock, loanMock1, loanMock2, groupLoanMock,
+				configServiceMock, accountBusinessServiceMock);
+
+		assertEquals(asList(loanMock1), new LoanBusinessService(
+				new LoanPersistence(), configServiceMock,
+				accountBusinessServiceMock)
+				.getActiveLoansForAllClientsAssociatedWithGroupLoan(groupLoanMock));
+
+		verify(groupMock, clientMock, loanMock1, loanMock2, groupLoanMock,
+				configServiceMock, accountBusinessServiceMock);
+		
+	}
+	
 }
Index: test/org/mifos/application/accounts/loan/business/TestLoanBO.java
===================================================================
--- test/org/mifos/application/accounts/loan/business/TestLoanBO.java	(revision 13536)
+++ test/org/mifos/application/accounts/loan/business/TestLoanBO.java	(working copy)
@@ -114,6 +114,7 @@
 import org.mifos.application.productdefinition.util.helpers.GraceType;
 import org.mifos.application.productdefinition.util.helpers.InterestType;
 import org.mifos.application.productdefinition.util.helpers.PrdStatus;
+import org.mifos.application.productsmix.business.service.ProductMixBusinessService;
 import org.mifos.application.util.helpers.EntityType;
 import org.mifos.application.util.helpers.YesNoFlag;
 import org.mifos.config.AccountingRules;
@@ -714,11 +715,10 @@
 
 	public void testPrdOfferingsCanCoexist() throws PersistenceException {
 		LoanBO loan = (LoanBO) createLoanAccount();
-		assertTrue(loan.prdOfferingsCanCoexist(loan.getLoanOffering()
-				.getPrdOfferingId()));
+		assertTrue(new ProductMixBusinessService().canProductsCoExist(loan
+				.getLoanOffering(), loan.getLoanOffering()));
 	}
 
-
 	public void testLoanPerfObject() throws PersistenceException {
 		java.sql.Date currentDate = new java.sql.Date(System
 				.currentTimeMillis());
Index: test/org/mifos/application/productsmix/business/service/ProductMixBusinessServiceTest.java
===================================================================
--- test/org/mifos/application/productsmix/business/service/ProductMixBusinessServiceTest.java	(revision 13536)
+++ test/org/mifos/application/productsmix/business/service/ProductMixBusinessServiceTest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.mifos.application.productdefinition.business.SavingsOfferingBO;
 import org.mifos.application.productdefinition.util.helpers.ProductType;
 import org.mifos.application.productsmix.business.ProductMixBO;
+import org.mifos.application.productsmix.persistence.ProductMixPersistence;
 import org.mifos.framework.MifosTestCase;
 import org.mifos.framework.business.service.ServiceFactory;
 import org.mifos.framework.exceptions.PersistenceException;
@@ -23,6 +24,12 @@
 import org.mifos.framework.util.helpers.TestObjectFactory;
 
 
+import static org.easymock.EasyMock.expect;
+import static org.easymock.EasyMock.expectLastCall;
+import static org.easymock.classextension.EasyMock.createMock;
+import static org.easymock.classextension.EasyMock.replay;
+import static org.easymock.classextension.EasyMock.verify;
+
 public class ProductMixBusinessServiceTest  extends MifosTestCase {
 	
 	private SavingsOfferingBO savingsOffering;
@@ -228,5 +235,21 @@
 		loanOffering2.updatePrdOfferingFlag();
 
 	}
+	
+	public void testCanProductsExist() throws Exception {
+		ProductMixPersistence productMixPersistenceMock = createMock(ProductMixPersistence.class);
+		short PRD_OFFERING_ID_ONE = (short)1;
+		short PRD_OFFERING_ID_TWO = (short)2;
+		LoanOfferingBO loanOfferingMock1 = createMock(LoanOfferingBO.class);
+		LoanOfferingBO loanOfferingMock2 = createMock(LoanOfferingBO.class);
+		
+		expect(productMixPersistenceMock.doesPrdOfferingsCanCoexist(PRD_OFFERING_ID_ONE, PRD_OFFERING_ID_TWO)).andReturn(true);
+		expect(loanOfferingMock1.getPrdOfferingId()).andReturn(PRD_OFFERING_ID_ONE);
+		expect(loanOfferingMock2.getPrdOfferingId()).andReturn(PRD_OFFERING_ID_TWO);
+		replay(loanOfferingMock1,loanOfferingMock2,productMixPersistenceMock);
+		
+		new ProductMixBusinessService(productMixPersistenceMock).canProductsCoExist(loanOfferingMock1, loanOfferingMock2);
+		verify(loanOfferingMock1,loanOfferingMock2,productMixPersistenceMock);
+	}
 
 }
\ No newline at end of file
Index: test/org/mifos/application/customer/business/TestCustomerBO.java
===================================================================
--- test/org/mifos/application/customer/business/TestCustomerBO.java	(revision 13536)
+++ test/org/mifos/application/customer/business/TestCustomerBO.java	(working copy)
@@ -459,7 +459,7 @@
 		group = TestObjectFactory.getObject(GroupBO.class, group
 				.getCustomerId());
 		List<LoanBO> loans = group.getOpenIndividualLoanAccounts();
-		assertEquals(0, loans.size());
+		assertEquals(1, loans.size());
 		
 		TestObjectFactory.flushandCloseSession();
 
Index: src/org/mifos/application/accounts/loan/persistance/LoanPersistence.java
===================================================================
--- src/org/mifos/application/accounts/loan/persistance/LoanPersistence.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/persistance/LoanPersistence.java	(working copy)
@@ -23,19 +23,12 @@
 import org.mifos.application.accounts.business.AccountTrxnEntity;
 import org.mifos.application.accounts.loan.business.LoanBO;
 import org.mifos.application.accounts.loan.util.helpers.LoanConstants;
-import org.mifos.application.accounts.savings.business.SavingsBO;
 import org.mifos.application.accounts.util.helpers.AccountActionTypes;
 import org.mifos.application.accounts.util.helpers.AccountStates;
 import org.mifos.application.accounts.util.helpers.AccountTypes;
 import org.mifos.application.accounts.util.helpers.PaymentStatus;
-import org.mifos.application.branchreport.BranchReportLoanArrearsAgingBO;
-import org.mifos.application.branchreport.LoanArrearsAgingPeriod;
-import org.mifos.application.customer.util.helpers.CustomerSearchConstants;
-import org.mifos.application.customer.util.helpers.QueryParamConstants;
-import org.mifos.application.office.business.OfficeBO;
 import org.mifos.application.productdefinition.business.LoanOfferingBO;
 import org.mifos.application.productdefinition.business.LoanOfferingFundEntity;
-import org.mifos.framework.components.configuration.business.Configuration;
 import org.mifos.framework.exceptions.PersistenceException;
 import org.mifos.framework.hibernate.helper.HibernateUtil;
 import org.mifos.framework.persistence.Persistence;
@@ -326,4 +319,5 @@
 		return queryResult;
 
 	}
+
 }
Index: src/org/mifos/application/accounts/loan/struts/uihelpers/LoanUIHelperFn.java
===================================================================
--- src/org/mifos/application/accounts/loan/struts/uihelpers/LoanUIHelperFn.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/struts/uihelpers/LoanUIHelperFn.java	(working copy)
@@ -93,15 +93,17 @@
 			return false;
 		}
 		if(Arrays.asList(AccountState.LOAN_APPROVED, AccountState.LOAN_ACTIVE_IN_BAD_STANDING,AccountState.LOAN_ACTIVE_IN_GOOD_STANDING).contains(accountState))
+			//disabling only the GLIM parts of the loan
 			return Arrays.asList("clientDetails.loanAmount",
-					"clientDetails.clientId",
-					"interestRate",
-					"noOfInstallments",					
-					"disbursementDate",
-					"gracePeriod",
-					"collateralType",
-					"collateralNotes",
-					"customField","disbursementDate","weekDayId", "ordinalOfMonth").contains(fieldName);
+					"clientDetails.clientId"					
+					//,"noOfInstallments",					
+					//"disbursementDate",
+					//"gracePeriod",
+					//"collateralType",
+					//"collateralNotes",
+					//"customField","disbursementDate",
+					//"weekDayId", "ordinalOfMonth"
+					).contains(fieldName);
 		return true;
 	}
 	
Index: src/org/mifos/application/accounts/loan/struts/action/LoanDisbursmentAction.java
===================================================================
--- src/org/mifos/application/accounts/loan/struts/action/LoanDisbursmentAction.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/struts/action/LoanDisbursmentAction.java	(working copy)
@@ -3,30 +3,37 @@
  */
 package org.mifos.application.accounts.loan.struts.action;
 
+import static org.mifos.framework.util.helpers.DateUtils.getUserLocaleDate;
+
 import java.util.Date;
 import java.util.List;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.struts.action.ActionForm;
 import org.apache.struts.action.ActionForward;
 import org.apache.struts.action.ActionMapping;
-import org.mifos.application.acceptedpaymenttype.persistence.AcceptedPaymentTypePersistence;
+import org.mifos.application.acceptedpaymenttype.business.service.AcceptedPaymentTypeService;
 import org.mifos.application.accounts.exceptions.AccountException;
 import org.mifos.application.accounts.loan.business.LoanBO;
 import org.mifos.application.accounts.loan.business.service.LoanBusinessService;
+import org.mifos.application.accounts.loan.struts.action.validate.ProductMixValidator;
 import org.mifos.application.accounts.loan.struts.actionforms.LoanDisbursmentActionForm;
 import org.mifos.application.accounts.loan.util.helpers.LoanConstants;
-import org.mifos.application.accounts.loan.util.helpers.LoanExceptionConstants;
+import org.mifos.application.configuration.business.service.ConfigurationBusinessService;
+import org.mifos.application.master.business.PaymentTypeEntity;
 import org.mifos.application.master.util.helpers.MasterConstants;
+import org.mifos.application.master.util.helpers.PaymentTypes;
 import org.mifos.application.personnel.business.PersonnelBO;
 import org.mifos.application.personnel.persistence.PersonnelPersistence;
-import org.mifos.application.util.helpers.TrxnTypes;
 import org.mifos.config.AccountingRules;
 import org.mifos.framework.business.service.BusinessService;
 import org.mifos.framework.components.configuration.persistence.ConfigurationPersistence;
 import org.mifos.framework.components.configuration.util.helpers.ConfigConstants;
+import org.mifos.framework.exceptions.PageExpiredException;
+import org.mifos.framework.exceptions.PersistenceException;
 import org.mifos.framework.exceptions.ServiceException;
 import org.mifos.framework.security.util.ActionSecurity;
 import org.mifos.framework.security.util.UserContext;
@@ -41,7 +48,17 @@
 public class LoanDisbursmentAction extends BaseAction {
 
 	private LoanBusinessService loanBusinessService = null;
+	private final ProductMixValidator productMixValidator;
 	
+	 LoanDisbursmentAction(LoanBusinessService service, ProductMixValidator validator) {
+		this.loanBusinessService = service;
+		this.productMixValidator = validator;
+	}
+	 
+	public LoanDisbursmentAction(){
+		this(new LoanBusinessService(), new ProductMixValidator());
+	}
+
 	public static ActionSecurity getSecurity() {
 		ActionSecurity security = new ActionSecurity("loanDisbursmentAction");
 		security.allow("load", SecurityConstants.LOAN_CAN_DISBURSE_LOAN);
@@ -55,67 +72,66 @@
 	public ActionForward load(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response)
 			throws Exception {
-		UserContext uc = (UserContext) SessionUtils.getAttribute(
-				Constants.USER_CONTEXT_KEY, request.getSession());
-        SessionUtils.setAttribute(LoanConstants.REPAYMENT_SCHEDULES_INDEPENDENT_OF_MEETING_IS_ENABLED,
-        		ConfigurationPersistence.isRepaymentIndepOfMeetingEnabled() ? 1 : 0, request);
+        setIsRepaymentScheduleEnabled(request);
 
-        boolean allowBackDatedTransactions = AccountingRules.isBackDatedTxnAllowed();
-        SessionUtils.setAttribute(ConfigConstants.BACK_DATED_TRANSACTIONS_ALLOWED, allowBackDatedTransactions,request);
+        setIsBackdatedTransactionAllowed(request);
 		LoanDisbursmentActionForm loanDisbursmentActionForm = (LoanDisbursmentActionForm) form;
 		loanDisbursmentActionForm.clear();
-		Date currentDate = new Date(System.currentTimeMillis());
 
-		LoanBO loan = ((LoanBusinessService) getService()).getAccount(Integer
-				.valueOf(loanDisbursmentActionForm.getAccountId()));
-		checkIfProductsOfferingCanCoexist(mapping,form,request,response);
+		new ProductMixValidator().checkIfProductsOfferingCanCoexist(getLoan(loanDisbursmentActionForm));
 		
-		if(AccountingRules.isBackDatedTxnAllowed()) {
-			SessionUtils.setAttribute(LoanConstants.PROPOSEDDISBDATE, loan
-					.getDisbursementDate(), request);
-		} else {
-			SessionUtils.setAttribute(LoanConstants.PROPOSEDDISBDATE, DateUtils.toDatabaseFormat(currentDate), request);
-		}
-		loanDisbursmentActionForm.setTransactionDate(DateUtils.getUserLocaleDate(getUserContext(request).getPreferredLocale(),
-														SessionUtils.getAttribute(LoanConstants.PROPOSEDDISBDATE, request).toString()));
+		Date currentDate = new Date(System.currentTimeMillis());
+		LoanBO loan = getLoan(loanDisbursmentActionForm);
+		setProposedDisbursementDate(request, currentDate, loan);
+		loanDisbursmentActionForm.setTransactionDate(getUserLocaleDate(getUserContext(request).getPreferredLocale(),
+														getProposedDisbursementDateFromSession(request)));
+		
+		UserContext uc = (UserContext) SessionUtils.getAttribute(
+				Constants.USER_CONTEXT_KEY, request.getSession());
 		loan.setUserContext(uc);
 		SessionUtils.setAttribute(Constants.BUSINESS_KEY, loan, request);
-		AcceptedPaymentTypePersistence persistence = new AcceptedPaymentTypePersistence();
+		
 		SessionUtils.setCollectionAttribute(MasterConstants.PAYMENT_TYPE,
-				persistence.getAcceptedPaymentTypesForATransaction(
-						uc.getLocaleId(),
-						TrxnTypes.loan_disbursement.getValue()), request);
+				getAcceptedPaymentTypes(uc.getLocaleId()), request);
 		loanDisbursmentActionForm.setAmount(loan
 				.getAmountTobePaidAtdisburtail(currentDate));
 		loanDisbursmentActionForm.setLoanAmount(loan.getLoanAmount());
 		return mapping.findForward(Constants.LOAD_SUCCESS);
 	}
-	
-	
-	private void checkIfProductsOfferingCanCoexist(ActionMapping mapping, ActionForm form,
-			HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-		LoanDisbursmentActionForm loanDisbursmentActionForm = (LoanDisbursmentActionForm) form;
-		
-		LoanBO newloan = ((LoanBusinessService) getService()).getAccount(Integer
+
+	private LoanBO getLoan(LoanDisbursmentActionForm loanDisbursmentActionForm) throws ServiceException {
+		return ((LoanBusinessService) getService()).getAccount(Integer
 				.valueOf(loanDisbursmentActionForm.getAccountId()));
-		List<LoanBO> loanList = ((LoanBusinessService) getService())
-				.getLoanAccountsActiveInGoodBadStanding(newloan.getCustomer().getCustomerId());
-		// Check if the client has an active loan accounts
-		if(null!=loanList){
-		for (LoanBO oldloan : loanList){
-		// Check if the new loan product to disburse is allowed to the existent active loan product
-			if(!oldloan.prdOfferingsCanCoexist(newloan.getLoanOffering().getPrdOfferingId()))
-			{
-				String[] param={oldloan.getLoanOffering().getPrdOfferingName(),newloan.getLoanOffering().getPrdOfferingName()};
-				throw new AccountException(LoanExceptionConstants.LOANCOULDNOTCOEXIST,param);
-			} 
-			
-			
+	}
+
+	private static List<PaymentTypeEntity> getAcceptedPaymentTypes(Short localeId) throws Exception {
+		return AcceptedPaymentTypeService.getAcceptedPaymentTypes(localeId);
+	}
+
+	private String getProposedDisbursementDateFromSession(HttpServletRequest request) throws PageExpiredException {
+		return SessionUtils.getAttribute(LoanConstants.PROPOSEDDISBDATE, request).toString();
+	}
+
+	private void setProposedDisbursementDate(HttpServletRequest request, Date currentDate, LoanBO loan) throws PageExpiredException {
+		if(AccountingRules.isBackDatedTxnAllowed()) {
+			SessionUtils.setAttribute(LoanConstants.PROPOSEDDISBDATE, loan
+					.getDisbursementDate(), request);
+		} else {
+			SessionUtils.setAttribute(LoanConstants.PROPOSEDDISBDATE, DateUtils.toDatabaseFormat(currentDate), request);
 		}
-		}	
 	}
 
+	private void setIsBackdatedTransactionAllowed(HttpServletRequest request) throws PageExpiredException {
+		SessionUtils.setAttribute(ConfigConstants.BACK_DATED_TRANSACTIONS_ALLOWED, AccountingRules.isBackDatedTxnAllowed(),request);
+	}
+
+	private void setIsRepaymentScheduleEnabled(HttpServletRequest request) throws PageExpiredException, PersistenceException {
+		SessionUtils.setAttribute(LoanConstants.REPAYMENT_SCHEDULES_INDEPENDENT_OF_MEETING_IS_ENABLED,
+        		ConfigurationPersistence.isRepaymentIndepOfMeetingEnabled() ? 1 : 0, request);
+	}
+	
+
+
 	@TransactionDemarcate(joinToken = true)
 	public ActionForward preview(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response)
@@ -140,8 +156,7 @@
 		LoanBO savedloan = (LoanBO) SessionUtils.getAttribute(
 				Constants.BUSINESS_KEY, request);
 		LoanDisbursmentActionForm actionForm = (LoanDisbursmentActionForm) form;
-		LoanBO loan = ((LoanBusinessService) getService()).getAccount(Integer
-				.valueOf(actionForm.getAccountId()));
+		LoanBO loan = getLoan(actionForm);
 		checkVersionMismatch(savedloan.getVersionNo(),loan.getVersionNo());
 		loan.setVersionNo(savedloan.getVersionNo());
 		UserContext uc = (UserContext) SessionUtils.getAttribute(
@@ -166,17 +181,16 @@
 		if(loan.getCustomer().hasActiveLoanAccountsForProduct(loan.getLoanOffering())) {
 			throw new AccountException("errors.cannotDisburseLoan.because.otherLoansAreActive");
 		}
-
-		if (actionForm.getPaymentModeOfPayment() != null
-				&& actionForm.getPaymentModeOfPayment().equals(""))
-			loan.disburseLoan(actionForm.getReceiptId(), trxnDate, Short
-					.valueOf(actionForm.getPaymentTypeId()), personnel,
-					receiptDate, Short.valueOf(actionForm
-							.getPaymentModeOfPayment()));
-		else
-			loan.disburseLoan(actionForm.getReceiptId(), trxnDate, Short
-					.valueOf(actionForm.getPaymentTypeId()), personnel,
-					receiptDate, Short.valueOf("1"));
+		
+		
+		String modeOfPayment = actionForm.getPaymentModeOfPayment();
+		Short modeOfPaymentId = StringUtils.isEmpty(modeOfPayment) ? PaymentTypes.CASH
+				.getValue()
+				: Short.valueOf(modeOfPayment);
+				
+		loan.disburseLoan(actionForm.getReceiptId(), trxnDate, Short
+				.valueOf(actionForm.getPaymentTypeId()), personnel,
+				receiptDate, modeOfPaymentId);
 		return mapping.findForward(Constants.UPDATE_SUCCESS);
 	}
 
Index: src/org/mifos/application/accounts/loan/business/LoanBO.java
===================================================================
--- src/org/mifos/application/accounts/loan/business/LoanBO.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/business/LoanBO.java	(working copy)
@@ -99,7 +99,7 @@
 import org.mifos.application.productdefinition.persistence.LoanPrdPersistence;
 import org.mifos.application.productdefinition.util.helpers.GraceType;
 import org.mifos.application.productdefinition.util.helpers.InterestType;
-import org.mifos.application.productsmix.persistence.ProductMixPersistence;
+import org.mifos.application.productsmix.business.service.ProductMixBusinessService;
 import org.mifos.application.util.helpers.YesNoFlag;
 import org.mifos.config.AccountingRules;
 import org.mifos.framework.business.PersistentObject;
@@ -661,7 +661,7 @@
 
 	@Override
 	public AccountTypes getType() {
-		return AccountTypes.LOAN_ACCOUNT;
+		return AccountTypes.getAccountType(getAccountType().getAccountTypeId());
 	}
 
 	@Override
@@ -3108,17 +3108,6 @@
 				getCustomer().getSavingsBalance());
 	}
 
-	public boolean prdOfferingsCanCoexist(Short idPrdOff_B)
-			throws PersistenceException {
-		try {
-			return new ProductMixPersistence().doesPrdOfferingsCanCoexist(this
-					.getLoanOffering().getPrdOfferingId(), idPrdOff_B);
-		}
-		catch (PersistenceException e) {
-			throw new PersistenceException(e);
-		}
-	}
-
 	public Set<LoanBO> getLoanAccountDetails() {
 		return loanAccountDetails;
 	}
Index: src/org/mifos/application/accounts/loan/business/service/LoanBusinessService.java
===================================================================
--- src/org/mifos/application/accounts/loan/business/service/LoanBusinessService.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/business/service/LoanBusinessService.java	(working copy)
@@ -1,16 +1,19 @@
 package org.mifos.application.accounts.loan.business.service;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
+import org.mifos.application.accounts.business.AccountBO;
+import org.mifos.application.accounts.business.service.AccountBusinessService;
 import org.mifos.application.accounts.loan.business.LoanActivityEntity;
 import org.mifos.application.accounts.loan.business.LoanActivityView;
 import org.mifos.application.accounts.loan.business.LoanBO;
 import org.mifos.application.accounts.loan.persistance.LoanPersistence;
 import org.mifos.application.accounts.util.helpers.AccountExceptionConstants;
-import org.mifos.application.branchreport.LoanArrearsAgingPeriod;
-import org.mifos.application.office.business.OfficeBO;
+import org.mifos.application.configuration.business.service.ConfigurationBusinessService;
+import org.mifos.application.customer.business.CustomerBO;
 import org.mifos.framework.business.BusinessObject;
 import org.mifos.framework.business.service.BusinessService;
 import org.mifos.framework.exceptions.PersistenceException;
@@ -20,6 +23,21 @@
 
 public class LoanBusinessService extends BusinessService {
 
+	private LoanPersistence loanPersistence;
+	private ConfigurationBusinessService configService;
+	private AccountBusinessService accountBusinessService;
+
+	
+	public LoanBusinessService() {
+		this(new LoanPersistence(), new ConfigurationBusinessService(),new AccountBusinessService());
+	}
+	
+	LoanBusinessService(LoanPersistence loanPersistence, ConfigurationBusinessService configService, AccountBusinessService accountBusinessService) {
+		this.loanPersistence = loanPersistence;
+		this.configService = configService;
+		this.accountBusinessService = accountBusinessService;
+	}
+
 	@Override
 	public BusinessObject getBusinessObject(UserContext userContext) {
 		return null;
@@ -28,7 +46,7 @@
 	public LoanBO findBySystemId(String accountGlobalNum)
 			throws ServiceException {
 		try {
-			return new LoanPersistence().findBySystemId(accountGlobalNum);
+			return loanPersistence.findBySystemId(accountGlobalNum);
 		} catch (PersistenceException e) {
 			throw new ServiceException(
 					AccountExceptionConstants.FINDBYGLOBALACCNTEXCEPTION, e,
@@ -40,7 +58,7 @@
 	public List<LoanBO>  findIndividualLoans(String accountId)
 			throws ServiceException {
 		try {
-			return new LoanPersistence().findIndividualLoans(accountId);
+			return loanPersistence.findIndividualLoans(accountId);
 		} catch (PersistenceException e) {
 			throw new ServiceException(
 					AccountExceptionConstants.FINDBYGLOBALACCNTEXCEPTION, e,
@@ -112,7 +130,7 @@
 
 	public LoanBO getAccount(Integer accountId) throws ServiceException {
 		try {
-			return new LoanPersistence().getAccount(accountId);
+			return loanPersistence.getAccount(accountId);
 		} catch (PersistenceException e) {
 			throw new ServiceException(e);
 		}
@@ -120,7 +138,7 @@
 	public  List<LoanBO> getLoanAccountsActiveInGoodBadStanding(
 			Integer customerId) throws ServiceException {
 		try {
-			return new LoanPersistence().getLoanAccountsActiveInGoodBadStanding(customerId);
+			return loanPersistence.getLoanAccountsActiveInGoodBadStanding(customerId);
 		} catch (PersistenceException e) {
 			throw new ServiceException(e);
 		}
@@ -129,7 +147,7 @@
 	public Short getLastPaymentAction(Integer accountId)
 			throws ServiceException {
 		try {
-			return new LoanPersistence().getLastPaymentAction(accountId);
+			return loanPersistence.getLastPaymentAction(accountId);
 		} catch (PersistenceException e) {
 			throw new ServiceException(e);
 		}
@@ -138,7 +156,7 @@
 	public List<LoanBO> getSearchResults(String officeId, String personnelId,
 			String type, String currentStatus) throws ServiceException {
 		try {
-			return new LoanPersistence().getSearchResults(officeId,
+			return loanPersistence.getSearchResults(officeId,
 					personnelId, type, currentStatus);
 		} catch (PersistenceException he) {
 			throw new ServiceException(he);
@@ -148,14 +166,14 @@
 	public List<LoanBO> getAllLoanAccounts()
 			throws ServiceException {		
 		try {
-			return new LoanPersistence().getAllLoanAccounts();
+			return loanPersistence.getAllLoanAccounts();
 		} catch (PersistenceException pe) {
 			throw new ServiceException(pe);
 		}
 	}
 
 	public void initialize(Object object) {
-		new LoanPersistence().initialize(object);
+		loanPersistence.initialize(object);
 	}
 	
 	public List<LoanBO> getAllChildrenForParentGlobalAccountNum(
@@ -163,4 +181,32 @@
 		return findIndividualLoans(findBySystemId(globalAccountNum)
 				.getAccountId().toString());
 	}
+
+	public List<LoanBO> getActiveLoansForAllClientsAssociatedWithGroupLoan(
+			LoanBO loan) throws ServiceException {
+		List<LoanBO> activeLoans = new ArrayList<LoanBO>();
+		Collection<CustomerBO> clients = getClientsAssociatedWithGroupLoan(loan);
+
+		for (CustomerBO customerBO : clients) {
+			for (AccountBO accountBO : customerBO.getAccounts()) {
+				if (accountBO.isActiveLoanAccount()) {
+					activeLoans.add((LoanBO) accountBO);
+				}
+			}
+		}
+		return activeLoans;
+	}
+
+	private Collection<CustomerBO> getClientsAssociatedWithGroupLoan(LoanBO loan)
+			throws ServiceException {
+		Collection<CustomerBO> clients;
+
+		if (configService.isGlimEnabled()) {
+			clients = accountBusinessService.getCoSigningClientsForGlim(loan
+					.getAccountId());
+		}else {
+			clients = loan.getCustomer().getChildren();
+		}
+		return clients;
+	}
 }
Index: src/org/mifos/application/accounts/loan/util/helpers/LoanExceptionConstants.java
===================================================================
--- src/org/mifos/application/accounts/loan/util/helpers/LoanExceptionConstants.java	(revision 13536)
+++ src/org/mifos/application/accounts/loan/util/helpers/LoanExceptionConstants.java	(working copy)
@@ -59,11 +59,12 @@
 	public final String INVALIDFIELD = "exceptions.application.loan.invalidfield";
 	public final String INVALIDMINMAX = "errors.defMinMax";
 	public final String SELECT_ATLEAST_ONE_RECORD = "errors.alleastonerecord";
-	public final String LOANCOULDNOTCOEXIST = "errors.loancouldnotcoexist";
+	public final String LOANS_CANNOT_COEXIST = "errors.loancouldnotcoexist";
+	public final String LOANS_CANNOT_COEXIST_ACROSS_CUSTOMER_LEVELS = "errors.loancouldnotcoexistacrosscustomerlevels";	
 	public final String LOAN_DETAILS_ENTERED_WITHOUT_SELECTING_INDIVIDUAL = "errors.loanandpurposeentredwithoutselectingindividual";
 	public final String NUMBER_OF_SELECTED_MEMBERS_IS_LESS_THAN_TWO = "errors.numberofselectedmembersisnotatleasttwo";
 	public final String SUM_OF_INDIVIDUAL_AMOUNTS_IS_NOT_IN_THE_RANGE_OF_ALLOWED_AMOUNTS = "errors.sumofindividualamountsisnotintherangeofallowedamounts";
 	public final String CUSTOMER_LOAN_AMOUNT_FIELD = "errors.individualamountfield";
 	public final String CUSTOMER_PURPOSE_OF_LOAN_FIELD = "errors.individualpurposeofloanfield";
-	public final String REPAYMENTDAYISREQUIRED = "errors.repaymentDayIsRequired";	
+	public final String REPAYMENTDAYISREQUIRED = "errors.repaymentDayIsRequired";
 }
Index: src/org/mifos/application/accounts/business/AccountBO.hbm.xml
===================================================================
--- src/org/mifos/application/accounts/business/AccountBO.hbm.xml	(revision 13536)
+++ src/org/mifos/application/accounts/business/AccountBO.hbm.xml	(working copy)
@@ -369,7 +369,7 @@
 		<![CDATA[from org.mifos.application.accounts.loan.business.LoanBO account
 			where 
 			account.accountState.id in (:loanactiveingoodstand,:loanactiveinbadstand)
-			and account.accountType.accountTypeId=:accounttype_id  
+			and account.accountType.accountTypeId = :accounttype_id
 			and account.customer.customerId=:customer
 			group by account.accountId]]>
 	</query>
Index: src/org/mifos/application/productsmix/business/service/ProductMixBusinessService.java
===================================================================
--- src/org/mifos/application/productsmix/business/service/ProductMixBusinessService.java	(revision 13536)
+++ src/org/mifos/application/productsmix/business/service/ProductMixBusinessService.java	(working copy)
@@ -60,6 +60,16 @@
 
 public class ProductMixBusinessService extends BusinessService {
 
+	private final ProductMixPersistence productMixPersistence;
+
+	public ProductMixBusinessService(ProductMixPersistence productMixPersistence) {
+		this.productMixPersistence = productMixPersistence;
+	}
+	
+	public ProductMixBusinessService() {
+		this(new ProductMixPersistence());
+	}
+	
 	@Override
 	public BusinessObject getBusinessObject(UserContext userContext) {
 		return null;
@@ -253,4 +263,10 @@
 		}
 	}
 
+	public boolean canProductsCoExist(LoanOfferingBO offeringBO,
+			LoanOfferingBO offeringBO2) throws PersistenceException {
+		return productMixPersistence.doesPrdOfferingsCanCoexist(
+				offeringBO.getPrdOfferingId(), offeringBO2.getPrdOfferingId());
+	}
+
 }
Index: src/org/mifos/application/customer/client/struts/action/ClientCustAction.java
===================================================================
--- src/org/mifos/application/customer/client/struts/action/ClientCustAction.java	(revision 13536)
+++ src/org/mifos/application/customer/client/struts/action/ClientCustAction.java	(working copy)
@@ -943,14 +943,9 @@
 				getCustomerBusinessService().fetchLoanCycleCounter(
 						clientBO), request);
 		List<LoanBO> loanAccounts = clientBO.getOpenLoanAccounts();
-		List<LoanBO> individualLoanAccounts = clientBO.getOpenIndividualLoanAccounts();
 		List<SavingsBO> savingsAccounts = clientBO.getOpenSavingAccounts();
 		setLocaleIdToLoanStatus(loanAccounts, localeId);
 		setLocaleIdToSavingsStatus(savingsAccounts, localeId);
-		setLocaleIdToLoanStatus(individualLoanAccounts, localeId);
-		//		 add individualLoanAccounts to loanAccounts
-		for (int i=0; i < individualLoanAccounts.size(); i++)
-			loanAccounts.add(individualLoanAccounts.get(i));	
 		SessionUtils.setCollectionAttribute(
 				ClientConstants.CUSTOMERLOANACCOUNTSINUSE, loanAccounts,
 				request);		
Index: src/org/mifos/config/localizedResources/LoanUIResources.properties
===================================================================
--- src/org/mifos/config/localizedResources/LoanUIResources.properties	(revision 13536)
+++ src/org/mifos/config/localizedResources/LoanUIResources.properties	(working copy)
@@ -365,7 +365,8 @@
 exception.accounts.create.prd.inactive=The product instance you have selected is currently inactive. Please select active product instance.
 exception.accounts.create.customer.inactive=Cannot create a loan for inactive customer. 
 error.versionnodonotmatch=The record has already been modified by another user. Please navigate to the details page and start the activity again.
-errors.loancouldnotcoexist=The loan could not be disbursed as {0} and {1} are not allowed
+errors.loancouldnotcoexist=The loan could not be disbursed as {0} and {1} are not allowed to co-exist
+errors.loancouldnotcoexistacrosscustomerlevels=The loan could not be disbursed as loan '{0}' of customer '{2}' and {1} are not allowed to co-exist
 errors.specifyloanaccountId=Please specify {0} account ID to be searched.
 errors.loanandpurposeentredwithoutselectingindividual=You have entered details for a member you have not selected. Select the checkbox in front of the member's name in order to include him or her in the loan.
 errors.numberofselectedmembersisnotatleasttwo=You must select at least two individual members in the "Individual Details" section in order to successfully create a loan.
Index: src/org/mifos/doc-root/application/loan/jsp/glimLoanForm.jsp
===================================================================
--- src/org/mifos/doc-root/application/loan/jsp/glimLoanForm.jsp	(revision 13536)
+++ src/org/mifos/doc-root/application/loan/jsp/glimLoanForm.jsp	(working copy)
@@ -1,4 +1,5 @@
 <%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
+<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
 <%@taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
 <%@taglib uri="http://struts.apache.org/tags-html-el" prefix="html-el"%>
 <%@ taglib uri="http://struts.apache.org/tags-tiles" prefix="tiles"%>
