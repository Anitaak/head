<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >



<hibernate-mapping>

    <class name="org.mifos.application.accounts.util.valueobjects.AccountStatusChangeHistory" table="ACCOUNT_STATUS_CHANGE_HISTORY">
        <id name="accountStatusChangeId" column="ACCOUNT_STATUS_CHANGE_ID"  unsaved-value="-1">
            <generator class="native"/>
        </id>
        
  	<property name="accountId" column="ACCOUNT_ID"  type="integer"/>
 	<property name="oldStatus" column="OLD_STATUS" type="short" />
 	<property name="newStatus" column="NEW_STATUS" type="short" />
 	<property name="changedDate" column="CHANGED_DATE"  type="date"/>
	<property name="personnelId" column="CHANGED_BY"  type="short"/>

    </class>
    <query name="accounts.getStateChangeHistory">
		<![CDATA[Select new org.mifos.application.accounts.util.valueobjects.AccountStatusChangeHistory(lookUp1.lookUpValue,lookUp2.lookUpValue, history.changedDate,personnel.displayName) from  org.mifos.application.accounts.util.valueobjects.AccountStatusChangeHistory history, org.mifos.application.master.util.valueobjects.AccountState status1, org.mifos.application.master.util.valueobjects.AccountState status2, org.mifos.application.master.util.valueobjects.LookUpValueLocale lookUp1, org.mifos.application.master.util.valueobjects.LookUpValueLocale lookUp2, org.mifos.application.personnel.util.valueobjects.Personnel personnel where history.personnelId=personnel.personnelId and history.oldStatus=status1.accountStateId and history.newStatus=status2.accountStateId and history.accountId=:accountId and lookUp1.locale.localeId=:localeId and lookUp1.lookUpId=status1.lookUpId and lookUp2.locale.localeId=:localeId and lookUp2.lookUpId=status2.lookUpId]]>
	</query>	
	<query name="accounts.getApprovedAccountState">
		<![CDATA[from org.mifos.application.accounts.util.valueobjects.AccountStatusChangeHistory asch where asch.accountId=:accountId and asch.newStatus=:newState]]>
	</query>	
     	
</hibernate-mapping>