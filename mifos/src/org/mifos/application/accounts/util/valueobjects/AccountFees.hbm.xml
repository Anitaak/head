<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >


<hibernate-mapping>

    <class name="org.mifos.application.accounts.util.valueobjects.AccountFees" table="ACCOUNT_FEES">
        <id name="accountFeeId" column="ACCOUNT_FEE_ID" type="integer">
            <generator class="native"/>
        </id>
        <version name="versionNo" column="VERSION_NO" type="integer" unsaved-value="null"/>
 <!--   <property name="accountFeeAmount" column="ACCOUNT_FEE_AMNT" type="double"/>-->
        <property name="feeAmount" column="FEE_AMNT" type="double"/>
        <property name="statusChangeDate" column="STATUS_CHANGE_DATE" type="date" />
		<property name="feeStatus" column="FEE_STATUS" type="short" />
		<property name="lastAppliedDate" column="LAST_APPLIED_DATE" />
		
		<!--<property name="feeAmount" type="org.mifos.framework.util.helpers.MoneyCompositeUserType">
		 <column name="FEE_AMNT_CURRENCY_ID" /> 
		 <column name="FEE_AMNT" />
		</property>-->
		<property name="accountFeeAmount" type="org.mifos.framework.util.helpers.MoneyCompositeUserType">
		 <column name="ACCOUNT_FEE_AMNT_CURRENCY_ID" /> 
		 <column name="ACCOUNT_FEE_AMNT" />
		</property>
 		<many-to-one name="account" column="ACCOUNT_ID" class="org.mifos.application.accounts.util.valueobjects.Account"  not-null="true" lazy="false" />
        <many-to-one name="fees" column="FEE_ID" class="org.mifos.application.fees.util.valueobjects.Fees"  not-null="true" unique="true" lazy="true"/>
        
    </class>
    <!-- required for client upcoming fees charges added by mohammedn-->
	<query name="Client.GetClientCharges">
		<![CDATA[select new org.mifos.application.accounts.util.valueobjects.ClientUpcomingFeecahrges(
			fees.feeName,feeDetail.feeAmount)
			from org.mifos.application.accounts.util.valueobjects.AccountFeesActionDetail feeDetail left join
			feeDetail.accountFee.fees fees,org.mifos.application.accounts.util.valueobjects.AccountActionDate accAct
			where feeDetail.accountFeeDetailId.installmentId=(select min(accountAct.installmentId) 
			from org.mifos.application.accounts.util.valueobjects.AccountActionDate accountAct 
			where accountAct.account.accountId = :accountId  and accountAct.actionDate >= current_date)
			and accAct.account.accountId = :accountId and accAct.actionDateId=feeDetail.accountFeeDetailId]]>
      </query>
      
      <query name="Client.GetSumClientDueCharges">
		<![CDATA[from org.mifos.application.accounts.util.valueobjects.AccountActionDate accAct
			where accAct.installmentId=(select min(accountAct.installmentId) 
			from org.mifos.application.accounts.util.valueobjects.AccountActionDate accountAct 
			where accountAct.account.accountId = :accountId  and accountAct.actionDate >= current_date)
			and accAct.account.accountId = :accountId]]>
      </query>
      <query name="Client.GetSumClientOverDueCharges">
		<![CDATA[from org.mifos.application.accounts.util.valueobjects.AccountActionDate accountAct 
			where accountAct.account.accountId = :accountId  and accountAct.actionDate < current_date
			and accountAct.paymentStatus=0]]>
      </query>
      <query name="Client.GetRecurrenceFeesDetails">
		<![CDATA[select new org.mifos.application.accounts.util.valueobjects.ClientUpcomingFeecahrges(
			feeDetail.fees.feeName,feeDetail.accountFeeAmount,feeDetail.fees.feeFrequency.feeMeetingFrequency,feeDetail.fees.feeId,feeDetail.account.accountId)
			from org.mifos.application.accounts.util.valueobjects.AccountFees feeDetail
			where feeDetail.account.accountId=:accountId
			and feeDetail.fees.feeFrequency.feeMeetingFrequency.meetingId != null and feeDetail.feeStatus != :FEES_INACTIVE]]>
      </query>
      <query name="Client.GetUpcomingChargesDate">
		<![CDATA[select min(accountAct.actionDate) 
			from org.mifos.application.accounts.util.valueobjects.AccountActionDate accountAct 
			where accountAct.account.accountId = :accountId  and accountAct.actionDate >= current_date]]>
      </query>
      <query name="LoanDisburse.getAccountFees">
		<![CDATA[select accountFees.accountFeeAmount
			from org.mifos.application.accounts.util.valueobjects.AccountFees accountFees
			where accountFees.fees.feeFrequency.feePaymentId=:paymentId and accountFees.account=:accountId]]>
      </query>
      <query name="Account.getActiveFees">
		<![CDATA[from org.mifos.application.accounts.util.valueobjects.AccountFees accountFees
			where accountFees.account=:accountId and (accountFees.feeStatus=:feeStatus or accountFees.feeStatus is null)]]>
      </query>
</hibernate-mapping>