<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >


<hibernate-mapping>

    <class name="org.mifos.application.accounts.util.valueobjects.Account" table="ACCOUNT">
        <id name="accountId" column="ACCOUNT_ID" type="integer">
            <generator class="native"/>
        </id>
 		<version name="versionNo" column="VERSION_NO" type="integer" unsaved-value="null"/>
        <many-to-one name="customer" column="CUSTOMER_ID" class="org.mifos.application.customer.util.valueobjects.Customer"  cascade="none" update="false" insert="true" unique="true" />
        
        <property name="globalAccountNum" column="GLOBAL_ACCOUNT_NUM" type="string" update="false"/>
        <property name="officeId" column="OFFICE_ID" type="short" />
        <property name="personnelId" column="PERSONNEL_ID" type="short" />
        <property name="accountStateId" column="ACCOUNT_STATE_ID" type="short"  not-null="true" />
        <property name="accountTypeId" column="ACCOUNT_TYPE_ID" type="short"  not-null="true" update="false"/>
        <property name="createdBy" column="CREATED_BY" type="short"  not-null="true" update="false"/>
        <property name="createdDate" column="CREATED_DATE" type="date"  not-null="true" update="false"/>
        <property name="updatedBy" column="UPDATED_BY" type="short"   />
        <property name="updatedDate" column="UPDATED_DATE" type="date"   />
        <property name="closedDate" column="CLOSED_DATE"/>
     
        <set name="accountFeesSet"   cascade="all" inverse="true" table="ACCOUNT_FEES">
			<key column="ACCOUNT_ID"  />
			
			<many-to-many class="org.mifos.application.accounts.util.valueobjects.AccountFees" column="ACCOUNT_FEE_ID"/>
		</set>
		
		<set name="accountActivitySet"  cascade="all" table="ACCOUNT_ACTIVITY">
				<key column="ACCOUNT_ID"  />
				<one-to-many class="org.mifos.application.accounts.util.valueobjects.AccountActivity" />
		</set>
		
		<set name="accountActionDateSet"  cascade="all" inverse="true" table="ACCOUNT_ACTIONS_DATE" order-by="INSTALLMENT_ID asc" lazy="true">
				<key column="ACCOUNT_ID"  />
				<one-to-many class="org.mifos.application.accounts.util.valueobjects.AccountActionDate" />
		</set>
		
		
		<!-- This is for customer account-->
		<joined-subclass name="org.mifos.application.accounts.util.valueobjects.CustomerAccount" table="CUSTOMER_ACCOUNT">
			<key column="ACCOUNT_ID"/>
		</joined-subclass>
		
		<!-- This is for loan account-->
		<joined-subclass name="org.mifos.application.accounts.loan.util.valueobjects.Loan" table="LOAN_ACCOUNT">
			<key column="ACCOUNT_ID"/>
			
	        <property name="groupFlag" column="GROUP_FLAG" type="short" />
	        <property name="loanBalance" column="LOAN_BALANCE" type="double" />
	        <property name="interestRateAmount" column="INTEREST_RATE_AMOUNT" type="double" />
	        <property name="noOfInstallments" column="NO_OF_INSTALLMENTS" type="short"  not-null="true" />
	        <property name="disbursementDate" column="DISBURSEMENT_DATE" type="date" />
	        <property name="collateralNote" column="COLLATERAL_NOTE" type="string"   />
	        <property name="collateralTypeId" column="COLLATERAL_TYPE_ID" type="short"   />
	        <property name="gracePeriodTypeId" column="GRACE_PERIOD_TYPE_ID" type="short"   />
   	        <property name="interestTypeId" column="INTEREST_TYPE_ID" type="short"   update="false"/>
			<property name="gracePeriodDuration" column="GRACE_PERIOD_DURATION" type="short"   />
			<property name="gracePeriodPenalty" column="GRACE_PERIOD_PENALTY" type="short"  update="false" />
			<property name="businessActivityId" column="BUSINESS_ACTIVITIES_ID" type="integer" />
			<property name="intrestAtDisbursement" column="INTEREST_AT_DISB" type="short" />
			<property name="loanAmount" type="org.mifos.framework.util.helpers.MoneyCompositeUserType">
			 <column name="LOAN_AMOUNT_CURRENCY_ID" /> 
			 <column name="LOAN_AMOUNT" />
			</property>
			
			<many-to-one name="loanOffering" column="PRD_OFFERING_ID" class="org.mifos.application.productdefinition.util.valueobjects.LoanOffering" unique="true" lazy="true" cascade="none" insert="true" update="false"/>
			
			<one-to-one name="loanSummary" class="org.mifos.application.accounts.loan.util.valueobjects.LoanSummary" cascade="all" lazy="true"/>
			
			<set name="loanPenaltySet"  cascade="all" inverse="true" table="LOAN_PENALTY">
				<key column="ACCOUNT_ID"  />
				<one-to-many class="org.mifos.application.accounts.loan.util.valueobjects.LoanPenalty" />
			</set>
			
			
 			<many-to-one name="currency" column="CURRENCY_ID" class="org.mifos.application.master.util.valueobjects.Currency" cascade="none" insert="true" update="false" unique="true" />
      		<many-to-one name="fund" column="FUND_ID" class="org.mifos.application.fund.util.valueobjects.Fund" cascade="none" insert="true" update="false" unique="true" />
         	<many-to-one name="loanMeeting" column="MEETING_ID" class="org.mifos.application.meeting.util.valueobjects.Meeting" unique="true" insert="true" cascade="all" update="false"/>
         	<one-to-one name="loanPerformanceHistory" class="org.mifos.application.accounts.loan.util.valueobjects.LoanPerformanceHistory" cascade="all" lazy="true"/>
         	
         	<set name="waiveOffHistorySet"  cascade="all" table="WAIVE_OFF_HISTORY">
				<key column="ACCOUNT_ID"  />
				<one-to-many class="org.mifos.application.accounts.loan.util.valueobjects.WaiveOffHistory" />
			</set>
        	<set name="loanActivitySet" cascade="all" inverse="true"
				table="LOAN_ACTIVITY_DETAILS" lazy="true" order-by="ID desc">
				<key column="ACCOUNT_ID" />
				<one-to-many
					class="org.mifos.application.accounts.loan.util.valueobjects.LoanActivity" />
			</set>
		</joined-subclass>
    </class>
    <!-- This query returns the applicable prd offerings for a customer id
         the logic is : - if the customer does not have a meeting return all prd offerings valid for that customer level
         else get only the applicable prd offerings where the recurrence id of the customer matches with that of the prd offering.-->
    <query name="accounts.applicableproductofferings">								  
		<![CDATA[select new org.mifos.application.productdefinition.util.valueobjects.PrdOfferingMaster(prdOffering.prdOfferingId,prdOffering.prdOfferingName,prdOffering.globalPrdOfferingNum,prdOffering.prdOfferingMeeting.meeting.MeetingDetails.recurAfter) 
						from org.mifos.application.productdefinition.util.valueobjects.PrdOffering prdOffering,
						Customer customer left join fetch customer.customerMeeting as customerMeeting 
						left join fetch customerMeeting.meeting as meeting
						left join fetch meeting.MeetingDetails as meetingDetails
						left join meetingDetails.recurrenceType as recurrenceType
						where prdOffering.prdType.productTypeID = :prdTypeID
						and prdOffering.prdStatus = :prdStatus
						and customer.customerId = :customerId
						and (prdOffering.prdApplicableMaster.prdApplicableMasterId = :prdApplicableMaster1	
							or	prdOffering.prdApplicableMaster.prdApplicableMasterId = :prdApplicableMaster2	)
						and (prdOffering.prdOfferingMeeting.meeting.MeetingDetails.recurrenceType.recurrenceId = recurrenceType.recurrenceId or customerMeeting.customer is null)				
						order by prdOffering.prdOfferingName
		]]>
	</query>
	
	
	<!-- The following query is to  obtain the max account id in the system-->
	<query name="accounts.maxaccountid">
		<![CDATA[select max(account.accountId)	from Account account 	]]>
	</query>
	
	<!--Get the fees applicable to loan products-->
	<query name="accounts.loanFees">
		<![CDATA[select new org.mifos.application.fees.util.valueobjects.FeeMaster(fees.feeId,fees.feeName,fees.rateOrAmount,fees.globalFeeNum,fees.versionNo,fees.feeFrequency.feeFrequencyTypeId) 
					from org.mifos.application.fees.util.valueobjects.Fees as fees 
					where fees.feeId not in 
						(select prdOfferingFees.fees.feeId 
							from org.mifos.application.productdefinition.util.valueobjects.PrdOfferingFees prdOfferingFees 
							where prdOfferingFees.loanOffering.prdOfferingId = :prdOfferingId)
					and fees.categoryId = :categoryId
					and fees.status	= 1]]>
	</query>
	
	<!--Finds by global account num-->
	<query name="accounts.findByGloabalAccNum">
		<![CDATA[from Account account where account.globalAccountNum = :globalAccountNum]]>
	</query>	
	<!-- Get the closed loan accounts	-->
	<query name="accounts.viewallclosedaccounts">
		<![CDATA[from org.mifos.application.accounts.util.valueobjects.Account account where account.customer.customerId=:customerId
					and account.accountTypeId=1 and account.accountStateId in(6,7,8,10) ]]>
	</query>
	<query name="accounts.accountSearch">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID) or (cust.customerLevel.levelId =:LEVELID and  cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID	and cust.statusId =:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>
	</query>
	
	
	<query name="accounts.count_accountSearch">
		<![CDATA[select count(distinct cust.customerId)  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID) or (cust.customerLevel.levelId =:LEVELID and  cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID	and cust.statusId =:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>
	</query>
	
	<query name="accounts.accountSearch_noclients">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId !=:LEVELID and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID)  order by cust.customerLevel.levelId,cust.displayName ]]>
	</query>
	
	
	<query name="accounts.count_accountSearch_noclients">
		<![CDATA[select count(distinct cust.customerId) from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId !=:LEVELID and (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE) and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID)  order by cust.customerLevel.levelId,cust.displayName ]]>
	</query>
	
	<query name="accounts.levelaccountSearch">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId !=:LEVELID and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) or (cust.customerLevel.levelId =:LEVELID and cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID and cust.statusId=:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>				
	</query>
	<query name="accounts.count_levelaccountSearch">
		<![CDATA[select  count(distinct cust.customerId) from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId !=:LEVELID and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) or (cust.customerLevel.levelId =:LEVELID and cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID and cust.statusId=:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>				
	</query>
	
	<query name="accounts.levelaccountSearch_noclients">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId !=:LEVELID and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) order by cust.customerLevel.levelId,cust.displayName]]>
	</query>
	<query name="accounts.count_levelaccountSearch_noclients">
		<![CDATA[select count(distinct cust.customerId)  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (cust.customerLevel.levelId !=:LEVELID and (:GROUP_LOAN_ALLOWED=true and cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE) and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) order by cust.customerLevel.levelId,cust.displayName ]]>		
	</query>
	
	<query name="accounts.accountIdSearch">
	        	   <![CDATA[select c.customerId,c.displayName ,c.globalCustNum,c.customerLevel.levelId, off.officeId,off.officeName,per.displayName, per.personnelId,a.accountStateId, pa.displayName, pa.globalCustNum, papa.displayName,papa.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as c left join  c.customerAccounts as a  left join c.parentCustomer as pa left join pa.parentCustomer as papa left join c.office as off  left join c.personnel as per where off.officeId=:OFFICEID and a.globalAccountNum =:SEARCH_STRING ]]>
    </query>
    <query name="accounts.accountIdSearch_withoutoffice">
	        	   <![CDATA[select c.customerId,c.displayName ,c.globalCustNum,c.customerLevel.levelId, off.officeId,off.officeName,per.displayName, per.personnelId,a.accountStateId, pa.displayName, pa.globalCustNum, papa.displayName,papa.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as c left join  c.customerAccounts as a  left join c.parentCustomer as pa left join pa.parentCustomer as papa left join c.office as off  left join c.personnel as per where a.globalAccountNum =:SEARCH_STRING ]]>
    </query>
    
    <query name="accounts.customersForSavingsAccount">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where ( ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE))  and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) or (cust.customerLevel.levelId =:LEVELID and cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID and cust.statusId=:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>				
	</query>
	<query name="accounts.count_customersForSavingsAccount">
		<![CDATA[select count(distinct cust.customerId)  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where ( ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE))  and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) or (cust.customerLevel.levelId =:LEVELID and cnd.customer.customerId=cust.customerId and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID and cust.statusId=:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>				
	</query>
	
	<query name="accounts.customersForSavingsAccount_noclients">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where ( ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE))  and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING)  order by cust.customerLevel.levelId,cust.displayName]]>				
	</query>
	<query name="accounts.count_customersForSavingsAccount_noclients">
		<![CDATA[select count(distinct cust.customerId)  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where ( ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE))  and off.searchId like :SEARCH_ID and cust.personnel.personnelId=:PERSONNEL_ID  and cust.displayName like :SEARCH_STRING) order by cust.customerLevel.levelId,cust.displayName]]>				
	</query>
	
	
	
	<query name="accounts.customersForSavingsAccountNonLO">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (  ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE)) and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID) or (cust.customerLevel.levelId =:LEVELID and  cnd.customer.customerId=cust.customerId  and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.statusId =:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>
	</query>
	
	
	<query name="accounts.count_customersForSavingsAccountNonLO">
		<![CDATA[select  count(distinct cust.customerId) from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off, org.mifos.application.customer.util.valueobjects.CustomerNameDetail as cnd where (  ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE)) and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID) or (cust.customerLevel.levelId =:LEVELID and  cnd.customer.customerId=cust.customerId  and cnd.nameType=:CLIENTNAMETYPE and (cust.displayName like :SEARCH_STRING or cnd.lastName like :SEARCH_STRING or cnd.secondLastName like :SEARCH_STRING ) and off.searchId like :SEARCH_ID and cust.statusId =:CLIENTACTIVE) order by  cust.customerLevel.levelId,cnd.lastName,cnd.firstName,cust.displayName ]]>
	</query>
	
	<query name="accounts.customersForSavingsAccount_noclientsNonLO">
		<![CDATA[select distinct cust.displayName,cust.customerId,customerOne.displayName,customerTwo.displayName,off.officeName,cust.globalCustNum  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (  ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID and cust.statusId = :GROUPACTIVE)) and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID)  order by cust.customerLevel.levelId,cust.displayName]]>
	</query>
	
	
	<query name="accounts.count_customersForSavingsAccount_noclientsNonLO">
		<![CDATA[select count(distinct cust.customerId)  from org.mifos.application.customer.util.valueobjects.Customer as cust left join cust.parentCustomer as customerOne left join customerOne.parentCustomer as customerTwo left join cust.office as off where (  ((cust.customerLevel.levelId =:CENTERLEVELID and cust.statusId = :CENTERACTIVE) or (cust.customerLevel.levelId =:GROUPLEVELID or cust.statusId = :GROUPACTIVE)) and cust.displayName like :SEARCH_STRING and off.searchId like :SEARCH_ID)  order by cust.customerLevel.levelId,cust.displayName ]]>
	</query>
	
	<query name="accounts.listOfAccountsForLoanAccountIdSearch">
		<![CDATA[select account.globalAccountNum,account.accountTypeId from org.mifos.application.accounts.util.valueobjects.Account account left join account.customer where account.customer.customerId=:customerId and (account.accountTypeId=:loanAccountTypeId or account.accountTypeId=:savingsAccountTypeId) and account.globalAccountNum=:searchString ]]>
	</query>
	
	<query name="accounts.getPotentialDisbDate">
		<![CDATA[select a.actionDate from org.mifos.application.accounts.util.valueobjects.AccountActionDate a ,
					org.mifos.application.accounts.util.valueobjects.Account b
					where a.customerId=:customerId 
					and a.actionDate >= :todaysDate 
					and a.account.accountId=b.accountId
					and b.accountTypeId=3
					order by a.installmentId]]>
	</query>				
</hibernate-mapping>