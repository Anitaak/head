<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >


<hibernate-mapping>

    <class name="org.mifos.application.personnel.util.valueobjects.Personnel" table="PERSONNEL">
        <id name="personnelId" column="PERSONNEL_ID" type="short">
            <generator class="native"/>
        </id>
		<version name="versionNo" column="VERSION_NO" type="integer" unsaved-value="negative"/>
 		<many-to-one name="level" column="LEVEL_ID"  class="org.mifos.application.personnel.util.valueobjects.PersonnelLevel"  unique="true" lazy="false"/>
 		<many-to-one name="office" column="OFFICE_ID"  class="org.mifos.application.office.util.valueobjects.Office"  unique="true" lazy="false"/>
 		<many-to-one name="preferredLocale" column="PREFERRED_LOCALE" class="org.mifos.application.master.util.valueobjects.SupportedLocales" />
        <one-to-one name="personnelDetails"  class="org.mifos.application.personnel.util.valueobjects.PersonnelDetails"  cascade="all" lazy="false"/>

        <property name="globalPersonnelNum" column="GLOBAL_PERSONNEL_NUM" type="string" />
        <property name="displayName" column="DISPLAY_NAME" type="string" />
        <property name="personnelStatus" column="PERSONNEL_STATUS" type="short" />
        <property name="title" column="TITLE" type="integer" />
        <property name="searchId" column="SEARCH_ID" type="string" />
        <property name="maxChildCount" column="MAX_CHILD_COUNT" type="integer" />
        <property name="encriptedPassword" column="PASSWORD" type="binary" />
        <property name="userName" column="LOGIN_NAME" type="string" />
        <property name="emailId" column="EMAIL_ID" type="string" />                        
        <property name="passwordChanged" column="PASSWORD_CHANGED" type="short" />                        
        <property name="createdBy" column="CREATED_BY" type="short" />                                        
        <property name="createdDate" column="CREATED_DATE" type="date" />                                        
        <property name="updatedBy" column="UPDATED_BY" type="short" />                                     
        <property name="updatedDate" column="UPDATED_DATE" type="date" />       
		<property name="lastLogin" column="LAST_LOGIN" type="date" />          
		<property name="locked" column="LOCKED" type="short" />    
		<property name="noOfTries" column="NO_OF_TRIES" type="short" />    
	 	<set name="customFieldSet" lazy ="false" table ="PERSONNEL_CUSTOM_FIELD">
			<key column = "PERSONNEL_ID"/>
			<composite-element class ="org.mifos.application.personnel.util.valueobjects.PersonnelCustomField">
				<property name="fieldId" column="FIELD_ID" not-null="true"/>
				<property name="fieldValue" column="FIELD_VALUE" />
			</composite-element>
		</set>    
		<set name="personnelRolesSet"  cascade="all" inverse="true" 	lazy="false">
			  <key column="PERSONNEL_ID"   />
		  	<one-to-many   class="org.mifos.application.personnel.util.valueobjects.PersonnelRole" />
        </set>
    </class>
    
   <!-- This query obtains all the active loan officers under a particular office -->
    <query name="masterdata.loanofficers"><![CDATA[select new org.mifos.application.personnel.util.valueobjects.PersonnelMaster(personnel.personnelId,personnel.displayName,personnel.versionNo) from org.mifos.application.personnel.util.valueobjects.Personnel as personnel where ((personnel.personnelId=:userId and :userLevelId=:levelId) or (:userLevelId!=:levelId and personnel.level.levelId = :levelId)) and personnel.office.officeId =:officeId and personnel.personnelStatus =:statusId]]></query>
    <query name="masterdata.formedByLoanOfficers"><![CDATA[select new org.mifos.application.personnel.util.valueobjects.PersonnelMaster(personnel.personnelId,personnel.displayName,personnel.versionNo) from org.mifos.application.personnel.util.valueobjects.Personnel as personnel where personnel.level.levelId = :levelId and personnel.office.officeId =:officeId and personnel.personnelStatus =:statusId]]></query>
    <query name="getActivePersonnel"><![CDATA[select count(*)  from org.mifos.application.personnel.util.valueobjects.Personnel as personnel where  personnel.office.officeId =:officeId and personnel.personnelStatus =:statusId]]></query>
    <query name="getPersonnelBySystemId"><![CDATA[from org.mifos.application.personnel.util.valueobjects.Personnel personnel where personnel.globalPersonnelNum =:systemId]]></query>
    <query name="getMaxPersonnelId"><![CDATA[select max(personnel.personnelId) from Personnel personnel where personnel.office.officeId=:officeId]]></query>
	<query name="getPersonnelByUserName"><![CDATA[from Personnel as personnel where personnel.userName = :UserName]]></query>
	<query name="getPersonnelByGovtId"><![CDATA[from org.mifos.application.personnel.util.valueobjects.Personnel as personnel where personnel.personnelDetails.governmentIdNumber = :GOVT_ID]]></query>
	<query name="getPersonnelByNameAndDOB"><![CDATA[from org.mifos.application.personnel.util.valueobjects.Personnel as personnel where personnel.displayName = :userName and personnel.personnelDetails.dob =:dob]]></query>
	<query name="searchPersonnel"><![CDATA[select distinct personnel.office.officeId, personnel.office.officeName,personnel.personnelId,personnel.globalPersonnelNum,personnel.displayName from Personnel personnel where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID) and (personnel.office.searchId=:SEARCH_ID or personnel.office.searchId like :SEARCH_ALL) and (personnel.personnelDetails.firstName like :USER_NAME or personnel.personnelDetails.lastName like :USER_NAME ) order by personnel.office.officeName, personnel.personnelDetails.lastName]]></query>
	<query name="count_searchPersonnel"><![CDATA[select count(*) from Personnel personnel where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID) and (personnel.office.searchId=:SEARCH_ID or personnel.office.searchId like :SEARCH_ALL) and (personnel.personnelDetails.firstName like :USER_NAME or personnel.personnelDetails.lastName like :USER_NAME ) order by personnel.office.officeName, personnel.personnelDetails.lastName]]></query>
</hibernate-mapping>
