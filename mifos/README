### Contents ### 

* Getting started on the project 
* Mifos Build and Install
* Developer Notes 
* Automation Scripts Info

------------------------------
Getting Started on the project 
------------------------------
This is the README file for Mifos, the universal Open Source platform for Microfinance Institutions (MFIs). 


Getting Started with Mifos 
Mifos Build and Install (below) provides detailed instructions for building and installing the Mifos software. 


Developer Resources 
1. Code Repository 

Access to the code repository is via SVN at 
svn checkout https://mifos.dev.java.net/svn/mifos/trunk mifos --username guest 
password is blank for anonymous access. 

2. Mailing List 

Signup info and archives for the mifos-developer mailing list can be found at 

https://lists.sourceforge.net/lists/listinfo/mifos-developer 

3. Web Resources 

The Project Home Page can be found at 

http://mifos.dev.java.net 

The Project Wiki can be found at 

http://wiki.java.net/bin/view/Javatools/MIFOS 

Fisheye view of the code checked in with comments (RSS feed) is found at http://fisheye5.cenqua.com/changelog/mifos 

Issue tracking is https://mifos.dev.java.net/servlets/ProjectIssues 

4. Coding Standards (TBD) 

http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html 

5. Testing environment 
http://test.mifos.org:8080/mifos 
Login user is "mifos", password is "mifos" 


6. Project Contacts 

James Dailey (grameentechie AT sourceforge.net) 



------------------
Mifos Installation
------------------

Mifos is currently provided as a source distribution, via SVN or as
code snapshots, both available via java.net.

Overview
--------

Since this document is bundled with the source distribution, it is
assumed you already have the code. In addition to obtaining the code,
there are several steps to getting a working Mifos build on your local
machine:

1. Obtain the prerequisite software
2. Install the prerequisite software
3. Set up the environment
4. Create a Mifos server instance under JBoss
5. Install the mifos database
6. Build the software
7. Deploy Mifos
8. Start Mifos
9. Stopping Mifos
10. Securing Mifos

If you only want to deploy Mifos without doing the build, then these instructions will be overkill. 

Detailed Instructions
---------------------

1. Obtain the prerequisite software. You will need the following
   packages and minimum release levels:

       Java 2 Standard Edition SDK 5.0
       MySQL 4.1.16
       JBoss 4.0.3SP1 or tomcat or jetty
       Apache Ant 1.6.5
       Cobertura 1.7

If you are just deploying, Java, mySQL, and JBOSS are required. 

2. Install the prerequisite software.

   Follow the instructions provided with each package. 


Note: Try not to install the packages in non-standard locations, and on *nix and OS X, 
try to avoid install directories with spaces, for obvious reasons. 
/opt (on *nix and OS X) and C:\ (on Windows) are probably safe places.

See wiki page http://wiki.java.net/bin/view/Javatools/WindowsUsingCygwin for notes 
on getting up and running on windows with cygwin.  


JBoss and MySQL on Windows choose "Program Files" as the default location on Windows; 
this does not seem to cause problems. MySQL may require a custom installation 
in order to choose a non-standard location.


3. Set up the Environment.

   The following environment variables need to be defined to your
   shell, system environment, or IDE, so that Ant and JBoss will be
   able to locate the necessary resources at build and run time:

   
JAVA_HOME	The location of your JDK install
JBOSS_HOME	The location of your JBoss install (if using JBoss)
ANT_HOME	The location of your Ant install
COBERTURA_HOME	The location of your Cobertural install
PATH	Ensure that JAVA_HOME/bin, JBOSS_HOME/bin, and ANT_HOME/bin are in your path or visible to your IDE, if you choose to build and debug in something like Eclipse or NetBeans.


   It's often convenient to have these set from a script.

4. Create a Mifos server instance under JBoss

   We will use the 'default' configuration that comes with the JBoss
   distribution as our template. Make a copy of
   $JBOSS_HOME/server/default and its contents to
   $JBOSS_HOME/server/mifos. On *nix:

       cp -pr $JBOSS_HOME/server/default $JBOSS_HOME/server/mifos

   Be sure that a full copy of default is made, and not a symbolic
   link, as this can have undesirable consequences. On Windows,
   perform a copy operation of $JBOSS_HOME/server/default in Windows
   Explorer, renaming it to $JBOSS_HOME/server/mifos.  Also, you do need 
   a full copy of the default and not the "all" or "minimal". (case sensitive)

5. Install the mifos database

   Invoke the ant target 'build_db' to install the mifos
   database:

       ant build_db

   In some cases it might be necessary to perform some steps manually:

       Start a mysql session: 

           mysql -u root -p

       Execute the following sequence of commands in the mysql client:

           drop database if exists mifos
           create database mifos
           grant all privileges on mifos.* to mifos identified by 'mifos'  
           \. sql/mifosdbcreationscript.sql
           \. sql/mifosmasterdata.sql 
           
       However, you'll need to look at the build_db target in
       build.xml for the specific
       set of *.sql files needed to create the database (or upgrade
       a database for a previous version of MIFOS).  The above
       list of .sql files are not all the ones needed to create
       a database.

note: if you issue the above commands one by one, you need to issue this command: 
mySQL> use mifos ;  


Important Note:  If you are changing the passwords for the database access 
in your installation of mysql, you must currently change these in the 
build.properties, hibernate.properties files as well, prior to doing the build. 


6. Build the software

   Invoke the build:

       ant

   or invoke ant from your IDE. The default build target will produce
   a runnable Mifos war.  To see a list of useful build targets we've
   pre-defined, invoke ant with the -p switch.

  if ant fail at "build_test_db" task, verify that  "testdb.user" 
  and "testdb.pwd" is  correctly specified in "build.properties" 
  under "conf" folder of mifos as per your Mysql environment


If you want to skip running the junit tests, you can do so with:

ant clean copy_files compile war 


7. Deploy Mifos

   copy dist/mifos.war to $JBOSS_HOME/server/mifos/deploy

   For jetty, copy it to the webapps subdirectory of the directory
       where you unpacked jetty.
   
   The war file contains default database parameters like 
   username=root, password=mysql.
   If you want non-default settings, create a file deploymifosDB.properties
   
   Here is an example of what to put in that file:
	   
	hibernate.connection.driver_class=com.mysql.jdbc.Driver
	hibernate.connection.url=jdbc:mysql://localhost:3306/mifos?useUnicode=true&characterEncoding=UTF-8
	hibernate.connection.username=mifos
	hibernate.connection.password=mifos
	hibernate.dialect=org.hibernate.dialect.MySQLDialect
	hibernate.show_sql=false
	hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory
	hibernate.cache.provider_class=org.hibernate.cache.HashtableCacheProvider
	hibernate.connection.isolation=2 

   Copy the above contents into the file and change the relevant values. 

   For JBOSS, put the file into the server $JBOSS_HOME/server/mifos/conf folder.

   If the above mentioned file is not present the application 
   takes the default parameters 
   present in the war file for database connection.

8. Start Mifos

   Start JBoss, specifying 'mifos' as the server configuration. For
   example:

       $JBOSS_HOME/bin/run.sh -c mifos

   or, on Windows:
       %JBOSS_HOME%/bin/run.bat -c mifos
       
   Jetty example:
       cd <directory in which you installed jetty>
       java -jar start.jar

Now, time to try it out!  You should be able to go to:
      http://localhost:8080/mifos


9. Stopping Mifos

   Stop the JBoss/jetty/tomcat web server as described in the web
   server documentation, with CTRL-C at
   the console, or using the shutdown scripts provided with the web
   server distribution.

10. Securing Mifos

   The default install of JBoss exposes a JMX management
   console. Consult the JBoss documentation for steps on how to secure
   the management facility.





---------------
Developer Notes
---------------
 
There are various folders containing the java source files developed in 
Milestone 1 (M1) and being developed in Milestone 2(M2).
The 2 milestones are following 2 different approaches in development. 

Further, in Milestone 2 - hereafter M2 code - there are multiple iterations, 
typically every two weeks.  Also, in M2 there are jUnit tests that should 
cover all business objects.  The aim is to migrate to M2 style code throughout, 
so the developer is warned to check with the listserv before developing on 
top of soon to be deprecated code.  Generally speaking, code that calls 
upon handlers and makes calls to separate DAO (data action objects) 
or that lacks the ending BO on objects is M1 code.  

Again, M1 code is soon to be deprecated (note made May 2006).  


Here is how you can tell the difference between the design approaches:  

M1 – Taking the example of an account module - The business logic is 
present inside the business processors specific to the module like 
account(hence there is an account business processor), the attributes 
are present in value objects(account value object). To perform a 
specific functionality like create/update etc the value object 
is populated with the relevant information and passed to the relavant
method in the account business processor. The business processor 
performs business logic using these value objects and then invokes 
the corresponding Dao(account dao) passing this value object. 
The value object is saved using hibernate in the Dao.

 

M2 – Taking the example of an account module -  Accounts object contain 
the attributes relevant to them and also have the behavior on these 
attributes. It also contains the relavant associations to other account 
objects. To perform a specific functionality, the account object gets 
retrieved through hibernate and then the corresponding functionality 
is invoked on the account object. The account object performs the 
specific functionality and invokes the account persistence service 
passing itself to be saved in the database.

The various directories under which the code for M1 & M2 are present 

src/org/mifos/application 

- this directory contains the different application modules that are 
implemented in MIFOS, 
the source code for M1 and M2 are present under this directory under 
the respective modules. 

 

src/org/mifos/application/accounts

- this directory contains the folders where-in the source code(M1 & M2) 
for the accounts module is present. The accounts folder also contains 
savings, loan and financial transaction classes.

 

src/org/mifos/application/accounts/struts

- this directory contains the folders which contain code for struts 
related classes for the account module in M1 & M2

 

src/org/mifos/application/accounts/struts/action

- this folder contains the struts action classes for handling the account 
functionality. Struts action classes written in M1 
and M2 are present in this folder.  The action classes written in M1 
would have their class extending from MifosBaseAction. The action classes 
written in M2 would have their class extending from BaseAction.
 

src/org/mifos/application/accounts/struts/actionforms

- this folder contains the struts action forms for the account module written in M1 & M2.

 

src/org/mifos/application/accounts/business

- this folder contains the various account related objects being used in M2.

 

src/org/mifos/application/accounts/business/service

- this folder contains the account business service being used in M2 .

 

src/org/mifos/application/accounts/business/handlers

- this folder contains the account related business processors used in M1. 
The business processor contains the business 
logic to handle account functionality developed during M1. 

 

src/org/mifos/application/accounts/persistence

- this folder contains the persistent classes being used in M2. 
The persistent classes contain the hibernate code for 
retrival , saving of account objects being used in M2. 

 

src/org/mifos/application/accounts/persistence/service

- this folder contains the account persistent service methods being used in M2.

 

src/org/mifos/application/accounts/dao

- this folder contains the account related dao used in M1. 
The dao contain the hibernate code for retrival, saving of 
account objects developed during M1. 

 

src/org/mifos/application/accounts/util/valueobjects

- this folder contains the value objects(containing data) for accounts used in M1.

 

src/org/mifos/application/accounts/exceptions

- this folder contains the account exception classes being used in M1 & M2.

 

src/org/mifos/application/accounts/util/helpers

- this folder contains helper classes used for accounts in M1 & M2.

 

src/org/mifos/application/accounts/util/resources

- this folder contains resource file used for accounts in M1 & M2.

 

src/org/mifos/application/accounts/loan

- this directory has the same structure as defined for accounts,
this directory contains classes written in M1 and M2 to 
handle loan functionality 

 

src/org/mifos/application/accounts/savings

- this directory contains classes written in M2 to handle savings functionality 

 

src/org/mifos/application/accounts/financial

- this directory contains classes written in M2 to handle accounting functionality 

 

 

src/org/mifos/application/bulkentry

- this directory contains folders which have classes written in M2 to 
handle bulkentry functionality

 

src/org/mifos/application/collectionsheet

- this directory contains folders which have classes written in M2 to
handle collectionsheet functionality

 

 

Other modules defined under src/org/mifos/application contain folders 
having classes written in M1 and M2, the structure is 
the same as defined above for accounts module

 

src/org/mifos/framework/business

- this folder contains the framework classes written for M2

 

src/org/mifos/framework/business/service

- this folder contains the framework classes written for M2

 

src/org/mifos/framework/persistence

- this folder contains the framework classes written for M2

 

src/org/mifos/framework/business/handlers

- this folder contains the framework classes written for M1

 

src/org/mifos/framework/business/util/helpers

- this folder contains the framework classes written for M1

 

src/org/mifos/framework/dao

- this folder contains the framework classes written for M1

 

src/org/mifos/framework/struts

- this folder contains the framework classes written for M1 & M2

 

src/org/mifos/framework/exceptions

- this folder contains the framework classes written for M1 & M2

 

src/org/mifos/framework/hibernate

- this folder contains the framework classes written for M1 & M2

 

src/org/mifos/framework/security

- this folder contains the framework classes written for M1 & M2

 

src/org/mifos/framework/components

- this folder contains the component classes written for M1 & M2


rmp
- this folder contains the reporting mini portal source written for Mifos Reporting


The test directory under root contains the unit test casses written in M2, 
it follows the directory structure like src.

--------------------------
Automation Scripts Info
--------------------------

1. Prerequisites to run Automation scripts

Automation scripts require WATIR (web application testing in ruby) to be installed .You will need the 
following versions of software  to run the scripts
Ruby 1.8.2
Watir 1.4.1

Note: First install ruby followed by watir
