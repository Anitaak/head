// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.clientstatefactloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: ClientStateFactLoader Purpose: Loads the client state fact<br>
 * Description: Reads and loads the client state facts in client_fact table.
 * <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class ClientStateFactLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String OLTP_DB_HOST;
	private static String OLTP_DB_PORT;
	private static String OLTP_DB_SCHEMA;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_PASSWORD;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_SCHEMA;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static final String jobName = "ClientStateFactLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	private static final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private class TalendException extends Exception {
		private Exception e = null;
		private ClientStateFactLoader c = null;
		private String currentComponent = null;

		private TalendException(ClientStateFactLoader c, Exception e,
				String errorComponent) {
			this.currentComponent = errorComponent;
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlCommit_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
		tMysqlCommit_2_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tMysqlInput_3_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tMap_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tMysqlOutput_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tMysqlInput_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMap_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlConnection_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
		tMysqlConnection_2_onSubJobError(exception);
	}

	public void tMysqlInput_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tMysqlInput_4_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		tMysqlInput_4_onSubJobError(exception);
	}

	public void tAdvancedHash_row2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tAdvancedHash_row4_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		tMysqlInput_4_onSubJobError(exception);
	}

	public void tMysqlCommit_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_3_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_4_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_2Process() throws TalendException {
		String currentComponent = "";
		try {
			/**
			 * [tMysqlCommit_2 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_2", false);
			start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_2";

			/**
			 * [tMysqlCommit_2 begin ] stop
			 */
			/**
			 * [tMysqlCommit_2 main ] start
			 */

			currentComponent = "tMysqlCommit_2";

			java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");
			if (conn_tMysqlCommit_2 != null && !conn_tMysqlCommit_2.isClosed()) {
				conn_tMysqlCommit_2.commit();
				conn_tMysqlCommit_2.close();
			}

			/**
			 * [tMysqlCommit_2 main ] stop
			 */
			/**
			 * [tMysqlCommit_2 end ] start
			 */

			currentComponent = "tMysqlCommit_2";

			ok_Hash.put("tMysqlCommit_2", true);
			end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + OLTP_DB_HOST
					+ ":" + OLTP_DB_PORT + "/" + OLTP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = OLTP_DB_USER;

			String password_tMysqlConnection_1 = OLTP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tMysqlInput_3Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class client_fact_Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int client_id;

		Short status_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.client_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final client_fact_Struct other = (client_fact_Struct) obj;

			if (this.client_id != other.client_id)
				return false;

			return true;
		}

	}

	private class row3Struct {

		String GLOBAL_CUST_NUM;

		Short STATUS_ID;

	}

	private class after_tMysqlInput_3Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_CUST_NUM;

		Short STATUS_ID;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_CUST_NUM == null) ? 0
								: this.GLOBAL_CUST_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_3Struct other = (after_tMysqlInput_3Struct) obj;

			if (this.GLOBAL_CUST_NUM == null) {
				if (other.GLOBAL_CUST_NUM != null)
					return false;
			} else if (!this.GLOBAL_CUST_NUM.equals(other.GLOBAL_CUST_NUM))
				return false;

			return true;
		}

	}

	public void tMysqlInput_3Process() throws TalendException {
		String currentComponent = "";
		try {
			tMysqlInput_4Process();

			row3Struct row3 = new row3Struct();
			client_fact_Struct client_fact_ = new client_fact_Struct();

			/**
			 * [tMysqlOutput_2 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_2", false);
			start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_2";

			int keyCount_tMysqlOutput_2 = 1;
			if (keyCount_tMysqlOutput_2 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_2 = 0;
			int nb_line_update_tMysqlOutput_2 = 0;
			int nb_line_inserted_tMysqlOutput_2 = 0;
			int nb_line_deleted_tMysqlOutput_2 = 0;

			int deletedCount_tMysqlOutput_2 = 0;
			int updatedCount_tMysqlOutput_2 = 0;
			int insertedCount_tMysqlOutput_2 = 0;

			String tableName_tMysqlOutput_2 = "client_fact";
			boolean whetherReject_tMysqlOutput_2 = false;

			java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
					.getTime();
			calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
					.getTime();
			long date_tMysqlOutput_2;

			java.sql.Connection conn_tMysqlOutput_2 = null;
			conn_tMysqlOutput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_2 = conn_tMysqlOutput_2
					.getMetaData();
			java.sql.ResultSet rsTable_tMysqlOutput_2 = dbMetaData_tMysqlOutput_2
					.getTables(null, null, null, new String[] { "TABLE" });
			boolean whetherExist_tMysqlOutput_2 = false;
			while (rsTable_tMysqlOutput_2.next()) {
				String table_tMysqlOutput_2 = rsTable_tMysqlOutput_2
						.getString("TABLE_NAME");
				if (table_tMysqlOutput_2.equalsIgnoreCase("client_fact")) {
					whetherExist_tMysqlOutput_2 = true;
					break;
				}
			}
			if (!whetherExist_tMysqlOutput_2) {
				java.sql.Statement stmtCreate_tMysqlOutput_2 = conn_tMysqlOutput_2
						.createStatement();
				stmtCreate_tMysqlOutput_2
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutput_2
								+ "`(`client_id` INT(0)  not null,`status_id` SMALLINT(0)  ,primary key(`client_id`))");
			}
			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_2 = conn_tMysqlOutput_2
					.prepareStatement("UPDATE `" + "client_fact"
							+ "` SET `status_id` = ? WHERE `client_id` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_2 = conn_tMysqlOutput_2
					.prepareStatement("INSERT INTO `" + "client_fact"
							+ "` (`client_id`,`status_id`) VALUES (?,?)");

			/**
			 * [tMysqlOutput_2 begin ] stop
			 */

			/**
			 * [tMap_2 begin ] start
			 */

			ok_Hash.put("tMap_2", false);
			start_Hash.put("tMap_2", System.currentTimeMillis());
			currentComponent = "tMap_2";

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.commons.AdvancedLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.commons.AdvancedLookup<row4Struct>) globalMap
					.get("tHash_Lookup_row4");
			row4Struct row4HashKey = new row4Struct();
			row4Struct row4Default = new row4Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			class Var__tMap_2__Struct {
			}
			Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
			// ###############################

			// ###############################
			// # Outputs initialization
			client_fact_Struct client_fact__tmp = new client_fact_Struct();
			// ###############################

			/**
			 * [tMap_2 begin ] stop
			 */

			/**
			 * [tMysqlInput_3 begin ] start
			 */

			ok_Hash.put("tMysqlInput_3", false);
			start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
			currentComponent = "tMysqlInput_3";

			int nb_line_tMysqlInput_3 = 0;
			java.sql.Connection conn_tMysqlInput_3 = null;
			conn_tMysqlInput_3 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_3 = stmt_tMysqlInput_3
					.executeQuery("SELECT customer.GLOBAL_CUST_NUM, customer.STATUS_ID  FROM customer where customer.customer_level_id = 1");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
					.getMetaData();
			int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
					.getTime();

			globalMap
					.put(
							"tMysqlInput_3_QUERY",
							"SELECT customer.GLOBAL_CUST_NUM, customer.STATUS_ID  FROM customer where customer.customer_level_id = 1");

			while (rs_tMysqlInput_3.next()) {
				nb_line_tMysqlInput_3++;

				if (colQtyInRs_tMysqlInput_3 < 1) {

					row3.GLOBAL_CUST_NUM = null;

				} else {

					if (rs_tMysqlInput_3.getObject(1) != null) {
						row3.GLOBAL_CUST_NUM = rs_tMysqlInput_3.getString(1);
					} else {

						row3.GLOBAL_CUST_NUM = null;

					}

				}

				if (colQtyInRs_tMysqlInput_3 < 2) {

					row3.STATUS_ID = null;

				} else {

					if (rs_tMysqlInput_3.getObject(2) != null) {
						row3.STATUS_ID = rs_tMysqlInput_3.getShort(2);
					} else {

						row3.STATUS_ID = null;

					}

				}

				/**
				 * [tMysqlInput_3 begin ] stop
				 */
				/**
				 * [tMysqlInput_3 main ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 main ] stop
				 */
				/**
				 * [tMap_2 main ] start
				 */

				currentComponent = "tMap_2";

				boolean rejectedInnerJoin_tMap_2 = false;

				// ###############################
				// # Input tables (lookups)

				row4HashKey.global_cust_num = row3.GLOBAL_CUST_NUM;

				row4Struct row4ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_2) { // G 20
					row4HashKey.hashCodeDirty = true;
					tHash_Lookup_row4.get(row4HashKey);

					if (tHash_Lookup_row4.hasResult()) { // G 90

						row4ObjectFromLookup = (row4Struct) tHash_Lookup_row4
								.getResultObject();

					} // G 90
					else { // G 91

						rejectedInnerJoin_tMap_2 = true;

					} // G 91

				} // G 20

				if (tHash_Lookup_row4.getCount(row4HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.global_cust_num = '"
									+ row4HashKey.global_cust_num + "'");
				}

				row4Struct fromLookup_row4 = null;
				row4Struct row4 = row4Default;

				if (row4ObjectFromLookup != null) {

					fromLookup_row4 = row4ObjectFromLookup;
					row4 = fromLookup_row4;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					Var__tMap_2__Struct Var = Var__tMap_2;
					// ###############################

					// ###############################
					// # Output tables
					client_fact_ = null;

					if (!rejectedInnerJoin_tMap_2) {

						// # Output table : 'client_fact_'
						client_fact__tmp.client_id = row4.client_id;
						client_fact__tmp.status_id = row3.STATUS_ID;
						client_fact_ = client_fact__tmp;
					} // closing inner join bracket (2)
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_2 = false;

				/**
				 * [tMap_2 main ] stop
				 */
				// Start of branch "client_fact_"
				if (client_fact_ != null) {

					/**
					 * [tMysqlOutput_2 main ] start
					 */

					currentComponent = "tMysqlOutput_2";

					whetherReject_tMysqlOutput_2 = false;
					int updateFlag_tMysqlOutput_2 = 0;

					if (client_fact_.status_id == null) {
						pstmtUpdate_tMysqlOutput_2.setNull(1,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_2.setShort(1,
								client_fact_.status_id);

					}

					pstmtUpdate_tMysqlOutput_2
							.setInt(2, client_fact_.client_id);

					try {
						updateFlag_tMysqlOutput_2 = pstmtUpdate_tMysqlOutput_2
								.executeUpdate();
						updatedCount_tMysqlOutput_2 = updatedCount_tMysqlOutput_2
								+ updateFlag_tMysqlOutput_2;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_2 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_2 == 0) {

						pstmtInsert_tMysqlOutput_2.setInt(1,
								client_fact_.client_id);

						if (client_fact_.status_id == null) {
							pstmtInsert_tMysqlOutput_2.setNull(2,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_2.setShort(2,
									client_fact_.status_id);

						}

						try {
							insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
									+ pstmtInsert_tMysqlOutput_2
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_2 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_2++;
					if (!whetherReject_tMysqlOutput_2) {
					}
					/**
					 * [tMysqlOutput_2 main ] stop
					 */

				} // End of branch "client_fact_"

				/**
				 * [tMysqlInput_3 end ] start
				 */

				currentComponent = "tMysqlInput_3";

			}
			stmt_tMysqlInput_3.close();

			globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

			ok_Hash.put("tMysqlInput_3", true);
			end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

			/**
			 * [tMysqlInput_3 end ] stop
			 */
			/**
			 * [tMap_2 end ] start
			 */

			currentComponent = "tMap_2";

			// ###############################
			// # Lookup hashes releasing
			globalMap.remove("tHash_row4");
			// ###############################

			ok_Hash.put("tMap_2", true);
			end_Hash.put("tMap_2", System.currentTimeMillis());

			/**
			 * [tMap_2 end ] stop
			 */
			/**
			 * [tMysqlOutput_2 end ] start
			 */

			currentComponent = "tMysqlOutput_2";

			if (pstmtUpdate_tMysqlOutput_2 != null) {

				pstmtUpdate_tMysqlOutput_2.close();

			}
			if (pstmtInsert_tMysqlOutput_2 != null) {

				pstmtInsert_tMysqlOutput_2.close();

			}

			nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
					+ deletedCount_tMysqlOutput_2;
			nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
					+ updatedCount_tMysqlOutput_2;
			nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
					+ insertedCount_tMysqlOutput_2;

			globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
			globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_2);
			globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_2);
			globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_2);

			ok_Hash.put("tMysqlOutput_2", true);
			end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

			tMysqlInput_1Process();
			/**
			 * [tMysqlOutput_2 end ] stop
			 */

			tMysqlCommit_2Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class client_factStruct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int client_id;

		Short status_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.client_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final client_factStruct other = (client_factStruct) obj;

			if (this.client_id != other.client_id)
				return false;

			return true;
		}

	}

	private class row1Struct {

		Integer customer_id;

		String global_cust_num;

		Short status_id;

		Short flag_id;

	}

	private class after_tMysqlInput_1Struct {

		Integer customer_id;

		String global_cust_num;

		Short status_id;

		Short flag_id;

	}

	public void tMysqlInput_1Process() throws TalendException {
		String currentComponent = "";
		try {
			tMysqlInput_2Process();

			row1Struct row1 = new row1Struct();
			client_factStruct client_fact = new client_factStruct();

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int keyCount_tMysqlOutput_1 = 1;
			if (keyCount_tMysqlOutput_1 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "client_fact";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1
					.getMetaData();
			java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1
					.getTables(null, null, null, new String[] { "TABLE" });
			boolean whetherExist_tMysqlOutput_1 = false;
			while (rsTable_tMysqlOutput_1.next()) {
				String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1
						.getString("TABLE_NAME");
				if (table_tMysqlOutput_1.equalsIgnoreCase("client_fact")) {
					whetherExist_tMysqlOutput_1 = true;
					break;
				}
			}
			if (!whetherExist_tMysqlOutput_1) {
				java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();
				stmtCreate_tMysqlOutput_1
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutput_1
								+ "`(`client_id` INT(0)  not null,`status_id` SMALLINT(0)  ,primary key(`client_id`))");
			}
			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("UPDATE `" + "client_fact"
							+ "` SET `status_id` = ? WHERE `client_id` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `" + "client_fact"
							+ "` (`client_id`,`status_id`) VALUES (?,?)");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tMap_1 begin ] start
			 */

			ok_Hash.put("tMap_1", false);
			start_Hash.put("tMap_1", System.currentTimeMillis());
			currentComponent = "tMap_1";

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.commons.AdvancedLookup<row2Struct>) globalMap
					.get("tHash_Lookup_row2");
			row2Struct row2HashKey = new row2Struct();
			row2Struct row2Default = new row2Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			class Var__tMap_1__Struct {
			}
			Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
			// ###############################

			// ###############################
			// # Outputs initialization
			client_factStruct client_fact_tmp = new client_factStruct();
			// ###############################

			/**
			 * [tMap_1 begin ] stop
			 */

			/**
			 * [tMysqlInput_1 begin ] start
			 */

			ok_Hash.put("tMysqlInput_1", false);
			start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
			currentComponent = "tMysqlInput_1";

			int nb_line_tMysqlInput_1 = 0;
			java.sql.Connection conn_tMysqlInput_1 = null;
			conn_tMysqlInput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
					.executeQuery("select c.customer_id, c.global_cust_num, c.status_id, f.flag_id from customer c, customer_state s, customer_state_flag f, customer_flag_detail d where c.status_id = s.status_id and s.status_id = f.status_id and c.customer_id = d.customer_id and f.flag_id = d.flag_id;");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
					.getMetaData();
			int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
					.getTime();

			globalMap
					.put(
							"tMysqlInput_1_QUERY",
							"select c.customer_id, c.global_cust_num, c.status_id, f.flag_id from customer c, customer_state s, customer_state_flag f, customer_flag_detail d where c.status_id = s.status_id and s.status_id = f.status_id and c.customer_id = d.customer_id and f.flag_id = d.flag_id;");

			while (rs_tMysqlInput_1.next()) {
				nb_line_tMysqlInput_1++;

				if (colQtyInRs_tMysqlInput_1 < 1) {

					row1.customer_id = null;

				} else {

					if (rs_tMysqlInput_1.getObject(1) != null) {
						row1.customer_id = rs_tMysqlInput_1.getInt(1);
					} else {

						row1.customer_id = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 2) {

					row1.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(2) != null) {
						row1.global_cust_num = rs_tMysqlInput_1.getString(2);
					} else {

						row1.global_cust_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 3) {

					row1.status_id = null;

				} else {

					if (rs_tMysqlInput_1.getObject(3) != null) {
						row1.status_id = rs_tMysqlInput_1.getShort(3);
					} else {

						row1.status_id = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 4) {

					row1.flag_id = null;

				} else {

					if (rs_tMysqlInput_1.getObject(4) != null) {
						row1.flag_id = rs_tMysqlInput_1.getShort(4);
					} else {

						row1.flag_id = null;

					}

				}

				/**
				 * [tMysqlInput_1 begin ] stop
				 */
				/**
				 * [tMysqlInput_1 main ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 main ] stop
				 */
				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				boolean rejectedInnerJoin_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)

				row2HashKey.global_cust_num = row1.global_cust_num;

				row2Struct row2ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row2HashKey.hashCodeDirty = true;
					tHash_Lookup_row2.get(row2HashKey);

					if (tHash_Lookup_row2.hasResult()) { // G 90

						row2ObjectFromLookup = (row2Struct) tHash_Lookup_row2
								.getResultObject();

					} // G 90
					else { // G 91

						rejectedInnerJoin_tMap_1 = true;

					} // G 91

				} // G 20

				if (tHash_Lookup_row2.getCount(row2HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.global_cust_num = '"
									+ row2HashKey.global_cust_num + "'");
				}

				row2Struct fromLookup_row2 = null;
				row2Struct row2 = row2Default;

				if (row2ObjectFromLookup != null) {

					fromLookup_row2 = row2ObjectFromLookup;
					row2 = fromLookup_row2;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					Var__tMap_1__Struct Var = Var__tMap_1;
					// ###############################

					// ###############################
					// # Output tables
					client_fact = null;

					if (!rejectedInnerJoin_tMap_1) {

						// # Output table : 'client_fact'
						client_fact_tmp.client_id = row2.client_id;
						client_fact_tmp.status_id = new Integer(
								(row1.status_id == 5 && row1.flag_id == 1) ? 5
										: (row1.status_id == 5 && row1.flag_id == 2) ? 8
												: (row1.status_id == 5 && row1.flag_id == 3) ? 6
														: (row1.status_id == 5 && row1.flag_id == 4) ? 7
																: (row1.status_id == 5 && row1.flag_id == 5) ? 9
																		: (row1.status_id == 6 && row1.flag_id == 6) ? 10
																				: (row1.status_id == 6 && row1.flag_id == 7) ? 12
																						: (row1.status_id == 6 && row1.flag_id == 8) ? 11
																								: (row1.status_id == 6 && row1.flag_id == 9) ? 13
																										: (row1.status_id == 6 && row1.flag_id == 10) ? 14
																												: (row1.status_id == 11 && row1.flag_id == 11) ? 5
																														: (row1.status_id == 11 && row1.flag_id == 12) ? 8
																																: (row1.status_id == 11 && row1.flag_id == 13) ? 6
																																		: (row1.status_id == 11 && row1.flag_id == 14) ? 7
																																				: (row1.status_id == 11 && row1.flag_id == 15) ? 9
																																						: (row1.status_id == 12 && row1.flag_id == 16) ? 10
																																								: (row1.status_id == 12 && row1.flag_id == 17) ? 12
																																										: (row1.status_id == 12 && row1.flag_id == 18) ? 11
																																												: (row1.status_id == 12 && row1.flag_id == 19) ? 13
																																														: (row1.status_id == 12 && row1.flag_id == 20) ? 14
																																																: row1.status_id)
								.shortValue();
						client_fact = client_fact_tmp;
					} // closing inner join bracket (2)
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				/**
				 * [tMap_1 main ] stop
				 */
				// Start of branch "client_fact"
				if (client_fact != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;
					int updateFlag_tMysqlOutput_1 = 0;

					if (client_fact.status_id == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(1,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(1,
								client_fact.status_id);

					}

					pstmtUpdate_tMysqlOutput_1.setInt(2, client_fact.client_id);

					try {
						updateFlag_tMysqlOutput_1 = pstmtUpdate_tMysqlOutput_1
								.executeUpdate();
						updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
								+ updateFlag_tMysqlOutput_1;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_1 == 0) {

						pstmtInsert_tMysqlOutput_1.setInt(1,
								client_fact.client_id);

						if (client_fact.status_id == null) {
							pstmtInsert_tMysqlOutput_1.setNull(2,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(2,
									client_fact.status_id);

						}

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "client_fact"

				/**
				 * [tMysqlInput_1 end ] start
				 */

				currentComponent = "tMysqlInput_1";

			}
			stmt_tMysqlInput_1.close();

			globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

			ok_Hash.put("tMysqlInput_1", true);
			end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

			/**
			 * [tMysqlInput_1 end ] stop
			 */
			/**
			 * [tMap_1 end ] start
			 */

			currentComponent = "tMap_1";

			// ###############################
			// # Lookup hashes releasing
			globalMap.remove("tHash_row2");
			// ###############################

			ok_Hash.put("tMap_1", true);
			end_Hash.put("tMap_1", System.currentTimeMillis());

			/**
			 * [tMap_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmtUpdate_tMysqlOutput_1 != null) {

				pstmtUpdate_tMysqlOutput_1.close();

			}
			if (pstmtInsert_tMysqlOutput_1 != null) {

				pstmtInsert_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			/**
			 * [tMysqlOutput_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_2Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_2 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_2", false);
			start_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_2";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_2 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_2 = OLAP_DB_USER;

			String password_tMysqlConnection_2 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_2 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_2,
							userName_tMysqlConnection_2,
							password_tMysqlConnection_2);

			conn_tMysqlConnection_2.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_2",
					conn_tMysqlConnection_2);

			/**
			 * [tMysqlConnection_2 begin ] stop
			 */
			/**
			 * [tMysqlConnection_2 main ] start
			 */

			currentComponent = "tMysqlConnection_2";

			/**
			 * [tMysqlConnection_2 main ] stop
			 */

			/**
			 * [tMysqlConnection_2 end ] start
			 */

			currentComponent = "tMysqlConnection_2";

			ok_Hash.put("tMysqlConnection_2", true);
			end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_2 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row2Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int client_id;

		String global_cust_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_cust_num == null) ? 0
								: this.global_cust_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.global_cust_num == null) {
				if (other.global_cust_num != null)
					return false;
			} else if (!this.global_cust_num.equals(other.global_cust_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_2Process() throws TalendException {
		String currentComponent = "";
		try {

			row2Struct row2 = new row2Struct();

			/**
			 * [tAdvancedHash_row2 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row2", false);
			start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row2";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.commons.AdvancedLookup
					.<row2Struct> getLookup(matchingModeEnum_row2);
			globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

			/**
			 * [tAdvancedHash_row2 begin ] stop
			 */

			/**
			 * [tMysqlInput_2 begin ] start
			 */

			ok_Hash.put("tMysqlInput_2", false);
			start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
			currentComponent = "tMysqlInput_2";

			int nb_line_tMysqlInput_2 = 0;
			java.sql.Connection conn_tMysqlInput_2 = null;
			conn_tMysqlInput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
					.executeQuery("select client_id, global_cust_num from client_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
					.getMetaData();
			int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
					.getTime();

			globalMap.put("tMysqlInput_2_QUERY",
					"select client_id, global_cust_num from client_dim");

			while (rs_tMysqlInput_2.next()) {
				nb_line_tMysqlInput_2++;

				if (colQtyInRs_tMysqlInput_2 < 1) {

					row2.client_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(1) != null) {
						row2.client_id = rs_tMysqlInput_2.getInt(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 2) {

					row2.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_2.getObject(2) != null) {
						row2.global_cust_num = rs_tMysqlInput_2.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				/**
				 * [tMysqlInput_2 begin ] stop
				 */
				/**
				 * [tMysqlInput_2 main ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.client_id = row2.client_id;
				row2_HashRow.global_cust_num = row2.global_cust_num;
				tHash_Lookup_row2.put(row2_HashRow);

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tMysqlInput_2 end ] start
				 */

				currentComponent = "tMysqlInput_2";

			}
			stmt_tMysqlInput_2.close();

			globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

			ok_Hash.put("tMysqlInput_2", true);
			end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

			/**
			 * [tMysqlInput_2 end ] stop
			 */

			/**
			 * [tAdvancedHash_row2 end ] start
			 */

			currentComponent = "tAdvancedHash_row2";

			ok_Hash.put("tAdvancedHash_row2", true);
			end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row4Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int client_id;

		String global_cust_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_cust_num == null) ? 0
								: this.global_cust_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.global_cust_num == null) {
				if (other.global_cust_num != null)
					return false;
			} else if (!this.global_cust_num.equals(other.global_cust_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_4Process() throws TalendException {
		String currentComponent = "";
		try {

			row4Struct row4 = new row4Struct();

			/**
			 * [tAdvancedHash_row4 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row4", false);
			start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row4";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.commons.AdvancedLookup
					.<row4Struct> getLookup(matchingModeEnum_row4);
			globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

			/**
			 * [tAdvancedHash_row4 begin ] stop
			 */

			/**
			 * [tMysqlInput_4 begin ] start
			 */

			ok_Hash.put("tMysqlInput_4", false);
			start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
			currentComponent = "tMysqlInput_4";

			int nb_line_tMysqlInput_4 = 0;
			java.sql.Connection conn_tMysqlInput_4 = null;
			conn_tMysqlInput_4 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_4 = stmt_tMysqlInput_4
					.executeQuery("select client_id, global_cust_num from client_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4
					.getMetaData();
			int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4
					.getTime();

			globalMap.put("tMysqlInput_4_QUERY",
					"select client_id, global_cust_num from client_dim");

			while (rs_tMysqlInput_4.next()) {
				nb_line_tMysqlInput_4++;

				if (colQtyInRs_tMysqlInput_4 < 1) {

					row4.client_id = 0;

				} else {

					if (rs_tMysqlInput_4.getObject(1) != null) {
						row4.client_id = rs_tMysqlInput_4.getInt(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_4 < 2) {

					row4.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_4.getObject(2) != null) {
						row4.global_cust_num = rs_tMysqlInput_4.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				/**
				 * [tMysqlInput_4 begin ] stop
				 */
				/**
				 * [tMysqlInput_4 main ] start
				 */

				currentComponent = "tMysqlInput_4";

				/**
				 * [tMysqlInput_4 main ] stop
				 */

				/**
				 * [tAdvancedHash_row4 main ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				row4Struct row4_HashRow = new row4Struct();

				row4_HashRow.client_id = row4.client_id;
				row4_HashRow.global_cust_num = row4.global_cust_num;
				tHash_Lookup_row4.put(row4_HashRow);

				/**
				 * [tAdvancedHash_row4 main ] stop
				 */

				/**
				 * [tMysqlInput_4 end ] start
				 */

				currentComponent = "tMysqlInput_4";

			}
			stmt_tMysqlInput_4.close();

			globalMap.put("tMysqlInput_4_NB_LINE", nb_line_tMysqlInput_4);

			ok_Hash.put("tMysqlInput_4", true);
			end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

			/**
			 * [tMysqlInput_4 end ] stop
			 */

			/**
			 * [tAdvancedHash_row4 end ] start
			 */

			currentComponent = "tAdvancedHash_row4";

			ok_Hash.put("tAdvancedHash_row4", true);
			end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row4 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;
	private static ThreadLocal threadLocal = new ThreadLocal();
	private static SyncInt runningThreadCount = new SyncInt();

	private static class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = ClientStateFactLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/clientstatefactloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = ClientStateFactLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/clientstatefactloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			OLTP_DB_HOST = (String) context.getProperty("OLTP_DB_HOST");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_DB_SCHEMA = (String) context.getProperty("OLTP_DB_SCHEMA");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_SCHEMA = (String) context.getProperty("OLAP_DB_SCHEMA");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final ClientStateFactLoader ClientStateFactLoaderClass = new ClientStateFactLoader();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put(errorCode, null);
				threadRunResultMap.put(status, "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put(errorCode, null);
					ClientStateFactLoaderClass.tMysqlConnection_2Process();
					((java.util.Map) threadLocal.get()).put(status, "end");
				} catch (TalendException e_tMysqlConnection_2) {
					((java.util.Map) threadLocal.get()).put(status, "failure");
					e_tMysqlConnection_2.printStackTrace();

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get(errorCode));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get(status));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				} else if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		while (ClientStateFactLoaderClass.runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		threadLocal = new ThreadLocal();
		runningThreadCount = new SyncInt();
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 59436 characters generated by Talend OpenStudio on the March 20, 2008 5:58:37
 * PM GMT
 ******************************************************************************/
