// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.dailytimedimensionloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: DailyTimeDimensionLoader Purpose: Loads the time dimension data for a
 * day.<br>
 * Description: Loads the time dimensions data for a day. Takes the system time
 * and inserts a record for sytem date. <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class DailyTimeDimensionLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String FILENAME;
	private static String HOST;
	private static String PORT;
	private static String DBNAME;
	private static String PASSWORD;
	private static String USER;
	private static String OLTP_DB_HOST;
	private static String OLTP_DB_PORT;
	private static String OLTP_DB_SCHEMA;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_PASSWORD;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_SCHEMA;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static final String jobName = "DailyTimeDimensionLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private class TalendException extends Exception {
		private Exception e = null;
		private DailyTimeDimensionLoader c = null;

		private TalendException(DailyTimeDimensionLoader c, Exception e) {
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());
		tJava_1_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tJava_2_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());
		tJava_2_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tJava_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_1Process() throws TalendException {
		try {

			/**
			 * [tJava_1 begin ] start
			 */

			ok_Hash.put("tJava_1", false);
			start_Hash.put("tJava_1", System.currentTimeMillis());
			currentComponent = "tJava_1";

			java.sql.Connection conn = (java.sql.Connection) (globalMap
					.get("conn_tMysqlConnection_1"));

			java.util.Calendar startDate = java.util.Calendar.getInstance();

			java.sql.Statement stmt = conn.createStatement();
			java.sql.ResultSet rs = stmt
					.executeQuery("select time_id from time_dim where date like '"
							+ new java.sql.Date(startDate.getTimeInMillis())
							+ "'");

			boolean exists = rs.getFetchSize() > 0 ? true : false;

			if (!exists) {
				String statementString = "insert into time_dim ("
						+ "date ,day_num_in_week, week_num_in_year,"
						+ "day_of_week, day_num_in_month, month, "
						+ "month_num_in_year, quarter_num_year, quarter_name, year )"
						+ "values (?,?,?,?,?,?,?,?,?,?);";

				java.sql.PreparedStatement statement;
				statement = conn.prepareStatement(statementString);

				// set the date
				statement.setDate(1, new java.sql.Date(startDate
						.getTimeInMillis()));
				// set the day of the week: 1,2 ... 7
				statement.setInt(2, startDate
						.get(java.util.Calendar.DAY_OF_WEEK));
				// set the week of the year: 1 - 52
				statement.setInt(3, startDate
						.get(java.util.Calendar.WEEK_OF_YEAR));

				// set the day of the week: SUN-SAT
				String dayWeekName = null;
				switch (startDate.get(java.util.Calendar.DAY_OF_WEEK)) {
				case java.util.Calendar.SUNDAY:
					dayWeekName = "SUNDAY";
					break;
				case java.util.Calendar.MONDAY:
					dayWeekName = "MONDAY";
					break;
				case java.util.Calendar.TUESDAY:
					dayWeekName = "TUESDAY";
					break;
				case java.util.Calendar.WEDNESDAY:
					dayWeekName = "WEDNESDAY";
					break;
				case java.util.Calendar.THURSDAY:
					dayWeekName = "THURSDAY";
					break;
				case java.util.Calendar.FRIDAY:
					dayWeekName = "FRIDAY";
					break;
				case java.util.Calendar.SATURDAY:
					dayWeekName = "SATURDAY";
					break;
				}
				statement.setString(4, dayWeekName);

				// set the day of the month: 1-31
				statement.setInt(5, startDate
						.get(java.util.Calendar.DAY_OF_MONTH));

				// set the month: JAN-DEC
				String dayMonthName = null;
				switch (startDate.get(java.util.Calendar.MONTH)) {
				case java.util.Calendar.JANUARY:
					dayMonthName = "JANUARY";
					break;
				case java.util.Calendar.FEBRUARY:
					dayMonthName = "FEBRUARY";
					break;
				case java.util.Calendar.MARCH:
					dayMonthName = "MARCH";
					break;
				case java.util.Calendar.APRIL:
					dayMonthName = "APRIL";
					break;
				case java.util.Calendar.MAY:
					dayMonthName = "MAY";
					break;
				case java.util.Calendar.JUNE:
					dayMonthName = "JUNE";
					break;
				case java.util.Calendar.JULY:
					dayMonthName = "JULY";
					break;
				case java.util.Calendar.AUGUST:
					dayMonthName = "AUGUST";
					break;
				case java.util.Calendar.SEPTEMBER:
					dayMonthName = "SEPTEMBER";
					break;
				case java.util.Calendar.OCTOBER:
					dayMonthName = "OCTOBER";
					break;
				case java.util.Calendar.NOVEMBER:
					dayMonthName = "NOVEMBER";
					break;
				case java.util.Calendar.DECEMBER:
					dayMonthName = "DECEMBER";
					break;
				}
				statement.setString(6, dayMonthName);
				// set the month: 1-12
				statement
						.setInt(7, startDate.get(java.util.Calendar.MONTH) + 1);

				// set the quarter 1-4
				int quarter = (startDate.get(java.util.Calendar.MONTH) / 3) + 1;
				statement.setInt(8, quarter);
				// set the quarter FIRST-FOURTH
				String quarterName = null;
				switch (quarter) {
				case 1:
					quarterName = "FIRST";
					break;
				case 2:
					quarterName = "SECOND";
					break;
				case 3:
					quarterName = "THIRD";
					break;
				case 4:
					quarterName = "FOURTH";
					break;
				}
				statement.setString(9, quarterName);
				// set the year
				statement.setInt(10, startDate.get(java.util.Calendar.YEAR));
				statement.execute();
			}

			/**
			 * [tJava_1 begin ] stop
			 */
			/**
			 * [tJava_1 main ] start
			 */

			currentComponent = "tJava_1";

			/**
			 * [tJava_1 main ] stop
			 */

			/**
			 * [tJava_1 end ] start
			 */

			currentComponent = "tJava_1";

			ok_Hash.put("tJava_1", true);
			end_Hash.put("tJava_1", System.currentTimeMillis());

			/**
			 * [tJava_1 end ] stop
			 */

			tMysqlCommit_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
				conn_tMysqlCommit_1.close();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tJava_2Process() throws TalendException {
		try {

			/**
			 * [tJava_2 begin ] start
			 */

			ok_Hash.put("tJava_2", false);
			start_Hash.put("tJava_2", System.currentTimeMillis());
			currentComponent = "tJava_2";

			java.util.Properties p = new java.util.Properties();

			java.io.InputStream inStream = this.getClass().getClassLoader()
					.getResourceAsStream("hibernate.properties");

			p.load(inStream);
			OLTP_DB_PASSWORD = (String) p.get("OLTP_DB_PASSWORD");
			OLTP_DB_USER = (String) p.get("OLTP_DB_USER");
			OLTP_DB_SCHEMA = (String) p.get("OLTP_DB_NAME");
			OLTP_DB_PORT = (String) p.get("OLTP_DB_PORT");
			OLTP_DB_HOST = (String) p.get("OLTP_HOST_NAME");
			OLAP_DB_HOST = (String) p.get("OLAP_DB_HOST");
			OLAP_DB_PORT = (String) p.get("OLAP_DB_PORT");
			OLAP_DB_SCHEMA = (String) p.get("OLAP_DB_NAME");
			OLAP_DB_USER = (String) p.get("OLAP_DB_USER");
			OLAP_DB_PASSWORD = (String) p.get("OLAP_DB_PASSWORD");

			/**
			 * [tJava_2 begin ] stop
			 */
			/**
			 * [tJava_2 main ] start
			 */

			currentComponent = "tJava_2";

			/**
			 * [tJava_2 main ] stop
			 */

			/**
			 * [tJava_2 end ] start
			 */

			currentComponent = "tJava_2";

			ok_Hash.put("tJava_2", true);
			end_Hash.put("tJava_2", System.currentTimeMillis());

			/**
			 * [tJava_2 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = OLAP_DB_USER;

			String password_tMysqlConnection_1 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tJava_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = DailyTimeDimensionLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/dailytimedimensionloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = DailyTimeDimensionLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/dailytimedimensionloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			FILENAME = (String) context.getProperty("FILENAME");

			HOST = (String) context.getProperty("HOST");

			PORT = (String) context.getProperty("PORT");

			DBNAME = (String) context.getProperty("DBNAME");

			PASSWORD = (String) context.getProperty("PASSWORD");

			USER = (String) context.getProperty("USER");

			OLTP_DB_HOST = (String) context.getProperty("OLTP_DB_HOST");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_DB_SCHEMA = (String) context.getProperty("OLTP_DB_SCHEMA");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_SCHEMA = (String) context.getProperty("OLAP_DB_SCHEMA");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final DailyTimeDimensionLoader DailyTimeDimensionLoaderClass = new DailyTimeDimensionLoader();
		try {
			errorCode = null;
			DailyTimeDimensionLoaderClass.tJava_2Process();
			status = "end";
		} catch (TalendException e_tJava_2) {
			status = "failure";
			e_tJava_2.printStackTrace();

		} finally {
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		currentComponent = "";
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 19331 characters generated by Talend OpenStudio on the April 14, 2008
 * 10:32:19 AM BST
 ******************************************************************************/
