// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.timedimension;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: TimeDimension Purpose: <br>
 * Description: <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class TimeDimension {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String FILENAME;
	private static String HOST;
	private static String PORT;
	private static String DBNAME;
	private static String PASSWORD;
	private static String USER;
	private static final String jobName = "TimeDimension";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private class TalendException extends Exception {
		private Exception e = null;
		private TimeDimension c = null;

		private TalendException(TimeDimension c, Exception e) {
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		tFileInputDelimited_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tFileInputDelimited_1_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	private class row1Struct {

		java.util.Date date;

		short day_num_in_week;

		short week_num_in_year;

		short week_num_overall;

		String day_of_week;

		short day_num_in_month;

		short day_num_overall;

		String month;

		short month_num_in_year;

		short month_num_overall;

		short quarter_num_year;

		String quarter_name;

		int year;

		boolean week_day_flag;

		boolean last_day_in_month_flag;

		boolean holiday_flag;

		String holiday_name;

	}

	public void tFileInputDelimited_1Process() throws TalendException {
		try {

			row1Struct row1 = new row1Struct();

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "time_dim";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1
					.getMetaData();
			java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1
					.getTables(null, null, null, new String[] { "TABLE" });
			boolean whetherExist_tMysqlOutput_1 = false;
			while (rsTable_tMysqlOutput_1.next()) {
				String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1
						.getString("TABLE_NAME");
				if (table_tMysqlOutput_1.equalsIgnoreCase("time_dim")) {
					whetherExist_tMysqlOutput_1 = true;
					break;
				}
			}
			if (!whetherExist_tMysqlOutput_1) {
				java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();
				stmtCreate_tMysqlOutput_1
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutput_1
								+ "`(`date` DATE not null,`day_num_in_week` SMALLINT(2)  not null,`week_num_in_year` SMALLINT(2)  not null,`week_num_overall` SMALLINT(4)  not null,`day_of_week` VARCHAR(50)  not null,`day_num_in_month` SMALLINT(2)  not null,`day_num_overall` SMALLINT(4)  not null,`month` VARCHAR(50)  not null,`month_num_in_year` SMALLINT(4)  not null,`month_num_overall` SMALLINT(4)  not null,`quarter_num_year` SMALLINT(4)  not null,`quarter_name` VARCHAR(50)  not null,`year` YEAR(10)  not null,`week_day_flag` BIT(1)  not null,`last_day_in_month_flag` BIT(1)  not null,`holiday_flag` BIT(1)  not null,`holiday_name` VARCHAR(200)  )");
			}
			java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `"
							+ "time_dim"
							+ "` (`date`,`day_num_in_week`,`week_num_in_year`,`week_num_overall`,`day_of_week`,`day_num_in_month`,`day_num_overall`,`month`,`month_num_in_year`,`month_num_overall`,`quarter_num_year`,`quarter_name`,`year`,`week_day_flag`,`last_day_in_month_flag`,`holiday_flag`,`holiday_name`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tFileInputDelimited_1 begin ] start
			 */

			ok_Hash.put("tFileInputDelimited_1", false);
			start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
			currentComponent = "tFileInputDelimited_1";

			org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
					FILENAME, "UTF-8", ",", "\n", true, 1, 0, -1, -1);
			while (fid_tFileInputDelimited_1.nextRecord()) {
				row1 = null;
				boolean whetherReject_tFileInputDelimited_1 = false;
				row1 = new row1Struct();
				try {
					String temp_tFileInputDelimited_1 = "";
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(0);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.date = ParserUtils.parseTo_Date(
								temp_tFileInputDelimited_1, "dd/MM/yyyy");
					} else {
						row1.date = null;
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(1);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.day_num_in_week = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'day_num_in_week', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(2);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.week_num_in_year = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'week_num_in_year', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(3);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.week_num_overall = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'week_num_overall', value is invalid or this column should be nullable or have a default value.");
					}
					row1.day_of_week = fid_tFileInputDelimited_1.get(4);
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(5);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.day_num_in_month = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'day_num_in_month', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(6);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.day_num_overall = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'day_num_overall', value is invalid or this column should be nullable or have a default value.");
					}
					row1.month = fid_tFileInputDelimited_1.get(7);
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(8);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.month_num_in_year = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'month_num_in_year', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(9);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.month_num_overall = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'month_num_overall', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(10);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.quarter_num_year = ParserUtils
								.parseTo_short(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'quarter_num_year', value is invalid or this column should be nullable or have a default value.");
					}
					row1.quarter_name = fid_tFileInputDelimited_1.get(11);
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(12);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.year = ParserUtils
								.parseTo_int(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'year', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(13);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.week_day_flag = ParserUtils
								.parseTo_boolean(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'week_day_flag', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(14);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.last_day_in_month_flag = ParserUtils
								.parseTo_boolean(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'last_day_in_month_flag', value is invalid or this column should be nullable or have a default value.");
					}
					temp_tFileInputDelimited_1 = fid_tFileInputDelimited_1
							.get(15);
					if (temp_tFileInputDelimited_1.length() > 0) {
						row1.holiday_flag = ParserUtils
								.parseTo_boolean(temp_tFileInputDelimited_1);
					} else {
						throw new RuntimeException(
								"Value is empty for column : 'holiday_flag', value is invalid or this column should be nullable or have a default value.");
					}
					row1.holiday_name = fid_tFileInputDelimited_1.get(16);

				} catch (Exception e) {
					whetherReject_tFileInputDelimited_1 = true;
					System.err.println(e.getMessage());
					row1 = null;
				}

				/**
				 * [tFileInputDelimited_1 begin ] stop
				 */
				/**
				 * [tFileInputDelimited_1 main ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 main ] stop
				 */
				// Start of branch "row1"
				if (row1 != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;

					if (row1.date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = row1.date.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmt_tMysqlOutput_1.setString(1,
									"0000-00-00 00:00:00");
						} else {
							pstmt_tMysqlOutput_1
									.setTimestamp(1, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);

					}

					pstmt_tMysqlOutput_1.setShort(2, row1.day_num_in_week);

					pstmt_tMysqlOutput_1.setShort(3, row1.week_num_in_year);

					pstmt_tMysqlOutput_1.setShort(4, row1.week_num_overall);

					if (row1.day_of_week == null) {
						pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);

					} else {

						pstmt_tMysqlOutput_1.setString(5, row1.day_of_week);

					}

					pstmt_tMysqlOutput_1.setShort(6, row1.day_num_in_month);

					pstmt_tMysqlOutput_1.setShort(7, row1.day_num_overall);

					if (row1.month == null) {
						pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);

					} else {

						pstmt_tMysqlOutput_1.setString(8, row1.month);

					}

					pstmt_tMysqlOutput_1.setShort(9, row1.month_num_in_year);

					pstmt_tMysqlOutput_1.setShort(10, row1.month_num_overall);

					pstmt_tMysqlOutput_1.setShort(11, row1.quarter_num_year);

					if (row1.quarter_name == null) {
						pstmt_tMysqlOutput_1
								.setNull(12, java.sql.Types.VARCHAR);

					} else {

						pstmt_tMysqlOutput_1.setString(12, row1.quarter_name);

					}

					pstmt_tMysqlOutput_1.setInt(13, row1.year);

					pstmt_tMysqlOutput_1.setBoolean(14, row1.week_day_flag);

					pstmt_tMysqlOutput_1.setBoolean(15,
							row1.last_day_in_month_flag);

					pstmt_tMysqlOutput_1.setBoolean(16, row1.holiday_flag);

					if (row1.holiday_name == null) {
						pstmt_tMysqlOutput_1
								.setNull(17, java.sql.Types.VARCHAR);

					} else {

						pstmt_tMysqlOutput_1.setString(17, row1.holiday_name);

					}

					try {
						insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
								+ pstmt_tMysqlOutput_1.executeUpdate();
						nb_line_tMysqlOutput_1++;
					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}

					if (!whetherReject_tMysqlOutput_1) {
					}
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "row1"

				/**
				 * [tFileInputDelimited_1 end ] start
				 */

				currentComponent = "tFileInputDelimited_1";

			}
			fid_tFileInputDelimited_1.close();
			globalMap.put("tFileInputDelimited_1_NB_LINE",
					fid_tFileInputDelimited_1.getRowNumber());

			ok_Hash.put("tFileInputDelimited_1", true);
			end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

			/**
			 * [tFileInputDelimited_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmt_tMysqlOutput_1 != null) {

				pstmt_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			tMysqlCommit_1Process();
			/**
			 * [tMysqlOutput_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
				conn_tMysqlCommit_1.close();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + HOST + ":" + PORT
					+ "/" + DBNAME + "?" + "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = USER;

			String password_tMysqlConnection_1 = PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tFileInputDelimited_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = TimeDimension.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/timedimension/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = TimeDimension.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/timedimension/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			FILENAME = (String) context.getProperty("FILENAME");

			HOST = (String) context.getProperty("HOST");

			PORT = (String) context.getProperty("PORT");

			DBNAME = (String) context.getProperty("DBNAME");

			PASSWORD = (String) context.getProperty("PASSWORD");

			USER = (String) context.getProperty("USER");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final TimeDimension TimeDimensionClass = new TimeDimension();
		try {
			errorCode = null;
			TimeDimensionClass.tMysqlConnection_1Process();
			status = "end";
		} catch (TalendException e_tMysqlConnection_1) {
			status = "failure";
			e_tMysqlConnection_1.printStackTrace();

		} finally {
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		currentComponent = "";
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 25694 characters generated by Talend OpenStudio on the March 14, 2008 2:01:49
 * PM GMT
 ******************************************************************************/
