// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.regionalofficeloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: RegionalOfficeLoader Purpose: <br>
 * Description: Loads the regional office into the regional_office_dim and links
 * them to the head office. <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class RegionalOfficeLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String OLTP_DB_PASSWORD;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_NAME;
	private static String OLTP_DB_PORT;
	private static String OLTP_HOST_NAME;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_NAME;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static String GK_DB_HOST;
	private static String GK_DB_PORT;
	private static String GK_DB_SCHEMA;
	private static String GK_DB_USER;
	private static String GK_DB_PASSWORD;
	private static final String jobName = "RegionalOfficeLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	private static final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_QcpZoOnNEdy2I_QGIjUG2Q", "0.1");

	private class TalendException extends Exception {
		private Exception e = null;
		private RegionalOfficeLoader c = null;
		private String currentComponent = null;

		private TalendException(RegionalOfficeLoader c, Exception e,
				String errorComponent) {
			this.currentComponent = errorComponent;
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}
					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getMessage(), 1);
						tLogCatcher_1Process();
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tJava_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());
		tJava_1_onSubJobError(exception);
	}

	public void tMysqlConnection_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
		tMysqlConnection_2_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tMysqlInput_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tFilterRow_1_error(Exception exception) throws TalendException {
		end_Hash.put("tFilterRow_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tFilterColumns_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFilterColumns_2", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlCommit_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tFilterRow_5_error(Exception exception) throws TalendException {
		end_Hash.put("tFilterRow_5", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tJoin_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJoin_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tFilterColumns_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFilterColumns_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_5_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tLogCatcher_1_error(Exception exception) throws TalendException {
		end_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tMysqlInput_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tStatCatcher_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tHash_row11_error(Exception exception) throws TalendException {
		end_Hash.put("tHash_row11", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tJava_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tLogCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tStatCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_1Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tJava_1 begin ] start
			 */

			ok_Hash.put("tJava_1", false);
			start_Hash.put("tJava_1", System.currentTimeMillis());
			currentComponent = "tJava_1";

			java.util.Properties p = new java.util.Properties();

			java.io.InputStream inStream = RegionalOfficeLoader.class
					.getClassLoader().getResourceAsStream(
							"hibernate.properties");

			p.load(inStream);
			OLTP_DB_PASSWORD = (String) p.get("OLTP_DB_PASSWORD");
			OLTP_DB_USER = (String) p.get("OLTP_DB_USER");
			OLTP_DB_NAME = (String) p.get("OLTP_DB_NAME");
			OLTP_DB_PORT = (String) p.get("OLTP_DB_PORT");
			OLTP_HOST_NAME = (String) p.get("OLTP_HOST_NAME");
			OLAP_DB_HOST = (String) p.get("OLAP_DB_HOST");
			OLAP_DB_PORT = (String) p.get("OLAP_DB_PORT");
			OLAP_DB_NAME = (String) p.get("OLAP_DB_NAME");
			OLAP_DB_USER = (String) p.get("OLAP_DB_USER");
			OLAP_DB_PASSWORD = (String) p.get("OLAP_DB_PASSWORD");

			/**
			 * [tJava_1 begin ] stop
			 */
			/**
			 * [tJava_1 main ] start
			 */

			currentComponent = "tJava_1";

			/**
			 * [tJava_1 main ] stop
			 */

			/**
			 * [tJava_1 end ] start
			 */

			currentComponent = "tJava_1";

			ok_Hash.put("tJava_1", true);
			end_Hash.put("tJava_1", System.currentTimeMillis());

			/**
			 * [tJava_1 end ] stop
			 */

			tMysqlConnection_2Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_2Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_2 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_2", false);
			start_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_2";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_2 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_NAME + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_2 = OLAP_DB_USER;

			String password_tMysqlConnection_2 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_2 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_2,
							userName_tMysqlConnection_2,
							password_tMysqlConnection_2);

			conn_tMysqlConnection_2.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_2",
					conn_tMysqlConnection_2);

			/**
			 * [tMysqlConnection_2 begin ] stop
			 */
			/**
			 * [tMysqlConnection_2 main ] start
			 */

			currentComponent = "tMysqlConnection_2";

			/**
			 * [tMysqlConnection_2 main ] stop
			 */

			/**
			 * [tMysqlConnection_2 end ] start
			 */

			currentComponent = "tMysqlConnection_2";

			ok_Hash.put("tMysqlConnection_2", true);
			end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_2 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + GK_DB_HOST + ":"
					+ GK_DB_PORT + "/" + GK_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = GK_DB_USER;

			String password_tMysqlConnection_1 = GK_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tMysqlInput_1Process();
			tMysqlCommit_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row7Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row6Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row5Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		Short head_office_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row4Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		Short head_office_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row10Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row3Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row2Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class row1Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	private class after_tMysqlInput_1Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_OFFICE_NUM;

		short OFFICE_LEVEL_ID;

		String SEARCH_ID;

		int MAX_CHILD_COUNT;

		short LOCAL_REMOTE_FLAG;

		String DISPLAY_NAME;

		Short CREATED_BY;

		java.util.Date CREATED_DATE;

		Short UPDATED_BY;

		java.util.Date UPDATED_DATE;

		String OFFICE_SHORT_NAME;

		Short parent_id;

		short STATUS_ID;

		int VERSION_NO;

		Short OFFICE_CODE_ID;

		String parent_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_OFFICE_NUM == null) ? 0
								: this.GLOBAL_OFFICE_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_1Struct other = (after_tMysqlInput_1Struct) obj;

			if (this.GLOBAL_OFFICE_NUM == null) {
				if (other.GLOBAL_OFFICE_NUM != null)
					return false;
			} else if (!this.GLOBAL_OFFICE_NUM.equals(other.GLOBAL_OFFICE_NUM))
				return false;

			return true;
		}

	}

	public void tMysqlInput_1Process() throws TalendException {
		String currentComponent = "";
		try {
			tMysqlInput_2Process();

			row1Struct row1 = new row1Struct();
			row3Struct row3 = new row3Struct();
			row6Struct row6 = new row6Struct();
			row7Struct row7 = new row7Struct();
			row2Struct row2 = new row2Struct();
			row10Struct row10 = new row10Struct();
			row4Struct row4 = new row4Struct();
			row5Struct row5 = new row5Struct();

			/**
			 * [tMysqlCommit_2 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_2", false);
			start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_2";

			/**
			 * [tMysqlCommit_2 begin ] stop
			 */

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int keyCount_tMysqlOutput_1 = 1;
			if (keyCount_tMysqlOutput_1 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "head_office_dim";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_1 = conn_tMysqlOutput_1
					.getMetaData();
			java.sql.ResultSet rsTable_tMysqlOutput_1 = dbMetaData_tMysqlOutput_1
					.getTables(null, null, null, new String[] { "TABLE" });
			boolean whetherExist_tMysqlOutput_1 = false;
			while (rsTable_tMysqlOutput_1.next()) {
				String table_tMysqlOutput_1 = rsTable_tMysqlOutput_1
						.getString("TABLE_NAME");
				if (table_tMysqlOutput_1.equalsIgnoreCase("head_office_dim")) {
					whetherExist_tMysqlOutput_1 = true;
					break;
				}
			}
			if (!whetherExist_tMysqlOutput_1) {
				java.sql.Statement stmtCreate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();
				stmtCreate_tMysqlOutput_1
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutput_1
								+ "`(`GLOBAL_OFFICE_NUM` VARCHAR(100)  not null,`OFFICE_LEVEL_ID` SMALLINT(5)  not null,`SEARCH_ID` VARCHAR(100)  not null,`MAX_CHILD_COUNT` INT(10)  not null,`LOCAL_REMOTE_FLAG` SMALLINT(5)  not null,`DISPLAY_NAME` VARCHAR(200)  not null,`CREATED_BY` SMALLINT(5)  ,`CREATED_DATE` DATE ,`UPDATED_BY` SMALLINT(5)  ,`UPDATED_DATE` DATE ,`OFFICE_SHORT_NAME` VARCHAR(4)  not null,`STATUS_ID` SMALLINT(5)  not null,`VERSION_NO` INT(10)  not null,`OFFICE_CODE_ID` SMALLINT(5)  ,primary key(`GLOBAL_OFFICE_NUM`))");
			}
			java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("SELECT COUNT(1) FROM `"
							+ "head_office_dim"
							+ "` WHERE `GLOBAL_OFFICE_NUM` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `"
							+ "head_office_dim"
							+ "` (`GLOBAL_OFFICE_NUM`,`OFFICE_LEVEL_ID`,`SEARCH_ID`,`MAX_CHILD_COUNT`,`LOCAL_REMOTE_FLAG`,`DISPLAY_NAME`,`CREATED_BY`,`CREATED_DATE`,`UPDATED_BY`,`UPDATED_DATE`,`OFFICE_SHORT_NAME`,`STATUS_ID`,`VERSION_NO`,`OFFICE_CODE_ID`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("UPDATE `"
							+ "head_office_dim"
							+ "` SET `OFFICE_LEVEL_ID` = ?,`SEARCH_ID` = ?,`MAX_CHILD_COUNT` = ?,`LOCAL_REMOTE_FLAG` = ?,`DISPLAY_NAME` = ?,`CREATED_BY` = ?,`CREATED_DATE` = ?,`UPDATED_BY` = ?,`UPDATED_DATE` = ?,`OFFICE_SHORT_NAME` = ?,`STATUS_ID` = ?,`VERSION_NO` = ?,`OFFICE_CODE_ID` = ? WHERE `GLOBAL_OFFICE_NUM` = ?");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tFilterColumns_2 begin ] start
			 */

			ok_Hash.put("tFilterColumns_2", false);
			start_Hash.put("tFilterColumns_2", System.currentTimeMillis());
			currentComponent = "tFilterColumns_2";

			/**
			 * [tFilterColumns_2 begin ] stop
			 */

			/**
			 * [tMysqlOutput_5 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_5", false);
			start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_5";

			int keyCount_tMysqlOutput_5 = 1;
			if (keyCount_tMysqlOutput_5 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_5 = 0;
			int nb_line_update_tMysqlOutput_5 = 0;
			int nb_line_inserted_tMysqlOutput_5 = 0;
			int nb_line_deleted_tMysqlOutput_5 = 0;

			int deletedCount_tMysqlOutput_5 = 0;
			int updatedCount_tMysqlOutput_5 = 0;
			int insertedCount_tMysqlOutput_5 = 0;

			String tableName_tMysqlOutput_5 = "regional_office_dim";
			boolean whetherReject_tMysqlOutput_5 = false;

			java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime()
					.getTime();
			calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime()
					.getTime();
			long date_tMysqlOutput_5;

			java.sql.Connection conn_tMysqlOutput_5 = null;
			conn_tMysqlOutput_5 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.DatabaseMetaData dbMetaData_tMysqlOutput_5 = conn_tMysqlOutput_5
					.getMetaData();
			java.sql.ResultSet rsTable_tMysqlOutput_5 = dbMetaData_tMysqlOutput_5
					.getTables(null, null, null, new String[] { "TABLE" });
			boolean whetherExist_tMysqlOutput_5 = false;
			while (rsTable_tMysqlOutput_5.next()) {
				String table_tMysqlOutput_5 = rsTable_tMysqlOutput_5
						.getString("TABLE_NAME");
				if (table_tMysqlOutput_5
						.equalsIgnoreCase("regional_office_dim")) {
					whetherExist_tMysqlOutput_5 = true;
					break;
				}
			}
			if (!whetherExist_tMysqlOutput_5) {
				java.sql.Statement stmtCreate_tMysqlOutput_5 = conn_tMysqlOutput_5
						.createStatement();
				stmtCreate_tMysqlOutput_5
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutput_5
								+ "`(`GLOBAL_OFFICE_NUM` VARCHAR(100)  not null,`OFFICE_LEVEL_ID` SMALLINT(5)  not null,`SEARCH_ID` VARCHAR(100)  not null,`MAX_CHILD_COUNT` INT(10)  not null,`LOCAL_REMOTE_FLAG` SMALLINT(5)  not null,`DISPLAY_NAME` VARCHAR(200)  not null,`CREATED_BY` SMALLINT(5)  ,`CREATED_DATE` DATE ,`UPDATED_BY` SMALLINT(5)  ,`UPDATED_DATE` DATE ,`OFFICE_SHORT_NAME` VARCHAR(4)  not null,`STATUS_ID` SMALLINT(5)  not null,`VERSION_NO` INT(10)  not null,`OFFICE_CODE_ID` SMALLINT(5)  ,`head_office_id` SMALLINT(5)  ,primary key(`GLOBAL_OFFICE_NUM`))");
			}
			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_5 = conn_tMysqlOutput_5
					.prepareStatement("UPDATE `"
							+ "regional_office_dim"
							+ "` SET `OFFICE_LEVEL_ID` = ?,`SEARCH_ID` = ?,`MAX_CHILD_COUNT` = ?,`LOCAL_REMOTE_FLAG` = ?,`DISPLAY_NAME` = ?,`CREATED_BY` = ?,`CREATED_DATE` = ?,`UPDATED_BY` = ?,`UPDATED_DATE` = ?,`OFFICE_SHORT_NAME` = ?,`STATUS_ID` = ?,`VERSION_NO` = ?,`OFFICE_CODE_ID` = ?,`head_office_id` = ? WHERE `GLOBAL_OFFICE_NUM` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_5 = conn_tMysqlOutput_5
					.prepareStatement("INSERT INTO `"
							+ "regional_office_dim"
							+ "` (`GLOBAL_OFFICE_NUM`,`OFFICE_LEVEL_ID`,`SEARCH_ID`,`MAX_CHILD_COUNT`,`LOCAL_REMOTE_FLAG`,`DISPLAY_NAME`,`CREATED_BY`,`CREATED_DATE`,`UPDATED_BY`,`UPDATED_DATE`,`OFFICE_SHORT_NAME`,`STATUS_ID`,`VERSION_NO`,`OFFICE_CODE_ID`,`head_office_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

			/**
			 * [tMysqlOutput_5 begin ] stop
			 */

			/**
			 * [tFilterColumns_1 begin ] start
			 */

			ok_Hash.put("tFilterColumns_1", false);
			start_Hash.put("tFilterColumns_1", System.currentTimeMillis());
			currentComponent = "tFilterColumns_1";

			/**
			 * [tFilterColumns_1 begin ] stop
			 */

			/**
			 * [tJoin_1 begin ] start
			 */

			ok_Hash.put("tJoin_1", false);
			start_Hash.put("tJoin_1", System.currentTimeMillis());
			currentComponent = "tJoin_1";

			final java.util.List<row11Struct> list_tJoin_1 = new java.util.ArrayList(
					((java.util.Map<row11Struct, row11Struct>) globalMap
							.get("tHash_row11")).keySet());

			class Util_tJoin_1 {
				row11Struct lookupValue = null;
				final int keyNum = 1;

				public boolean isJoined(row10Struct mainRow) {
					String mainRow_parent_office_num_str = null;
					if (mainRow.parent_office_num != null) {

						mainRow_parent_office_num_str = mainRow.parent_office_num;

					}

					int checkedKeyNum = 0;
					lookupValue = null;

					for (row11Struct row : list_tJoin_1) {
						String row_global_office_num_str = null;
						if (mainRow.parent_office_num != null) {

							row_global_office_num_str = row.global_office_num;

						}
						if (mainRow_parent_office_num_str != null
								&& mainRow_parent_office_num_str
										.equals(row_global_office_num_str)) {
							checkedKeyNum++;
						} else if (mainRow_parent_office_num_str == null
								&& row_global_office_num_str == null) {
							checkedKeyNum++;
						}
						if (checkedKeyNum == keyNum) {
							lookupValue = row;
							return true;
						}
					}
					return false;
				}
			}

			Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

			int nb_line_tJoin_1 = 0;
			/**
			 * [tJoin_1 begin ] stop
			 */

			/**
			 * [tFilterRow_5 begin ] start
			 */

			ok_Hash.put("tFilterRow_5", false);
			start_Hash.put("tFilterRow_5", System.currentTimeMillis());
			currentComponent = "tFilterRow_5";

			int nb_line_tFilterRow_5 = 0;
			int nb_line_ok_tFilterRow_5 = 0;

			/**
			 * [tFilterRow_5 begin ] stop
			 */

			/**
			 * [tFilterRow_1 begin ] start
			 */

			ok_Hash.put("tFilterRow_1", false);
			start_Hash.put("tFilterRow_1", System.currentTimeMillis());
			currentComponent = "tFilterRow_1";

			int nb_line_tFilterRow_1 = 0;
			int nb_line_ok_tFilterRow_1 = 0;

			/**
			 * [tFilterRow_1 begin ] stop
			 */

			/**
			 * [tMysqlInput_1 begin ] start
			 */

			ok_Hash.put("tMysqlInput_1", false);
			start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
			currentComponent = "tMysqlInput_1";

			int nb_line_tMysqlInput_1 = 0;
			java.sql.Connection conn_tMysqlInput_1 = null;
			conn_tMysqlInput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
					.executeQuery("SELECT office.GLOBAL_OFFICE_NUM, office.OFFICE_LEVEL_ID, office.SEARCH_ID,  office.MAX_CHILD_COUNT, office.LOCAL_REMOTE_FLAG, office.DISPLAY_NAME, office.CREATED_BY,  office.CREATED_DATE, office.UPDATED_BY, office.UPDATED_DATE, office.OFFICE_SHORT_NAME,  office.PARENT_OFFICE_ID parent_id, office.STATUS_ID, office.VERSION_NO, office.OFFICE_CODE_ID, (select global_office_num from office o where parent_id = o.office_id) parent_office_num FROM office where office.GLOBAL_OFFICE_NUM = 1 or office.GLOBAL_OFFICE_NUM = 2");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
					.getMetaData();
			int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
					.getTime();

			globalMap
					.put(
							"tMysqlInput_1_QUERY",
							"SELECT office.GLOBAL_OFFICE_NUM, office.OFFICE_LEVEL_ID, office.SEARCH_ID,  office.MAX_CHILD_COUNT, office.LOCAL_REMOTE_FLAG, office.DISPLAY_NAME, office.CREATED_BY,  office.CREATED_DATE, office.UPDATED_BY, office.UPDATED_DATE, office.OFFICE_SHORT_NAME,  office.PARENT_OFFICE_ID parent_id, office.STATUS_ID, office.VERSION_NO, office.OFFICE_CODE_ID, (select global_office_num from office o where parent_id = o.office_id) parent_office_num FROM office where office.GLOBAL_OFFICE_NUM = 1 or office.GLOBAL_OFFICE_NUM = 2");

			while (rs_tMysqlInput_1.next()) {
				nb_line_tMysqlInput_1++;

				if (colQtyInRs_tMysqlInput_1 < 1) {

					row1.GLOBAL_OFFICE_NUM = null;

				} else {

					if (rs_tMysqlInput_1.getObject(1) != null) {
						row1.GLOBAL_OFFICE_NUM = rs_tMysqlInput_1.getString(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 2) {

					row1.OFFICE_LEVEL_ID = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(2) != null) {
						row1.OFFICE_LEVEL_ID = rs_tMysqlInput_1.getShort(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 3) {

					row1.SEARCH_ID = null;

				} else {

					if (rs_tMysqlInput_1.getObject(3) != null) {
						row1.SEARCH_ID = rs_tMysqlInput_1.getString(3);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 4) {

					row1.MAX_CHILD_COUNT = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(4) != null) {
						row1.MAX_CHILD_COUNT = rs_tMysqlInput_1.getInt(4);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 5) {

					row1.LOCAL_REMOTE_FLAG = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(5) != null) {
						row1.LOCAL_REMOTE_FLAG = rs_tMysqlInput_1.getShort(5);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 6) {

					row1.DISPLAY_NAME = null;

				} else {

					if (rs_tMysqlInput_1.getObject(6) != null) {
						row1.DISPLAY_NAME = rs_tMysqlInput_1.getString(6);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 7) {

					row1.CREATED_BY = null;

				} else {

					if (rs_tMysqlInput_1.getObject(7) != null) {
						row1.CREATED_BY = rs_tMysqlInput_1.getShort(7);
					} else {

						row1.CREATED_BY = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 8) {

					row1.CREATED_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(8) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(8);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.CREATED_DATE = rs_tMysqlInput_1
									.getTimestamp(8);
						} else {
							row1.CREATED_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.CREATED_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 9) {

					row1.UPDATED_BY = null;

				} else {

					if (rs_tMysqlInput_1.getObject(9) != null) {
						row1.UPDATED_BY = rs_tMysqlInput_1.getShort(9);
					} else {

						row1.UPDATED_BY = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 10) {

					row1.UPDATED_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(10) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(10);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.UPDATED_DATE = rs_tMysqlInput_1
									.getTimestamp(10);
						} else {
							row1.UPDATED_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.UPDATED_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 11) {

					row1.OFFICE_SHORT_NAME = null;

				} else {

					if (rs_tMysqlInput_1.getObject(11) != null) {
						row1.OFFICE_SHORT_NAME = rs_tMysqlInput_1.getString(11);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 12) {

					row1.parent_id = null;

				} else {

					if (rs_tMysqlInput_1.getObject(12) != null) {
						row1.parent_id = rs_tMysqlInput_1.getShort(12);
					} else {

						row1.parent_id = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 13) {

					row1.STATUS_ID = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(13) != null) {
						row1.STATUS_ID = rs_tMysqlInput_1.getShort(13);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 14) {

					row1.VERSION_NO = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(14) != null) {
						row1.VERSION_NO = rs_tMysqlInput_1.getInt(14);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 15) {

					row1.OFFICE_CODE_ID = null;

				} else {

					if (rs_tMysqlInput_1.getObject(15) != null) {
						row1.OFFICE_CODE_ID = rs_tMysqlInput_1.getShort(15);
					} else {

						row1.OFFICE_CODE_ID = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 16) {

					row1.parent_office_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(16) != null) {
						row1.parent_office_num = rs_tMysqlInput_1.getString(16);
					} else {

						row1.parent_office_num = null;

					}

				}

				/**
				 * [tMysqlInput_1 begin ] stop
				 */
				/**
				 * [tMysqlInput_1 main ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 main ] stop
				 */
				/**
				 * [tFilterRow_1 main ] start
				 */

				currentComponent = "tFilterRow_1";

				row3 = null;
				row2 = null;

				if (

				row1.OFFICE_LEVEL_ID == 1

				)

				{
					if (row3 == null) {
						row3 = new row3Struct();
					}
					row3.GLOBAL_OFFICE_NUM = row1.GLOBAL_OFFICE_NUM;
					row3.OFFICE_LEVEL_ID = row1.OFFICE_LEVEL_ID;
					row3.SEARCH_ID = row1.SEARCH_ID;
					row3.MAX_CHILD_COUNT = row1.MAX_CHILD_COUNT;
					row3.LOCAL_REMOTE_FLAG = row1.LOCAL_REMOTE_FLAG;
					row3.DISPLAY_NAME = row1.DISPLAY_NAME;
					row3.CREATED_BY = row1.CREATED_BY;
					row3.CREATED_DATE = row1.CREATED_DATE;
					row3.UPDATED_BY = row1.UPDATED_BY;
					row3.UPDATED_DATE = row1.UPDATED_DATE;
					row3.OFFICE_SHORT_NAME = row1.OFFICE_SHORT_NAME;
					row3.parent_id = row1.parent_id;
					row3.STATUS_ID = row1.STATUS_ID;
					row3.VERSION_NO = row1.VERSION_NO;
					row3.OFFICE_CODE_ID = row1.OFFICE_CODE_ID;
					row3.parent_office_num = row1.parent_office_num;
					nb_line_ok_tFilterRow_1++;
				} else {
					if (row2 == null) {
						row2 = new row2Struct();
					}
					row2.GLOBAL_OFFICE_NUM = row1.GLOBAL_OFFICE_NUM;
					row2.OFFICE_LEVEL_ID = row1.OFFICE_LEVEL_ID;
					row2.SEARCH_ID = row1.SEARCH_ID;
					row2.MAX_CHILD_COUNT = row1.MAX_CHILD_COUNT;
					row2.LOCAL_REMOTE_FLAG = row1.LOCAL_REMOTE_FLAG;
					row2.DISPLAY_NAME = row1.DISPLAY_NAME;
					row2.CREATED_BY = row1.CREATED_BY;
					row2.CREATED_DATE = row1.CREATED_DATE;
					row2.UPDATED_BY = row1.UPDATED_BY;
					row2.UPDATED_DATE = row1.UPDATED_DATE;
					row2.OFFICE_SHORT_NAME = row1.OFFICE_SHORT_NAME;
					row2.parent_id = row1.parent_id;
					row2.STATUS_ID = row1.STATUS_ID;
					row2.VERSION_NO = row1.VERSION_NO;
					row2.OFFICE_CODE_ID = row1.OFFICE_CODE_ID;
					row2.parent_office_num = row1.parent_office_num;
				}
				nb_line_tFilterRow_1++;
				/**
				 * [tFilterRow_1 main ] stop
				 */
				// Start of branch "row3"
				if (row3 != null) {

					/**
					 * [tFilterColumns_2 main ] start
					 */

					currentComponent = "tFilterColumns_2";

					row6.GLOBAL_OFFICE_NUM = row3.GLOBAL_OFFICE_NUM;
					row6.OFFICE_LEVEL_ID = row3.OFFICE_LEVEL_ID;
					row6.SEARCH_ID = row3.SEARCH_ID;
					row6.MAX_CHILD_COUNT = row3.MAX_CHILD_COUNT;
					row6.LOCAL_REMOTE_FLAG = row3.LOCAL_REMOTE_FLAG;
					row6.DISPLAY_NAME = row3.DISPLAY_NAME;
					row6.CREATED_BY = row3.CREATED_BY;
					row6.CREATED_DATE = row3.CREATED_DATE;
					row6.UPDATED_BY = row3.UPDATED_BY;
					row6.UPDATED_DATE = row3.UPDATED_DATE;
					row6.OFFICE_SHORT_NAME = row3.OFFICE_SHORT_NAME;
					row6.STATUS_ID = row3.STATUS_ID;
					row6.VERSION_NO = row3.VERSION_NO;
					row6.OFFICE_CODE_ID = row3.OFFICE_CODE_ID;
					/**
					 * [tFilterColumns_2 main ] stop
					 */
					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					row7 = null;
					whetherReject_tMysqlOutput_1 = false;

					if (row6.GLOBAL_OFFICE_NUM == null) {
						pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);

					} else {

						pstmt_tMysqlOutput_1.setString(1,
								row6.GLOBAL_OFFICE_NUM);

					}

					java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1
							.executeQuery();
					int checkCount_tMysqlOutput_1 = -1;
					while (rs_tMysqlOutput_1.next()) {
						checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1.getInt(1);
					}
					if (checkCount_tMysqlOutput_1 > 0) {

						pstmtUpdate_tMysqlOutput_1.setShort(1,
								row6.OFFICE_LEVEL_ID);

						if (row6.SEARCH_ID == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);

						} else {

							pstmtUpdate_tMysqlOutput_1.setString(2,
									row6.SEARCH_ID);

						}

						pstmtUpdate_tMysqlOutput_1.setInt(3,
								row6.MAX_CHILD_COUNT);

						pstmtUpdate_tMysqlOutput_1.setShort(4,
								row6.LOCAL_REMOTE_FLAG);

						if (row6.DISPLAY_NAME == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(5,
									java.sql.Types.VARCHAR);

						} else {

							pstmtUpdate_tMysqlOutput_1.setString(5,
									row6.DISPLAY_NAME);

						}

						if (row6.CREATED_BY == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(6,
									java.sql.Types.INTEGER);

						} else {

							pstmtUpdate_tMysqlOutput_1.setShort(6,
									row6.CREATED_BY);

						}

						if (row6.CREATED_DATE != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = row6.CREATED_DATE.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtUpdate_tMysqlOutput_1.setString(7,
										"0000-00-00 00:00:00");
							} else {
								pstmtUpdate_tMysqlOutput_1.setTimestamp(7,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtUpdate_tMysqlOutput_1.setNull(7,
									java.sql.Types.DATE);

						}

						if (row6.UPDATED_BY == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(8,
									java.sql.Types.INTEGER);

						} else {

							pstmtUpdate_tMysqlOutput_1.setShort(8,
									row6.UPDATED_BY);

						}

						if (row6.UPDATED_DATE != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = row6.UPDATED_DATE.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtUpdate_tMysqlOutput_1.setString(9,
										"0000-00-00 00:00:00");
							} else {
								pstmtUpdate_tMysqlOutput_1.setTimestamp(9,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtUpdate_tMysqlOutput_1.setNull(9,
									java.sql.Types.DATE);

						}

						if (row6.OFFICE_SHORT_NAME == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(10,
									java.sql.Types.VARCHAR);

						} else {

							pstmtUpdate_tMysqlOutput_1.setString(10,
									row6.OFFICE_SHORT_NAME);

						}

						pstmtUpdate_tMysqlOutput_1.setShort(11, row6.STATUS_ID);

						pstmtUpdate_tMysqlOutput_1.setInt(12, row6.VERSION_NO);

						if (row6.OFFICE_CODE_ID == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(13,
									java.sql.Types.INTEGER);

						} else {

							pstmtUpdate_tMysqlOutput_1.setShort(13,
									row6.OFFICE_CODE_ID);

						}

						if (row6.GLOBAL_OFFICE_NUM == null) {
							pstmtUpdate_tMysqlOutput_1.setNull(14,
									java.sql.Types.VARCHAR);

						} else {

							pstmtUpdate_tMysqlOutput_1.setString(14,
									row6.GLOBAL_OFFICE_NUM);

						}

						try {
							updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
									+ pstmtUpdate_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					} else {

						if (row6.GLOBAL_OFFICE_NUM == null) {
							pstmtInsert_tMysqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(1,
									row6.GLOBAL_OFFICE_NUM);

						}

						pstmtInsert_tMysqlOutput_1.setShort(2,
								row6.OFFICE_LEVEL_ID);

						if (row6.SEARCH_ID == null) {
							pstmtInsert_tMysqlOutput_1.setNull(3,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(3,
									row6.SEARCH_ID);

						}

						pstmtInsert_tMysqlOutput_1.setInt(4,
								row6.MAX_CHILD_COUNT);

						pstmtInsert_tMysqlOutput_1.setShort(5,
								row6.LOCAL_REMOTE_FLAG);

						if (row6.DISPLAY_NAME == null) {
							pstmtInsert_tMysqlOutput_1.setNull(6,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(6,
									row6.DISPLAY_NAME);

						}

						if (row6.CREATED_BY == null) {
							pstmtInsert_tMysqlOutput_1.setNull(7,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(7,
									row6.CREATED_BY);

						}

						if (row6.CREATED_DATE != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = row6.CREATED_DATE.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(8,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(8,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(8,
									java.sql.Types.DATE);

						}

						if (row6.UPDATED_BY == null) {
							pstmtInsert_tMysqlOutput_1.setNull(9,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(9,
									row6.UPDATED_BY);

						}

						if (row6.UPDATED_DATE != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = row6.UPDATED_DATE.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(10,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(10,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(10,
									java.sql.Types.DATE);

						}

						if (row6.OFFICE_SHORT_NAME == null) {
							pstmtInsert_tMysqlOutput_1.setNull(11,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(11,
									row6.OFFICE_SHORT_NAME);

						}

						pstmtInsert_tMysqlOutput_1.setShort(12, row6.STATUS_ID);

						pstmtInsert_tMysqlOutput_1.setInt(13, row6.VERSION_NO);

						if (row6.OFFICE_CODE_ID == null) {
							pstmtInsert_tMysqlOutput_1.setNull(14,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(14,
									row6.OFFICE_CODE_ID);

						}

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					if (!whetherReject_tMysqlOutput_1) {
						row7 = new row7Struct();
						row7.GLOBAL_OFFICE_NUM = row6.GLOBAL_OFFICE_NUM;
						row7.OFFICE_LEVEL_ID = row6.OFFICE_LEVEL_ID;
						row7.SEARCH_ID = row6.SEARCH_ID;
						row7.MAX_CHILD_COUNT = row6.MAX_CHILD_COUNT;
						row7.LOCAL_REMOTE_FLAG = row6.LOCAL_REMOTE_FLAG;
						row7.DISPLAY_NAME = row6.DISPLAY_NAME;
						row7.CREATED_BY = row6.CREATED_BY;
						row7.CREATED_DATE = row6.CREATED_DATE;
						row7.UPDATED_BY = row6.UPDATED_BY;
						row7.UPDATED_DATE = row6.UPDATED_DATE;
						row7.OFFICE_SHORT_NAME = row6.OFFICE_SHORT_NAME;
						row7.STATUS_ID = row6.STATUS_ID;
						row7.VERSION_NO = row6.VERSION_NO;
						row7.OFFICE_CODE_ID = row6.OFFICE_CODE_ID;
					}
					/**
					 * [tMysqlOutput_1 main ] stop
					 */
					// Start of branch "row7"
					if (row7 != null) {

						/**
						 * [tMysqlCommit_2 main ] start
						 */

						currentComponent = "tMysqlCommit_2";

						java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection) globalMap
								.get("conn_");
						if (conn_tMysqlCommit_2 != null
								&& !conn_tMysqlCommit_2.isClosed()) {
							conn_tMysqlCommit_2.commit();
							conn_tMysqlCommit_2.close();
						}

						/**
						 * [tMysqlCommit_2 main ] stop
						 */

					} // End of branch "row7"

				} // End of branch "row3"

				// Start of branch "row2"
				if (row2 != null) {

					/**
					 * [tFilterRow_5 main ] start
					 */

					currentComponent = "tFilterRow_5";

					row10 = null;

					if (

					row2.OFFICE_LEVEL_ID == 2

					)

					{
						if (row10 == null) {
							row10 = new row10Struct();
						}
						row10.GLOBAL_OFFICE_NUM = row2.GLOBAL_OFFICE_NUM;
						row10.OFFICE_LEVEL_ID = row2.OFFICE_LEVEL_ID;
						row10.SEARCH_ID = row2.SEARCH_ID;
						row10.MAX_CHILD_COUNT = row2.MAX_CHILD_COUNT;
						row10.LOCAL_REMOTE_FLAG = row2.LOCAL_REMOTE_FLAG;
						row10.DISPLAY_NAME = row2.DISPLAY_NAME;
						row10.CREATED_BY = row2.CREATED_BY;
						row10.CREATED_DATE = row2.CREATED_DATE;
						row10.UPDATED_BY = row2.UPDATED_BY;
						row10.UPDATED_DATE = row2.UPDATED_DATE;
						row10.OFFICE_SHORT_NAME = row2.OFFICE_SHORT_NAME;
						row10.parent_id = row2.parent_id;
						row10.STATUS_ID = row2.STATUS_ID;
						row10.VERSION_NO = row2.VERSION_NO;
						row10.OFFICE_CODE_ID = row2.OFFICE_CODE_ID;
						row10.parent_office_num = row2.parent_office_num;
						nb_line_ok_tFilterRow_5++;
					} else {
					}
					nb_line_tFilterRow_5++;
					/**
					 * [tFilterRow_5 main ] stop
					 */
					// Start of branch "row10"
					if (row10 != null) {

						/**
						 * [tJoin_1 main ] start
						 */

						currentComponent = "tJoin_1";

						row4 = null;

						row4 = new row4Struct();
						row4.GLOBAL_OFFICE_NUM = row10.GLOBAL_OFFICE_NUM;
						row4.OFFICE_LEVEL_ID = row10.OFFICE_LEVEL_ID;
						row4.SEARCH_ID = row10.SEARCH_ID;
						row4.MAX_CHILD_COUNT = row10.MAX_CHILD_COUNT;
						row4.LOCAL_REMOTE_FLAG = row10.LOCAL_REMOTE_FLAG;
						row4.DISPLAY_NAME = row10.DISPLAY_NAME;
						row4.CREATED_BY = row10.CREATED_BY;
						row4.CREATED_DATE = row10.CREATED_DATE;
						row4.UPDATED_BY = row10.UPDATED_BY;
						row4.UPDATED_DATE = row10.UPDATED_DATE;
						row4.OFFICE_SHORT_NAME = row10.OFFICE_SHORT_NAME;
						row4.parent_id = row10.parent_id;
						row4.STATUS_ID = row10.STATUS_ID;
						row4.VERSION_NO = row10.VERSION_NO;
						row4.OFFICE_CODE_ID = row10.OFFICE_CODE_ID;
						row4.parent_office_num = row10.parent_office_num;

						if (util_tJoin_1.isJoined(row10)) {
							row4.head_office_id = util_tJoin_1.lookupValue.office_id;

						}

						// /////////////////////
						/**
						 * [tJoin_1 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFilterColumns_1 main ] start
							 */

							currentComponent = "tFilterColumns_1";

							row5.GLOBAL_OFFICE_NUM = row4.GLOBAL_OFFICE_NUM;
							row5.OFFICE_LEVEL_ID = row4.OFFICE_LEVEL_ID;
							row5.SEARCH_ID = row4.SEARCH_ID;
							row5.MAX_CHILD_COUNT = row4.MAX_CHILD_COUNT;
							row5.LOCAL_REMOTE_FLAG = row4.LOCAL_REMOTE_FLAG;
							row5.DISPLAY_NAME = row4.DISPLAY_NAME;
							row5.CREATED_BY = row4.CREATED_BY;
							row5.CREATED_DATE = row4.CREATED_DATE;
							row5.UPDATED_BY = row4.UPDATED_BY;
							row5.UPDATED_DATE = row4.UPDATED_DATE;
							row5.OFFICE_SHORT_NAME = row4.OFFICE_SHORT_NAME;
							row5.STATUS_ID = row4.STATUS_ID;
							row5.VERSION_NO = row4.VERSION_NO;
							row5.OFFICE_CODE_ID = row4.OFFICE_CODE_ID;
							row5.head_office_id = row4.head_office_id;
							/**
							 * [tFilterColumns_1 main ] stop
							 */
							/**
							 * [tMysqlOutput_5 main ] start
							 */

							currentComponent = "tMysqlOutput_5";

							whetherReject_tMysqlOutput_5 = false;
							int updateFlag_tMysqlOutput_5 = 0;

							pstmtUpdate_tMysqlOutput_5.setShort(1,
									row5.OFFICE_LEVEL_ID);

							if (row5.SEARCH_ID == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(2,
										java.sql.Types.VARCHAR);

							} else {

								pstmtUpdate_tMysqlOutput_5.setString(2,
										row5.SEARCH_ID);

							}

							pstmtUpdate_tMysqlOutput_5.setInt(3,
									row5.MAX_CHILD_COUNT);

							pstmtUpdate_tMysqlOutput_5.setShort(4,
									row5.LOCAL_REMOTE_FLAG);

							if (row5.DISPLAY_NAME == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(5,
										java.sql.Types.VARCHAR);

							} else {

								pstmtUpdate_tMysqlOutput_5.setString(5,
										row5.DISPLAY_NAME);

							}

							if (row5.CREATED_BY == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(6,
										java.sql.Types.INTEGER);

							} else {

								pstmtUpdate_tMysqlOutput_5.setShort(6,
										row5.CREATED_BY);

							}

							if (row5.CREATED_DATE != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tMysqlOutput_5 = row5.CREATED_DATE
										.getTime();
								if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
										|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
									pstmtUpdate_tMysqlOutput_5.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmtUpdate_tMysqlOutput_5.setTimestamp(7,
											new java.sql.Timestamp(
													date_tMysqlOutput_5));
								}
							} else {

								pstmtUpdate_tMysqlOutput_5.setNull(7,
										java.sql.Types.DATE);

							}

							if (row5.UPDATED_BY == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(8,
										java.sql.Types.INTEGER);

							} else {

								pstmtUpdate_tMysqlOutput_5.setShort(8,
										row5.UPDATED_BY);

							}

							if (row5.UPDATED_DATE != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tMysqlOutput_5 = row5.UPDATED_DATE
										.getTime();
								if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
										|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
									pstmtUpdate_tMysqlOutput_5.setString(9,
											"0000-00-00 00:00:00");
								} else {
									pstmtUpdate_tMysqlOutput_5.setTimestamp(9,
											new java.sql.Timestamp(
													date_tMysqlOutput_5));
								}
							} else {

								pstmtUpdate_tMysqlOutput_5.setNull(9,
										java.sql.Types.DATE);

							}

							if (row5.OFFICE_SHORT_NAME == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(10,
										java.sql.Types.VARCHAR);

							} else {

								pstmtUpdate_tMysqlOutput_5.setString(10,
										row5.OFFICE_SHORT_NAME);

							}

							pstmtUpdate_tMysqlOutput_5.setShort(11,
									row5.STATUS_ID);

							pstmtUpdate_tMysqlOutput_5.setInt(12,
									row5.VERSION_NO);

							if (row5.OFFICE_CODE_ID == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(13,
										java.sql.Types.INTEGER);

							} else {

								pstmtUpdate_tMysqlOutput_5.setShort(13,
										row5.OFFICE_CODE_ID);

							}

							if (row5.head_office_id == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(14,
										java.sql.Types.INTEGER);

							} else {

								pstmtUpdate_tMysqlOutput_5.setShort(14,
										row5.head_office_id);

							}

							if (row5.GLOBAL_OFFICE_NUM == null) {
								pstmtUpdate_tMysqlOutput_5.setNull(15,
										java.sql.Types.VARCHAR);

							} else {

								pstmtUpdate_tMysqlOutput_5.setString(15,
										row5.GLOBAL_OFFICE_NUM);

							}

							try {
								updateFlag_tMysqlOutput_5 = pstmtUpdate_tMysqlOutput_5
										.executeUpdate();
								updatedCount_tMysqlOutput_5 = updatedCount_tMysqlOutput_5
										+ updateFlag_tMysqlOutput_5;

							} catch (Exception e) {
								whetherReject_tMysqlOutput_5 = true;
								System.err.print(e.getMessage());
							}
							if (updateFlag_tMysqlOutput_5 == 0) {

								if (row5.GLOBAL_OFFICE_NUM == null) {
									pstmtInsert_tMysqlOutput_5.setNull(1,
											java.sql.Types.VARCHAR);

								} else {

									pstmtInsert_tMysqlOutput_5.setString(1,
											row5.GLOBAL_OFFICE_NUM);

								}

								pstmtInsert_tMysqlOutput_5.setShort(2,
										row5.OFFICE_LEVEL_ID);

								if (row5.SEARCH_ID == null) {
									pstmtInsert_tMysqlOutput_5.setNull(3,
											java.sql.Types.VARCHAR);

								} else {

									pstmtInsert_tMysqlOutput_5.setString(3,
											row5.SEARCH_ID);

								}

								pstmtInsert_tMysqlOutput_5.setInt(4,
										row5.MAX_CHILD_COUNT);

								pstmtInsert_tMysqlOutput_5.setShort(5,
										row5.LOCAL_REMOTE_FLAG);

								if (row5.DISPLAY_NAME == null) {
									pstmtInsert_tMysqlOutput_5.setNull(6,
											java.sql.Types.VARCHAR);

								} else {

									pstmtInsert_tMysqlOutput_5.setString(6,
											row5.DISPLAY_NAME);

								}

								if (row5.CREATED_BY == null) {
									pstmtInsert_tMysqlOutput_5.setNull(7,
											java.sql.Types.INTEGER);

								} else {

									pstmtInsert_tMysqlOutput_5.setShort(7,
											row5.CREATED_BY);

								}

								if (row5.CREATED_DATE != null) {
									// timestamp < min java date value (year 1)
									// || timestamp > max mysql value (year
									// 10000) => set 0000-00-00 as date in MySQL
									date_tMysqlOutput_5 = row5.CREATED_DATE
											.getTime();
									if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
											|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
										pstmtInsert_tMysqlOutput_5.setString(8,
												"0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_5
												.setTimestamp(
														8,
														new java.sql.Timestamp(
																date_tMysqlOutput_5));
									}
								} else {

									pstmtInsert_tMysqlOutput_5.setNull(8,
											java.sql.Types.DATE);

								}

								if (row5.UPDATED_BY == null) {
									pstmtInsert_tMysqlOutput_5.setNull(9,
											java.sql.Types.INTEGER);

								} else {

									pstmtInsert_tMysqlOutput_5.setShort(9,
											row5.UPDATED_BY);

								}

								if (row5.UPDATED_DATE != null) {
									// timestamp < min java date value (year 1)
									// || timestamp > max mysql value (year
									// 10000) => set 0000-00-00 as date in MySQL
									date_tMysqlOutput_5 = row5.UPDATED_DATE
											.getTime();
									if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
											|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
										pstmtInsert_tMysqlOutput_5.setString(
												10, "0000-00-00 00:00:00");
									} else {
										pstmtInsert_tMysqlOutput_5
												.setTimestamp(
														10,
														new java.sql.Timestamp(
																date_tMysqlOutput_5));
									}
								} else {

									pstmtInsert_tMysqlOutput_5.setNull(10,
											java.sql.Types.DATE);

								}

								if (row5.OFFICE_SHORT_NAME == null) {
									pstmtInsert_tMysqlOutput_5.setNull(11,
											java.sql.Types.VARCHAR);

								} else {

									pstmtInsert_tMysqlOutput_5.setString(11,
											row5.OFFICE_SHORT_NAME);

								}

								pstmtInsert_tMysqlOutput_5.setShort(12,
										row5.STATUS_ID);

								pstmtInsert_tMysqlOutput_5.setInt(13,
										row5.VERSION_NO);

								if (row5.OFFICE_CODE_ID == null) {
									pstmtInsert_tMysqlOutput_5.setNull(14,
											java.sql.Types.INTEGER);

								} else {

									pstmtInsert_tMysqlOutput_5.setShort(14,
											row5.OFFICE_CODE_ID);

								}

								if (row5.head_office_id == null) {
									pstmtInsert_tMysqlOutput_5.setNull(15,
											java.sql.Types.INTEGER);

								} else {

									pstmtInsert_tMysqlOutput_5.setShort(15,
											row5.head_office_id);

								}

								try {
									insertedCount_tMysqlOutput_5 = insertedCount_tMysqlOutput_5
											+ pstmtInsert_tMysqlOutput_5
													.executeUpdate();
								} catch (Exception e) {
									whetherReject_tMysqlOutput_5 = true;
									System.err.print(e.getMessage());
								}
							}
							nb_line_tMysqlOutput_5++;
							/**
							 * [tMysqlOutput_5 main ] stop
							 */

						} // End of branch "row4"

					} // End of branch "row10"

				} // End of branch "row2"

				/**
				 * [tMysqlInput_1 end ] start
				 */

				currentComponent = "tMysqlInput_1";

			}
			stmt_tMysqlInput_1.close();

			globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

			ok_Hash.put("tMysqlInput_1", true);
			end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

			/**
			 * [tMysqlInput_1 end ] stop
			 */
			/**
			 * [tFilterRow_1 end ] start
			 */

			currentComponent = "tFilterRow_1";

			globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
			globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);

			ok_Hash.put("tFilterRow_1", true);
			end_Hash.put("tFilterRow_1", System.currentTimeMillis());

			/**
			 * [tFilterRow_1 end ] stop
			 */
			/**
			 * [tFilterColumns_2 end ] start
			 */

			currentComponent = "tFilterColumns_2";

			ok_Hash.put("tFilterColumns_2", true);
			end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

			/**
			 * [tFilterColumns_2 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmtUpdate_tMysqlOutput_1 != null) {

				pstmtUpdate_tMysqlOutput_1.close();

			}
			if (pstmtInsert_tMysqlOutput_1 != null) {

				pstmtInsert_tMysqlOutput_1.close();

			}
			if (pstmt_tMysqlOutput_1 != null) {

				pstmt_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			/**
			 * [tMysqlOutput_1 end ] stop
			 */
			/**
			 * [tMysqlCommit_2 end ] start
			 */

			currentComponent = "tMysqlCommit_2";

			ok_Hash.put("tMysqlCommit_2", true);
			end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_2 end ] stop
			 */

			/**
			 * [tFilterRow_5 end ] start
			 */

			currentComponent = "tFilterRow_5";

			globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
			globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);

			ok_Hash.put("tFilterRow_5", true);
			end_Hash.put("tFilterRow_5", System.currentTimeMillis());

			/**
			 * [tFilterRow_5 end ] stop
			 */
			/**
			 * [tJoin_1 end ] start
			 */

			currentComponent = "tJoin_1";

			ok_Hash.put("tJoin_1", true);
			end_Hash.put("tJoin_1", System.currentTimeMillis());

			/**
			 * [tJoin_1 end ] stop
			 */
			/**
			 * [tFilterColumns_1 end ] start
			 */

			currentComponent = "tFilterColumns_1";

			ok_Hash.put("tFilterColumns_1", true);
			end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

			/**
			 * [tFilterColumns_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_5 end ] start
			 */

			currentComponent = "tMysqlOutput_5";

			if (pstmtUpdate_tMysqlOutput_5 != null) {

				pstmtUpdate_tMysqlOutput_5.close();

			}
			if (pstmtInsert_tMysqlOutput_5 != null) {

				pstmtInsert_tMysqlOutput_5.close();

			}

			nb_line_deleted_tMysqlOutput_5 = nb_line_deleted_tMysqlOutput_5
					+ deletedCount_tMysqlOutput_5;
			nb_line_update_tMysqlOutput_5 = nb_line_update_tMysqlOutput_5
					+ updatedCount_tMysqlOutput_5;
			nb_line_inserted_tMysqlOutput_5 = nb_line_inserted_tMysqlOutput_5
					+ insertedCount_tMysqlOutput_5;

			globalMap.put("tMysqlOutput_5_NB_LINE", nb_line_tMysqlOutput_5);
			globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_5);
			globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_5);
			globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_5);

			ok_Hash.put("tMysqlOutput_5", true);
			end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

			/**
			 * [tMysqlOutput_5 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		String currentComponent = "";
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class copyOfrow5Struct {

		java.util.Date moment;

		String pid;

		String root_pid;

		String father_pid;

		String project;

		String job;

		String context;

		Integer priority;

		String type;

		String origin;

		String message;

		Integer code;

	}

	public void tLogCatcher_1Process() throws TalendException {
		String currentComponent = "";
		try {

			copyOfrow5Struct copyOfrow5 = new copyOfrow5Struct();

			/**
			 * [tFileOutputDelimited_1 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_1", false);
			start_Hash
					.put("tFileOutputDelimited_1", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_1";

			String fileName_tFileOutputDelimited_1 = (new java.io.File(
					"regional_dimension.csv")).getAbsolutePath().replace("\\",
					"/");
			String fullName_tFileOutputDelimited_1 = null;
			String extension_tFileOutputDelimited_1 = null;
			String directory_tFileOutputDelimited_1 = null;
			if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
					extension_tFileOutputDelimited_1 = "";
				} else {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
					extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
						.substring(0, fileName_tFileOutputDelimited_1
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
					extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
					extension_tFileOutputDelimited_1 = "";
				}
				directory_tFileOutputDelimited_1 = "";
			}

			int nb_line_tFileOutputDelimited_1 = 0;
			int splitEvery_tFileOutputDelimited_1 = 1000;
			int splitedFileNo_tFileOutputDelimited_1 = 0;
			int currentRow_tFileOutputDelimited_1 = 0;

			final String OUT_DELIM_tFileOutputDelimited_1 = /**
															 * Start field
															 * tFileOutputDelimited_1:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_1:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_1 != null
					&& directory_tFileOutputDelimited_1.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
						directory_tFileOutputDelimited_1);
				if (!dir_tFileOutputDelimited_1.exists()) {
					dir_tFileOutputDelimited_1.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_1 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_1, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_1 = new java.io.File(
					fileName_tFileOutputDelimited_1);

			if (filetFileOutputDelimited_1.length() == 0) {

				outtFileOutputDelimited_1.write("moment");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("root_pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("father_pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("project");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("job");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("context");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("priority");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("type");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("origin");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("message");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("code");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
			}

			/**
			 * [tFileOutputDelimited_1 begin ] stop
			 */

			/**
			 * [tLogCatcher_1 begin ] start
			 */

			ok_Hash.put("tLogCatcher_1", false);
			start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
			currentComponent = "tLogCatcher_1";

			for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
					.getMessages()) {
				copyOfrow5.type = lcm.getType();
				copyOfrow5.origin = (lcm.getOrigin() == null
						|| lcm.getOrigin().length() < 1 ? null : lcm
						.getOrigin());
				copyOfrow5.priority = lcm.getPriority();
				copyOfrow5.message = lcm.getMessage();
				copyOfrow5.code = lcm.getCode();

				copyOfrow5.moment = java.util.Calendar.getInstance().getTime();

				copyOfrow5.pid = pid;
				copyOfrow5.root_pid = rootPid;
				copyOfrow5.father_pid = fatherPid;

				copyOfrow5.project = projectName;
				copyOfrow5.job = jobName;
				copyOfrow5.context = contextStr;

				/**
				 * [tLogCatcher_1 begin ] stop
				 */
				/**
				 * [tLogCatcher_1 main ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_1 main ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

				if (copyOfrow5.moment != null) {

					sb_tFileOutputDelimited_1.append(

					FormatterUtils.format_Date(copyOfrow5.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.pid != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.root_pid != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.root_pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.father_pid != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.father_pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.project != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.project

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.job != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.job

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.context != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.context

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.priority != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.priority

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.type != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.type

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.origin != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.origin

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.message != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.message

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (copyOfrow5.code != null) {

					sb_tFileOutputDelimited_1.append(

					copyOfrow5.code

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
						.toString());

				nb_line_tFileOutputDelimited_1++;

				/**
				 * [tFileOutputDelimited_1 main ] stop
				 */

				/**
				 * [tLogCatcher_1 end ] start
				 */

				currentComponent = "tLogCatcher_1";

			}

			ok_Hash.put("tLogCatcher_1", true);
			end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

			/**
			 * [tLogCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_1 end ] start
			 */

			currentComponent = "tFileOutputDelimited_1";

			outtFileOutputDelimited_1.close();
			globalMap.put("tFileOutputDelimited_1_NB_LINE",
					nb_line_tFileOutputDelimited_1);

			ok_Hash.put("tFileOutputDelimited_1", true);
			end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_1 end ] stop
			 */

			tJava_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row11Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short office_id;

		String global_office_num;

		short office_level_id;

		String search_id;

		int max_child_count;

		short local_remote_flag;

		String display_name;

		Short created_by;

		java.util.Date created_date;

		Short updated_by;

		java.util.Date updated_date;

		String office_short_name;

		short status_id;

		int version_no;

		Short office_code_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.office_id;

				result = prime
						* result
						+ ((this.global_office_num == null) ? 0
								: this.global_office_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.office_id != other.office_id)
				return false;

			if (this.global_office_num == null) {
				if (other.global_office_num != null)
					return false;
			} else if (!this.global_office_num.equals(other.global_office_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_2Process() throws TalendException {
		String currentComponent = "";
		try {

			row11Struct row11 = new row11Struct();

			/**
			 * [tHash_row11 begin ] start
			 */

			ok_Hash.put("tHash_row11", false);
			start_Hash.put("tHash_row11", System.currentTimeMillis());
			currentComponent = "tHash_row11";

			java.util.Map<row11Struct, row11Struct> tHash_row11 = new java.util.HashMap<row11Struct, row11Struct>();
			globalMap.put("tHash_row11", tHash_row11);

			/**
			 * [tHash_row11 begin ] stop
			 */

			/**
			 * [tMysqlInput_2 begin ] start
			 */

			ok_Hash.put("tMysqlInput_2", false);
			start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
			currentComponent = "tMysqlInput_2";

			int nb_line_tMysqlInput_2 = 0;
			java.sql.Connection conn_tMysqlInput_2 = null;
			conn_tMysqlInput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
					.executeQuery("SELECT head_office_dim.office_id, head_office_dim.global_office_num,  head_office_dim.office_level_id, head_office_dim.search_id, head_office_dim.max_child_count,  head_office_dim.local_remote_flag, head_office_dim.display_name, head_office_dim.created_by,  head_office_dim.created_date, head_office_dim.updated_by, head_office_dim.updated_date,  head_office_dim.office_short_name, head_office_dim.status_id, head_office_dim.version_no,  head_office_dim.office_code_id  FROM head_office_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
					.getMetaData();
			int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
					.getTime();

			globalMap
					.put(
							"tMysqlInput_2_QUERY",
							"SELECT head_office_dim.office_id, head_office_dim.global_office_num,  head_office_dim.office_level_id, head_office_dim.search_id, head_office_dim.max_child_count,  head_office_dim.local_remote_flag, head_office_dim.display_name, head_office_dim.created_by,  head_office_dim.created_date, head_office_dim.updated_by, head_office_dim.updated_date,  head_office_dim.office_short_name, head_office_dim.status_id, head_office_dim.version_no,  head_office_dim.office_code_id  FROM head_office_dim");

			while (rs_tMysqlInput_2.next()) {
				nb_line_tMysqlInput_2++;

				if (colQtyInRs_tMysqlInput_2 < 1) {

					row11.office_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(1) != null) {
						row11.office_id = rs_tMysqlInput_2.getShort(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 2) {

					row11.global_office_num = null;

				} else {

					if (rs_tMysqlInput_2.getObject(2) != null) {
						row11.global_office_num = rs_tMysqlInput_2.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 3) {

					row11.office_level_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(3) != null) {
						row11.office_level_id = rs_tMysqlInput_2.getShort(3);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 4) {

					row11.search_id = null;

				} else {

					if (rs_tMysqlInput_2.getObject(4) != null) {
						row11.search_id = rs_tMysqlInput_2.getString(4);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 5) {

					row11.max_child_count = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(5) != null) {
						row11.max_child_count = rs_tMysqlInput_2.getInt(5);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 6) {

					row11.local_remote_flag = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(6) != null) {
						row11.local_remote_flag = rs_tMysqlInput_2.getShort(6);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 7) {

					row11.display_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(7) != null) {
						row11.display_name = rs_tMysqlInput_2.getString(7);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 8) {

					row11.created_by = null;

				} else {

					if (rs_tMysqlInput_2.getObject(8) != null) {
						row11.created_by = rs_tMysqlInput_2.getShort(8);
					} else {

						row11.created_by = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 9) {

					row11.created_date = null;

				} else {

					if (rs_tMysqlInput_2.getString(9) != null) {
						String dateString_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(9);
						if (!dateString_tMysqlInput_2.equals("0000-00-00")
								&& !dateString_tMysqlInput_2
										.equals("0000-00-00 00:00:00")) {
							row11.created_date = rs_tMysqlInput_2
									.getTimestamp(9);
						} else {
							row11.created_date = (java.util.Date) year0_tMysqlInput_2
									.clone();
						}
					} else {
						row11.created_date = null;
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 10) {

					row11.updated_by = null;

				} else {

					if (rs_tMysqlInput_2.getObject(10) != null) {
						row11.updated_by = rs_tMysqlInput_2.getShort(10);
					} else {

						row11.updated_by = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 11) {

					row11.updated_date = null;

				} else {

					if (rs_tMysqlInput_2.getString(11) != null) {
						String dateString_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(11);
						if (!dateString_tMysqlInput_2.equals("0000-00-00")
								&& !dateString_tMysqlInput_2
										.equals("0000-00-00 00:00:00")) {
							row11.updated_date = rs_tMysqlInput_2
									.getTimestamp(11);
						} else {
							row11.updated_date = (java.util.Date) year0_tMysqlInput_2
									.clone();
						}
					} else {
						row11.updated_date = null;
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 12) {

					row11.office_short_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(12) != null) {
						row11.office_short_name = rs_tMysqlInput_2
								.getString(12);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 13) {

					row11.status_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(13) != null) {
						row11.status_id = rs_tMysqlInput_2.getShort(13);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 14) {

					row11.version_no = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(14) != null) {
						row11.version_no = rs_tMysqlInput_2.getInt(14);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 15) {

					row11.office_code_id = null;

				} else {

					if (rs_tMysqlInput_2.getObject(15) != null) {
						row11.office_code_id = rs_tMysqlInput_2.getShort(15);
					} else {

						row11.office_code_id = null;

					}

				}

				/**
				 * [tMysqlInput_2 begin ] stop
				 */
				/**
				 * [tMysqlInput_2 main ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 main ] stop
				 */

				/**
				 * [tHash_row11 main ] start
				 */

				currentComponent = "tHash_row11";

				row11Struct row11_HashRow = new row11Struct();

				row11_HashRow.office_id = row11.office_id;
				row11_HashRow.global_office_num = row11.global_office_num;
				row11_HashRow.office_level_id = row11.office_level_id;
				row11_HashRow.search_id = row11.search_id;
				row11_HashRow.max_child_count = row11.max_child_count;
				row11_HashRow.local_remote_flag = row11.local_remote_flag;
				row11_HashRow.display_name = row11.display_name;
				row11_HashRow.created_by = row11.created_by;
				row11_HashRow.created_date = row11.created_date;
				row11_HashRow.updated_by = row11.updated_by;
				row11_HashRow.updated_date = row11.updated_date;
				row11_HashRow.office_short_name = row11.office_short_name;
				row11_HashRow.status_id = row11.status_id;
				row11_HashRow.version_no = row11.version_no;
				row11_HashRow.office_code_id = row11.office_code_id;
				tHash_row11.put(row11_HashRow, row11_HashRow);

				/**
				 * [tHash_row11 main ] stop
				 */

				/**
				 * [tMysqlInput_2 end ] start
				 */

				currentComponent = "tMysqlInput_2";

			}
			stmt_tMysqlInput_2.close();

			globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

			ok_Hash.put("tMysqlInput_2", true);
			end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

			/**
			 * [tMysqlInput_2 end ] stop
			 */

			/**
			 * [tHash_row11 end ] start
			 */

			currentComponent = "tHash_row11";

			ok_Hash.put("tHash_row11", true);
			end_Hash.put("tHash_row11", System.currentTimeMillis());

			/**
			 * [tHash_row11 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class copyOfrow6Struct {

		java.util.Date moment;

		String pid;

		String father_pid;

		String root_pid;

		Long system_pid;

		String project;

		String job;

		String job_repository_id;

		String job_version;

		String context;

		String origin;

		String message_type;

		String message;

		Long duration;

	}

	public void tStatCatcher_1Process() throws TalendException {
		String currentComponent = "";
		try {

			copyOfrow6Struct copyOfrow6 = new copyOfrow6Struct();

			/**
			 * [tFileOutputDelimited_2 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_2", false);
			start_Hash
					.put("tFileOutputDelimited_2", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_2";

			String fileName_tFileOutputDelimited_2 = (new java.io.File(
					"regional_dimension_stats.csv")).getAbsolutePath().replace(
					"\\", "/");
			String fullName_tFileOutputDelimited_2 = null;
			String extension_tFileOutputDelimited_2 = null;
			String directory_tFileOutputDelimited_2 = null;
			if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
						.substring(0, fileName_tFileOutputDelimited_2
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				}
				directory_tFileOutputDelimited_2 = "";
			}

			int nb_line_tFileOutputDelimited_2 = 0;
			int splitEvery_tFileOutputDelimited_2 = 1000;
			int splitedFileNo_tFileOutputDelimited_2 = 0;
			int currentRow_tFileOutputDelimited_2 = 0;

			final String OUT_DELIM_tFileOutputDelimited_2 = /**
															 * Start field
															 * tFileOutputDelimited_2:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_2:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_2 != null
					&& directory_tFileOutputDelimited_2.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
						directory_tFileOutputDelimited_2);
				if (!dir_tFileOutputDelimited_2.exists()) {
					dir_tFileOutputDelimited_2.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_2, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_2 = new java.io.File(
					fileName_tFileOutputDelimited_2);

			if (filetFileOutputDelimited_2.length() == 0) {

				outtFileOutputDelimited_2.write("moment");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("father_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("root_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("system_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("project");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job_repository_id");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job_version");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("context");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("origin");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("message_type");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("message");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("duration");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
			}

			/**
			 * [tFileOutputDelimited_2 begin ] stop
			 */

			/**
			 * [tStatCatcher_1 begin ] start
			 */

			ok_Hash.put("tStatCatcher_1", false);
			start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
			currentComponent = "tStatCatcher_1";

			for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
					.getMessages()) {
				copyOfrow6.pid = pid;
				copyOfrow6.root_pid = rootPid;
				copyOfrow6.father_pid = fatherPid;
				copyOfrow6.project = projectName;
				copyOfrow6.job = jobName;
				copyOfrow6.context = contextStr;
				copyOfrow6.origin = (scm.getOrigin() == null
						|| scm.getOrigin().length() < 1 ? null : scm
						.getOrigin());
				copyOfrow6.message = scm.getMessage();
				copyOfrow6.duration = scm.getDuration();
				copyOfrow6.moment = scm.getMoment();
				copyOfrow6.message_type = scm.getMessageType();
				copyOfrow6.job_version = scm.getJobVersion();
				copyOfrow6.job_repository_id = scm.getJobId();
				copyOfrow6.system_pid = scm.getSystemPid();

				/**
				 * [tStatCatcher_1 begin ] stop
				 */
				/**
				 * [tStatCatcher_1 main ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_2 main ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

				if (copyOfrow6.moment != null) {

					sb_tFileOutputDelimited_2.append(

					FormatterUtils.format_Date(copyOfrow6.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.pid != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.father_pid != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.father_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.root_pid != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.root_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.system_pid != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.system_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.project != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.project

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.job != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.job

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.job_repository_id != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.job_repository_id

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.job_version != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.job_version

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.context != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.context

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.origin != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.origin

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.message_type != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.message_type

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.message != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.message

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (copyOfrow6.duration != null) {

					sb_tFileOutputDelimited_2.append(

					copyOfrow6.duration

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
						.toString());

				nb_line_tFileOutputDelimited_2++;

				/**
				 * [tFileOutputDelimited_2 main ] stop
				 */

				/**
				 * [tStatCatcher_1 end ] start
				 */

				currentComponent = "tStatCatcher_1";

			}

			ok_Hash.put("tStatCatcher_1", true);
			end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

			tLogCatcher_1Process();
			/**
			 * [tStatCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_2 end ] start
			 */

			currentComponent = "tFileOutputDelimited_2";

			outtFileOutputDelimited_2.close();
			globalMap.put("tFileOutputDelimited_2_NB_LINE",
					nb_line_tFileOutputDelimited_2);

			ok_Hash.put("tFileOutputDelimited_2", true);
			end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;
	private static ThreadLocal threadLocal = new ThreadLocal();
	private static SyncInt runningThreadCount = new SyncInt();

	private static class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = RegionalOfficeLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/regionalofficeloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = RegionalOfficeLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/regionalofficeloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_NAME = (String) context.getProperty("OLTP_DB_NAME");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_HOST_NAME = (String) context.getProperty("OLTP_HOST_NAME");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_NAME = (String) context.getProperty("OLAP_DB_NAME");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

			GK_DB_HOST = (String) context.getProperty("GK_DB_HOST");

			GK_DB_PORT = (String) context.getProperty("GK_DB_PORT");

			GK_DB_SCHEMA = (String) context.getProperty("GK_DB_SCHEMA");

			GK_DB_USER = (String) context.getProperty("GK_DB_USER");

			GK_DB_PASSWORD = (String) context.getProperty("GK_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final RegionalOfficeLoader RegionalOfficeLoaderClass = new RegionalOfficeLoader();
		RegionalOfficeLoaderClass.tStatCatcher_1.addMessage("begin");
		try {
			RegionalOfficeLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		while (RegionalOfficeLoaderClass.runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		RegionalOfficeLoaderClass.tStatCatcher_1.addMessage(
				status == "" ? "end" : status, (end - start));
		try {
			RegionalOfficeLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		threadLocal = new ThreadLocal();
		runningThreadCount = new SyncInt();
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 120256 characters generated by Talend OpenStudio on the March 14, 2008
 * 2:17:06 PM GMT
 ******************************************************************************/
