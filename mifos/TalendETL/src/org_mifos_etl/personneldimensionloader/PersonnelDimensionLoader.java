// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.personneldimensionloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: PersonnelDimensionLoader Purpose: Load the MFI personnel information<br>
 * Description: Reads and lods the personnel information from personnel table.
 * <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class PersonnelDimensionLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String OLTP_DB_HOST;
	private static String OLTP_DB_PORT;
	private static String OLTP_DB_SCHEMA;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_PASSWORD;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_SCHEMA;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static final String jobName = "PersonnelDimensionLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_J4P_YPc9EdyTt9FnTx9M1w", "0.1");

	private class TalendException extends Exception {
		private Exception e = null;
		private PersonnelDimensionLoader c = null;

		private TalendException(PersonnelDimensionLoader c, Exception e) {
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}
					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getMessage(), 1);
						tLogCatcher_1Process();
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tJava_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());
		tJava_1_onSubJobError(exception);
	}

	public void tMysqlConnection_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
		tMysqlConnection_2_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tMysqlInput_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tUnite_1_error(Exception exception) throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMap_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tLogCatcher_1_error(Exception exception) throws TalendException {
		end_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_3_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tMysqlInput_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tMysqlInput_3_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tStatCatcher_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tAdvancedHash_row4_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tJava_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tLogCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_3_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tStatCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_1Process() throws TalendException {
		try {

			/**
			 * [tJava_1 begin ] start
			 */

			ok_Hash.put("tJava_1", false);
			start_Hash.put("tJava_1", System.currentTimeMillis());
			currentComponent = "tJava_1";

			java.util.Properties p = new java.util.Properties();

			java.io.InputStream inStream = this.getClass().getClassLoader()
					.getResourceAsStream("hibernate.properties");

			p.load(inStream);
			OLTP_DB_PASSWORD = (String) p.get("OLTP_DB_PASSWORD");
			OLTP_DB_USER = (String) p.get("OLTP_DB_USER");
			OLTP_DB_SCHEMA = (String) p.get("OLTP_DB_NAME");
			OLTP_DB_PORT = (String) p.get("OLTP_DB_PORT");
			OLTP_DB_HOST = (String) p.get("OLTP_HOST_NAME");
			OLAP_DB_HOST = (String) p.get("OLAP_DB_HOST");
			OLAP_DB_PORT = (String) p.get("OLAP_DB_PORT");
			OLAP_DB_SCHEMA = (String) p.get("OLAP_DB_NAME");
			OLAP_DB_USER = (String) p.get("OLAP_DB_USER");
			OLAP_DB_PASSWORD = (String) p.get("OLAP_DB_PASSWORD");

			/**
			 * [tJava_1 begin ] stop
			 */
			/**
			 * [tJava_1 main ] start
			 */

			currentComponent = "tJava_1";

			/**
			 * [tJava_1 main ] stop
			 */

			/**
			 * [tJava_1 end ] start
			 */

			currentComponent = "tJava_1";

			ok_Hash.put("tJava_1", true);
			end_Hash.put("tJava_1", System.currentTimeMillis());

			/**
			 * [tJava_1 end ] stop
			 */

			tMysqlConnection_2Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_2Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_2 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_2", false);
			start_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_2";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_2 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_2 = OLAP_DB_USER;

			String password_tMysqlConnection_2 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_2 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_2,
							userName_tMysqlConnection_2,
							password_tMysqlConnection_2);

			conn_tMysqlConnection_2.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_2",
					conn_tMysqlConnection_2);

			/**
			 * [tMysqlConnection_2 begin ] stop
			 */
			/**
			 * [tMysqlConnection_2 main ] start
			 */

			currentComponent = "tMysqlConnection_2";

			/**
			 * [tMysqlConnection_2 main ] stop
			 */

			/**
			 * [tMysqlConnection_2 end ] start
			 */

			currentComponent = "tMysqlConnection_2";

			ok_Hash.put("tMysqlConnection_2", true);
			end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_2 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + OLTP_DB_HOST
					+ ":" + OLTP_DB_PORT + "/" + OLTP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = OLTP_DB_USER;

			String password_tMysqlConnection_1 = OLTP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tMysqlInput_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class loan_officer_dimStruct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String global_personnel_num;

		String display_name;

		String first_name;

		String middle_name;

		String second_last_name;

		String last_name;

		Short marital_status;

		Short gender;

		String city;

		String state;

		String country;

		String description;

		short branch_office_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_personnel_num == null) ? 0
								: this.global_personnel_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loan_officer_dimStruct other = (loan_officer_dimStruct) obj;

			if (this.global_personnel_num == null) {
				if (other.global_personnel_num != null)
					return false;
			} else if (!this.global_personnel_num
					.equals(other.global_personnel_num))
				return false;

			return true;
		}

	}

	private class row2Struct {

		short personnel_id;

		String global_office_num;

		String global_personnel_num;

		String display_name;

		String first_name;

		String middle_name;

		String second_last_name;

		String last_name;

		Short marital_status;

		Short gender;

		String city;

		String state;

		String country;

		String description;

	}

	private class row1Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short personnel_id;

		String global_office_num;

		String global_personnel_num;

		String display_name;

		String first_name;

		String middle_name;

		String second_last_name;

		String last_name;

		Short marital_status;

		Short gender;

		String city;

		String state;

		String country;

		String description;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.personnel_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.personnel_id != other.personnel_id)
				return false;

			return true;
		}

	}

	private class after_tMysqlInput_1Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short personnel_id;

		String global_office_num;

		String global_personnel_num;

		String display_name;

		String first_name;

		String middle_name;

		String second_last_name;

		String last_name;

		Short marital_status;

		Short gender;

		String city;

		String state;

		String country;

		String description;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.personnel_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_1Struct other = (after_tMysqlInput_1Struct) obj;

			if (this.personnel_id != other.personnel_id)
				return false;

			return true;
		}

	}

	private class row3Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short personnel_id;

		String global_office_num;

		String global_personnel_num;

		String display_name;

		String first_name;

		String middle_name;

		String second_last_name;

		String last_name;

		Short marital_status;

		Short gender;

		String city;

		String state;

		String country;

		String description;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.personnel_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.personnel_id != other.personnel_id)
				return false;

			return true;
		}

	}

	public void tMysqlInput_1Process() throws TalendException {
		try {
			tMysqlInput_3Process();

			row1Struct row1 = new row1Struct();

			row3Struct row3 = new row3Struct();

			row2Struct row2 = new row2Struct();
			loan_officer_dimStruct loan_officer_dim = new loan_officer_dimStruct();

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int keyCount_tMysqlOutput_1 = 1;
			if (keyCount_tMysqlOutput_1 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "loan_officer_dim";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("UPDATE `"
							+ "loan_officer_dim"
							+ "` SET `display_name` = ?,`first_name` = ?,`middle_name` = ?,`second_last_name` = ?,`last_name` = ?,`marital_status` = ?,`gender` = ?,`city` = ?,`state` = ?,`country` = ?,`description` = ?,`branch_office_id` = ? WHERE `global_personnel_num` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `"
							+ "loan_officer_dim"
							+ "` (`global_personnel_num`,`display_name`,`first_name`,`middle_name`,`second_last_name`,`last_name`,`marital_status`,`gender`,`city`,`state`,`country`,`description`,`branch_office_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tMap_1 begin ] start
			 */

			ok_Hash.put("tMap_1", false);
			start_Hash.put("tMap_1", System.currentTimeMillis());
			currentComponent = "tMap_1";

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.commons.AdvancedLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.commons.AdvancedLookup<row4Struct>) globalMap
					.get("tHash_Lookup_row4");
			row4Struct row4HashKey = new row4Struct();
			row4Struct row4Default = new row4Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			// ###############################

			// ###############################
			// # Outputs initialization
			loan_officer_dimStruct loan_officer_dim_tmp = new loan_officer_dimStruct();
			// ###############################

			/**
			 * [tMap_1 begin ] stop
			 */

			/**
			 * [tUnite_1 begin ] start
			 */

			ok_Hash.put("tUnite_1", false);
			start_Hash.put("tUnite_1", System.currentTimeMillis());
			currentComponent = "tUnite_1";

			int nb_line_tUnite_1 = 0;

			/**
			 * [tUnite_1 begin ] stop
			 */

			/**
			 * [tMysqlInput_1 begin ] start
			 */

			ok_Hash.put("tMysqlInput_1", false);
			start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
			currentComponent = "tMysqlInput_1";

			int nb_line_tMysqlInput_1 = 0;
			java.sql.Connection conn_tMysqlInput_1 = null;
			conn_tMysqlInput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
					.executeQuery("select p.personnel_id, o.global_office_num, p.global_personnel_num, p.display_name, pd.first_name, pd.middle_name, pd.second_last_name, pd.last_name, pd.marital_status, pd.gender, pd.city, pd.state, pd.country, e.description from personnel p, personnel_details pd, lookup_value l, lookup_entity e, office o where p.personnel_id = pd.personnel_id and p.title = l.lookup_id and l.entity_id = e.entity_id and p.office_id = o.office_id and o.office_level_id = 5");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
					.getMetaData();
			int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
					.getTime();

			globalMap
					.put(
							"tMysqlInput_1_QUERY",
							"select p.personnel_id, o.global_office_num, p.global_personnel_num, p.display_name, pd.first_name, pd.middle_name, pd.second_last_name, pd.last_name, pd.marital_status, pd.gender, pd.city, pd.state, pd.country, e.description from personnel p, personnel_details pd, lookup_value l, lookup_entity e, office o where p.personnel_id = pd.personnel_id and p.title = l.lookup_id and l.entity_id = e.entity_id and p.office_id = o.office_id and o.office_level_id = 5");

			while (rs_tMysqlInput_1.next()) {
				nb_line_tMysqlInput_1++;

				if (colQtyInRs_tMysqlInput_1 < 1) {

					row1.personnel_id = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(1) != null) {
						row1.personnel_id = rs_tMysqlInput_1.getShort(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 2) {

					row1.global_office_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(2) != null) {
						row1.global_office_num = rs_tMysqlInput_1.getString(2);
					} else {

						row1.global_office_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 3) {

					row1.global_personnel_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(3) != null) {
						row1.global_personnel_num = rs_tMysqlInput_1
								.getString(3);
					} else {

						row1.global_personnel_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 4) {

					row1.display_name = null;

				} else {

					if (rs_tMysqlInput_1.getObject(4) != null) {
						row1.display_name = rs_tMysqlInput_1.getString(4);
					} else {

						row1.display_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 5) {

					row1.first_name = null;

				} else {

					if (rs_tMysqlInput_1.getObject(5) != null) {
						row1.first_name = rs_tMysqlInput_1.getString(5);
					} else {

						row1.first_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 6) {

					row1.middle_name = null;

				} else {

					if (rs_tMysqlInput_1.getObject(6) != null) {
						row1.middle_name = rs_tMysqlInput_1.getString(6);
					} else {

						row1.middle_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 7) {

					row1.second_last_name = null;

				} else {

					if (rs_tMysqlInput_1.getObject(7) != null) {
						row1.second_last_name = rs_tMysqlInput_1.getString(7);
					} else {

						row1.second_last_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 8) {

					row1.last_name = null;

				} else {

					if (rs_tMysqlInput_1.getObject(8) != null) {
						row1.last_name = rs_tMysqlInput_1.getString(8);
					} else {

						row1.last_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 9) {

					row1.marital_status = null;

				} else {

					if (rs_tMysqlInput_1.getObject(9) != null) {
						row1.marital_status = rs_tMysqlInput_1.getShort(9);
					} else {

						row1.marital_status = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 10) {

					row1.gender = null;

				} else {

					if (rs_tMysqlInput_1.getObject(10) != null) {
						row1.gender = rs_tMysqlInput_1.getShort(10);
					} else {

						row1.gender = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 11) {

					row1.city = null;

				} else {

					if (rs_tMysqlInput_1.getObject(11) != null) {
						row1.city = rs_tMysqlInput_1.getString(11);
					} else {

						row1.city = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 12) {

					row1.state = null;

				} else {

					if (rs_tMysqlInput_1.getObject(12) != null) {
						row1.state = rs_tMysqlInput_1.getString(12);
					} else {

						row1.state = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 13) {

					row1.country = null;

				} else {

					if (rs_tMysqlInput_1.getObject(13) != null) {
						row1.country = rs_tMysqlInput_1.getString(13);
					} else {

						row1.country = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 14) {

					row1.description = null;

				} else {

					if (rs_tMysqlInput_1.getObject(14) != null) {
						row1.description = rs_tMysqlInput_1.getString(14);
					} else {

						row1.description = null;

					}

				}

				/**
				 * [tMysqlInput_1 begin ] stop
				 */
				/**
				 * [tMysqlInput_1 main ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 main ] stop
				 */
				/**
				 * [tUnite_1 main ] start
				 */

				currentComponent = "tUnite_1";

				// ////////

				// for output
				row2 = new row2Struct();

				row2.personnel_id = row1.personnel_id;
				row2.global_office_num = row1.global_office_num;
				row2.global_personnel_num = row1.global_personnel_num;
				row2.display_name = row1.display_name;
				row2.first_name = row1.first_name;
				row2.middle_name = row1.middle_name;
				row2.second_last_name = row1.second_last_name;
				row2.last_name = row1.last_name;
				row2.marital_status = row1.marital_status;
				row2.gender = row1.gender;
				row2.city = row1.city;
				row2.state = row1.state;
				row2.country = row1.country;
				row2.description = row1.description;

				nb_line_tUnite_1++;

				// ////////
				/**
				 * [tUnite_1 main ] stop
				 */
				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				boolean rejectedInnerJoin_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)

				row4HashKey.global_office_num = row2.global_office_num;

				row4Struct row4ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row4HashKey.hashCodeDirty = true;
					tHash_Lookup_row4.get(row4HashKey);

					if (tHash_Lookup_row4.hasResult()) { // G 90

						row4ObjectFromLookup = (row4Struct) tHash_Lookup_row4
								.getResultObject();

					} // G 90
					else { // G 91

					} // G 91

				} // G 20

				if (tHash_Lookup_row4.getCount(row4HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.global_office_num = '"
									+ row4HashKey.global_office_num + "'");
				}

				row4Struct fromLookup_row4 = null;
				row4Struct row4 = row4Default;

				if (row4ObjectFromLookup != null) {

					fromLookup_row4 = row4ObjectFromLookup;
					row4 = fromLookup_row4;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					// ###############################

					// ###############################
					// # Output tables
					loan_officer_dim = null;

					// # Output table : 'loan_officer_dim'
					loan_officer_dim_tmp.global_personnel_num = row2.global_personnel_num;
					loan_officer_dim_tmp.display_name = row2.display_name;
					loan_officer_dim_tmp.first_name = row2.first_name;
					loan_officer_dim_tmp.middle_name = row2.middle_name;
					loan_officer_dim_tmp.second_last_name = row2.second_last_name;
					loan_officer_dim_tmp.last_name = row2.last_name;
					loan_officer_dim_tmp.marital_status = row2.marital_status;
					loan_officer_dim_tmp.gender = row2.gender;
					loan_officer_dim_tmp.city = row2.city;
					loan_officer_dim_tmp.state = row2.state;
					loan_officer_dim_tmp.country = row2.country;
					loan_officer_dim_tmp.description = row2.description;
					loan_officer_dim_tmp.branch_office_id = row4.office_id;
					loan_officer_dim = loan_officer_dim_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				/**
				 * [tMap_1 main ] stop
				 */
				// Start of branch "loan_officer_dim"
				if (loan_officer_dim != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;
					int updateFlag_tMysqlOutput_1 = 0;

					if (loan_officer_dim.display_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(1,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(1,
								loan_officer_dim.display_name);

					}

					if (loan_officer_dim.first_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(2,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(2,
								loan_officer_dim.first_name);

					}

					if (loan_officer_dim.middle_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(3,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(3,
								loan_officer_dim.middle_name);

					}

					if (loan_officer_dim.second_last_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(4,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(4,
								loan_officer_dim.second_last_name);

					}

					if (loan_officer_dim.last_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(5,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(5,
								loan_officer_dim.last_name);

					}

					if (loan_officer_dim.marital_status == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(6,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(6,
								loan_officer_dim.marital_status);

					}

					if (loan_officer_dim.gender == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(7,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(7,
								loan_officer_dim.gender);

					}

					if (loan_officer_dim.city == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(8,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(8,
								loan_officer_dim.city);

					}

					if (loan_officer_dim.state == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(9,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(9,
								loan_officer_dim.state);

					}

					if (loan_officer_dim.country == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(10,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(10,
								loan_officer_dim.country);

					}

					if (loan_officer_dim.description == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(11,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(11,
								loan_officer_dim.description);

					}

					pstmtUpdate_tMysqlOutput_1.setShort(12,
							loan_officer_dim.branch_office_id);

					if (loan_officer_dim.global_personnel_num == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(13,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(13,
								loan_officer_dim.global_personnel_num);

					}

					try {
						updateFlag_tMysqlOutput_1 = pstmtUpdate_tMysqlOutput_1
								.executeUpdate();
						updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
								+ updateFlag_tMysqlOutput_1;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_1 == 0) {

						if (loan_officer_dim.global_personnel_num == null) {
							pstmtInsert_tMysqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(1,
									loan_officer_dim.global_personnel_num);

						}

						if (loan_officer_dim.display_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(2,
									loan_officer_dim.display_name);

						}

						if (loan_officer_dim.first_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(3,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(3,
									loan_officer_dim.first_name);

						}

						if (loan_officer_dim.middle_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(4,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(4,
									loan_officer_dim.middle_name);

						}

						if (loan_officer_dim.second_last_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(5,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(5,
									loan_officer_dim.second_last_name);

						}

						if (loan_officer_dim.last_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(6,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(6,
									loan_officer_dim.last_name);

						}

						if (loan_officer_dim.marital_status == null) {
							pstmtInsert_tMysqlOutput_1.setNull(7,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(7,
									loan_officer_dim.marital_status);

						}

						if (loan_officer_dim.gender == null) {
							pstmtInsert_tMysqlOutput_1.setNull(8,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(8,
									loan_officer_dim.gender);

						}

						if (loan_officer_dim.city == null) {
							pstmtInsert_tMysqlOutput_1.setNull(9,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(9,
									loan_officer_dim.city);

						}

						if (loan_officer_dim.state == null) {
							pstmtInsert_tMysqlOutput_1.setNull(10,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(10,
									loan_officer_dim.state);

						}

						if (loan_officer_dim.country == null) {
							pstmtInsert_tMysqlOutput_1.setNull(11,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(11,
									loan_officer_dim.country);

						}

						if (loan_officer_dim.description == null) {
							pstmtInsert_tMysqlOutput_1.setNull(12,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(12,
									loan_officer_dim.description);

						}

						pstmtInsert_tMysqlOutput_1.setShort(13,
								loan_officer_dim.branch_office_id);

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					if (!whetherReject_tMysqlOutput_1) {
					}
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "loan_officer_dim"

				/**
				 * [tMysqlInput_1 end ] start
				 */

				currentComponent = "tMysqlInput_1";

			}
			stmt_tMysqlInput_1.close();

			globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

			ok_Hash.put("tMysqlInput_1", true);
			end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

			/**
			 * [tMysqlInput_1 end ] stop
			 */

			/**
			 * [tMysqlInput_2 begin ] start
			 */

			ok_Hash.put("tMysqlInput_2", false);
			start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
			currentComponent = "tMysqlInput_2";

			int nb_line_tMysqlInput_2 = 0;
			java.sql.Connection conn_tMysqlInput_2 = null;
			conn_tMysqlInput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
					.executeQuery("select p.personnel_id, o.global_office_num, p.global_personnel_num, p.display_name, pd.first_name, pd.middle_name, pd.second_last_name, pd.last_name, pd.marital_status, pd.gender, pd.city, pd.state, pd.country, p.title from personnel p, personnel_details pd, office o where p.personnel_id = pd.personnel_id and p.title is null and p.office_id = o.office_id and o.office_level_id = 5");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
					.getMetaData();
			int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
					.getTime();

			globalMap
					.put(
							"tMysqlInput_2_QUERY",
							"select p.personnel_id, o.global_office_num, p.global_personnel_num, p.display_name, pd.first_name, pd.middle_name, pd.second_last_name, pd.last_name, pd.marital_status, pd.gender, pd.city, pd.state, pd.country, p.title from personnel p, personnel_details pd, office o where p.personnel_id = pd.personnel_id and p.title is null and p.office_id = o.office_id and o.office_level_id = 5");

			while (rs_tMysqlInput_2.next()) {
				nb_line_tMysqlInput_2++;

				if (colQtyInRs_tMysqlInput_2 < 1) {

					row3.personnel_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(1) != null) {
						row3.personnel_id = rs_tMysqlInput_2.getShort(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 2) {

					row3.global_office_num = null;

				} else {

					if (rs_tMysqlInput_2.getObject(2) != null) {
						row3.global_office_num = rs_tMysqlInput_2.getString(2);
					} else {

						row3.global_office_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 3) {

					row3.global_personnel_num = null;

				} else {

					if (rs_tMysqlInput_2.getObject(3) != null) {
						row3.global_personnel_num = rs_tMysqlInput_2
								.getString(3);
					} else {

						row3.global_personnel_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 4) {

					row3.display_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(4) != null) {
						row3.display_name = rs_tMysqlInput_2.getString(4);
					} else {

						row3.display_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 5) {

					row3.first_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(5) != null) {
						row3.first_name = rs_tMysqlInput_2.getString(5);
					} else {

						row3.first_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 6) {

					row3.middle_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(6) != null) {
						row3.middle_name = rs_tMysqlInput_2.getString(6);
					} else {

						row3.middle_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 7) {

					row3.second_last_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(7) != null) {
						row3.second_last_name = rs_tMysqlInput_2.getString(7);
					} else {

						row3.second_last_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 8) {

					row3.last_name = null;

				} else {

					if (rs_tMysqlInput_2.getObject(8) != null) {
						row3.last_name = rs_tMysqlInput_2.getString(8);
					} else {

						row3.last_name = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 9) {

					row3.marital_status = null;

				} else {

					if (rs_tMysqlInput_2.getObject(9) != null) {
						row3.marital_status = rs_tMysqlInput_2.getShort(9);
					} else {

						row3.marital_status = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 10) {

					row3.gender = null;

				} else {

					if (rs_tMysqlInput_2.getObject(10) != null) {
						row3.gender = rs_tMysqlInput_2.getShort(10);
					} else {

						row3.gender = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 11) {

					row3.city = null;

				} else {

					if (rs_tMysqlInput_2.getObject(11) != null) {
						row3.city = rs_tMysqlInput_2.getString(11);
					} else {

						row3.city = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 12) {

					row3.state = null;

				} else {

					if (rs_tMysqlInput_2.getObject(12) != null) {
						row3.state = rs_tMysqlInput_2.getString(12);
					} else {

						row3.state = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 13) {

					row3.country = null;

				} else {

					if (rs_tMysqlInput_2.getObject(13) != null) {
						row3.country = rs_tMysqlInput_2.getString(13);
					} else {

						row3.country = null;

					}

				}

				if (colQtyInRs_tMysqlInput_2 < 14) {

					row3.description = null;

				} else {

					if (rs_tMysqlInput_2.getObject(14) != null) {
						row3.description = rs_tMysqlInput_2.getString(14);
					} else {

						row3.description = null;

					}

				}

				/**
				 * [tMysqlInput_2 begin ] stop
				 */
				/**
				 * [tMysqlInput_2 main ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 main ] stop
				 */
				/**
				 * [tUnite_1 main ] start
				 */

				currentComponent = "tUnite_1";

				// ////////

				// for output
				row2 = new row2Struct();

				row2.personnel_id = row3.personnel_id;
				row2.global_office_num = row3.global_office_num;
				row2.global_personnel_num = row3.global_personnel_num;
				row2.display_name = row3.display_name;
				row2.first_name = row3.first_name;
				row2.middle_name = row3.middle_name;
				row2.second_last_name = row3.second_last_name;
				row2.last_name = row3.last_name;
				row2.marital_status = row3.marital_status;
				row2.gender = row3.gender;
				row2.city = row3.city;
				row2.state = row3.state;
				row2.country = row3.country;
				row2.description = row3.description;

				nb_line_tUnite_1++;

				// ////////
				/**
				 * [tUnite_1 main ] stop
				 */
				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				boolean rejectedInnerJoin_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)

				row4HashKey.global_office_num = row2.global_office_num;

				row4Struct row4ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row4HashKey.hashCodeDirty = true;
					tHash_Lookup_row4.get(row4HashKey);

					if (tHash_Lookup_row4.hasResult()) { // G 90

						row4ObjectFromLookup = (row4Struct) tHash_Lookup_row4
								.getResultObject();

					} // G 90
					else { // G 91

					} // G 91

				} // G 20

				if (tHash_Lookup_row4.getCount(row4HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.global_office_num = '"
									+ row4HashKey.global_office_num + "'");
				}

				row4Struct fromLookup_row4 = null;
				row4Struct row4 = row4Default;

				if (row4ObjectFromLookup != null) {

					fromLookup_row4 = row4ObjectFromLookup;
					row4 = fromLookup_row4;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					// ###############################

					// ###############################
					// # Output tables
					loan_officer_dim = null;

					// # Output table : 'loan_officer_dim'
					loan_officer_dim_tmp.global_personnel_num = row2.global_personnel_num;
					loan_officer_dim_tmp.display_name = row2.display_name;
					loan_officer_dim_tmp.first_name = row2.first_name;
					loan_officer_dim_tmp.middle_name = row2.middle_name;
					loan_officer_dim_tmp.second_last_name = row2.second_last_name;
					loan_officer_dim_tmp.last_name = row2.last_name;
					loan_officer_dim_tmp.marital_status = row2.marital_status;
					loan_officer_dim_tmp.gender = row2.gender;
					loan_officer_dim_tmp.city = row2.city;
					loan_officer_dim_tmp.state = row2.state;
					loan_officer_dim_tmp.country = row2.country;
					loan_officer_dim_tmp.description = row2.description;
					loan_officer_dim_tmp.branch_office_id = row4.office_id;
					loan_officer_dim = loan_officer_dim_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				/**
				 * [tMap_1 main ] stop
				 */
				// Start of branch "loan_officer_dim"
				if (loan_officer_dim != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;
					int updateFlag_tMysqlOutput_1 = 0;

					if (loan_officer_dim.display_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(1,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(1,
								loan_officer_dim.display_name);

					}

					if (loan_officer_dim.first_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(2,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(2,
								loan_officer_dim.first_name);

					}

					if (loan_officer_dim.middle_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(3,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(3,
								loan_officer_dim.middle_name);

					}

					if (loan_officer_dim.second_last_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(4,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(4,
								loan_officer_dim.second_last_name);

					}

					if (loan_officer_dim.last_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(5,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(5,
								loan_officer_dim.last_name);

					}

					if (loan_officer_dim.marital_status == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(6,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(6,
								loan_officer_dim.marital_status);

					}

					if (loan_officer_dim.gender == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(7,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(7,
								loan_officer_dim.gender);

					}

					if (loan_officer_dim.city == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(8,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(8,
								loan_officer_dim.city);

					}

					if (loan_officer_dim.state == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(9,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(9,
								loan_officer_dim.state);

					}

					if (loan_officer_dim.country == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(10,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(10,
								loan_officer_dim.country);

					}

					if (loan_officer_dim.description == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(11,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(11,
								loan_officer_dim.description);

					}

					pstmtUpdate_tMysqlOutput_1.setShort(12,
							loan_officer_dim.branch_office_id);

					if (loan_officer_dim.global_personnel_num == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(13,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(13,
								loan_officer_dim.global_personnel_num);

					}

					try {
						updateFlag_tMysqlOutput_1 = pstmtUpdate_tMysqlOutput_1
								.executeUpdate();
						updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
								+ updateFlag_tMysqlOutput_1;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_1 == 0) {

						if (loan_officer_dim.global_personnel_num == null) {
							pstmtInsert_tMysqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(1,
									loan_officer_dim.global_personnel_num);

						}

						if (loan_officer_dim.display_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(2,
									loan_officer_dim.display_name);

						}

						if (loan_officer_dim.first_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(3,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(3,
									loan_officer_dim.first_name);

						}

						if (loan_officer_dim.middle_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(4,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(4,
									loan_officer_dim.middle_name);

						}

						if (loan_officer_dim.second_last_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(5,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(5,
									loan_officer_dim.second_last_name);

						}

						if (loan_officer_dim.last_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(6,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(6,
									loan_officer_dim.last_name);

						}

						if (loan_officer_dim.marital_status == null) {
							pstmtInsert_tMysqlOutput_1.setNull(7,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(7,
									loan_officer_dim.marital_status);

						}

						if (loan_officer_dim.gender == null) {
							pstmtInsert_tMysqlOutput_1.setNull(8,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(8,
									loan_officer_dim.gender);

						}

						if (loan_officer_dim.city == null) {
							pstmtInsert_tMysqlOutput_1.setNull(9,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(9,
									loan_officer_dim.city);

						}

						if (loan_officer_dim.state == null) {
							pstmtInsert_tMysqlOutput_1.setNull(10,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(10,
									loan_officer_dim.state);

						}

						if (loan_officer_dim.country == null) {
							pstmtInsert_tMysqlOutput_1.setNull(11,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(11,
									loan_officer_dim.country);

						}

						if (loan_officer_dim.description == null) {
							pstmtInsert_tMysqlOutput_1.setNull(12,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(12,
									loan_officer_dim.description);

						}

						pstmtInsert_tMysqlOutput_1.setShort(13,
								loan_officer_dim.branch_office_id);

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					if (!whetherReject_tMysqlOutput_1) {
					}
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "loan_officer_dim"

				/**
				 * [tMysqlInput_2 end ] start
				 */

				currentComponent = "tMysqlInput_2";

			}
			stmt_tMysqlInput_2.close();

			globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

			ok_Hash.put("tMysqlInput_2", true);
			end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

			/**
			 * [tMysqlInput_2 end ] stop
			 */
			/**
			 * [tUnite_1 end ] start
			 */

			currentComponent = "tUnite_1";

			globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

			ok_Hash.put("tUnite_1", true);
			end_Hash.put("tUnite_1", System.currentTimeMillis());

			/**
			 * [tUnite_1 end ] stop
			 */
			/**
			 * [tMap_1 end ] start
			 */

			currentComponent = "tMap_1";

			// ###############################
			// # Lookup hashes releasing
			globalMap.remove("tHash_row4");
			// ###############################

			ok_Hash.put("tMap_1", true);
			end_Hash.put("tMap_1", System.currentTimeMillis());

			/**
			 * [tMap_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmtUpdate_tMysqlOutput_1 != null) {

				pstmtUpdate_tMysqlOutput_1.close();

			}
			if (pstmtInsert_tMysqlOutput_1 != null) {

				pstmtInsert_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			tMysqlCommit_1Process();
			/**
			 * [tMysqlOutput_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
				conn_tMysqlCommit_1.close();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class row5Struct {

		java.util.Date moment;

		String pid;

		String root_pid;

		String father_pid;

		String project;

		String job;

		String context;

		Integer priority;

		String type;

		String origin;

		String message;

		Integer code;

	}

	public void tLogCatcher_1Process() throws TalendException {
		try {

			row5Struct row5 = new row5Struct();

			/**
			 * [tFileOutputDelimited_3 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_3", false);
			start_Hash
					.put("tFileOutputDelimited_3", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_3";

			String fileName_tFileOutputDelimited_3 = (new java.io.File(
					"loan_officer_dimension.csv")).getAbsolutePath().replace(
					"\\", "/");
			String fullName_tFileOutputDelimited_3 = null;
			String extension_tFileOutputDelimited_3 = null;
			String directory_tFileOutputDelimited_3 = null;
			if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
					extension_tFileOutputDelimited_3 = "";
				} else {
					fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("."));
					extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(fileName_tFileOutputDelimited_3
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
						.substring(0, fileName_tFileOutputDelimited_3
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("."));
					extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(fileName_tFileOutputDelimited_3
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
					extension_tFileOutputDelimited_3 = "";
				}
				directory_tFileOutputDelimited_3 = "";
			}

			int nb_line_tFileOutputDelimited_3 = 0;
			int splitEvery_tFileOutputDelimited_3 = 1000;
			int splitedFileNo_tFileOutputDelimited_3 = 0;
			int currentRow_tFileOutputDelimited_3 = 0;

			final String OUT_DELIM_tFileOutputDelimited_3 = /**
															 * Start field
															 * tFileOutputDelimited_3:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_3:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_3 != null
					&& directory_tFileOutputDelimited_3.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
						directory_tFileOutputDelimited_3);
				if (!dir_tFileOutputDelimited_3.exists()) {
					dir_tFileOutputDelimited_3.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_3 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_3, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_3 = new java.io.File(
					fileName_tFileOutputDelimited_3);

			if (filetFileOutputDelimited_3.length() == 0) {

				outtFileOutputDelimited_3.write("moment");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("pid");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("root_pid");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("father_pid");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("project");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("job");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("context");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("priority");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("type");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("origin");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("message");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write("code");

				outtFileOutputDelimited_3
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
			}

			/**
			 * [tFileOutputDelimited_3 begin ] stop
			 */

			/**
			 * [tLogCatcher_1 begin ] start
			 */

			ok_Hash.put("tLogCatcher_1", false);
			start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
			currentComponent = "tLogCatcher_1";

			for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
					.getMessages()) {
				row5.type = lcm.getType();
				row5.origin = (lcm.getOrigin() == null
						|| lcm.getOrigin().length() < 1 ? null : lcm
						.getOrigin());
				row5.priority = lcm.getPriority();
				row5.message = lcm.getMessage();
				row5.code = lcm.getCode();

				row5.moment = java.util.Calendar.getInstance().getTime();

				row5.pid = pid;
				row5.root_pid = rootPid;
				row5.father_pid = fatherPid;

				row5.project = projectName;
				row5.job = jobName;
				row5.context = contextStr;

				/**
				 * [tLogCatcher_1 begin ] stop
				 */
				/**
				 * [tLogCatcher_1 main ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_3 main ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

				if (row5.moment != null) {

					sb_tFileOutputDelimited_3.append(

					FormatterUtils.format_Date(row5.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.pid != null) {

					sb_tFileOutputDelimited_3.append(

					row5.pid

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.root_pid != null) {

					sb_tFileOutputDelimited_3.append(

					row5.root_pid

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.father_pid != null) {

					sb_tFileOutputDelimited_3.append(

					row5.father_pid

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.project != null) {

					sb_tFileOutputDelimited_3.append(

					row5.project

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.job != null) {

					sb_tFileOutputDelimited_3.append(

					row5.job

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.context != null) {

					sb_tFileOutputDelimited_3.append(

					row5.context

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.priority != null) {

					sb_tFileOutputDelimited_3.append(

					row5.priority

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.type != null) {

					sb_tFileOutputDelimited_3.append(

					row5.type

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.origin != null) {

					sb_tFileOutputDelimited_3.append(

					row5.origin

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.message != null) {

					sb_tFileOutputDelimited_3.append(

					row5.message

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_tFileOutputDelimited_3);

				if (row5.code != null) {

					sb_tFileOutputDelimited_3.append(

					row5.code

					);

				}

				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3
						.toString());

				nb_line_tFileOutputDelimited_3++;

				/**
				 * [tFileOutputDelimited_3 main ] stop
				 */

				/**
				 * [tLogCatcher_1 end ] start
				 */

				currentComponent = "tLogCatcher_1";

			}

			ok_Hash.put("tLogCatcher_1", true);
			end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

			/**
			 * [tLogCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_3 end ] start
			 */

			currentComponent = "tFileOutputDelimited_3";

			outtFileOutputDelimited_3.close();
			globalMap.put("tFileOutputDelimited_3_NB_LINE",
					nb_line_tFileOutputDelimited_3);

			ok_Hash.put("tFileOutputDelimited_3", true);
			end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_3 end ] stop
			 */

			tJava_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class row4Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short office_id;

		String global_office_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_office_num == null) ? 0
								: this.global_office_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.global_office_num == null) {
				if (other.global_office_num != null)
					return false;
			} else if (!this.global_office_num.equals(other.global_office_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_3Process() throws TalendException {
		try {

			row4Struct row4 = new row4Struct();

			/**
			 * [tAdvancedHash_row4 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row4", false);
			start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row4";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.commons.AdvancedLookup
					.<row4Struct> getLookup(matchingModeEnum_row4);
			globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

			/**
			 * [tAdvancedHash_row4 begin ] stop
			 */

			/**
			 * [tMysqlInput_3 begin ] start
			 */

			ok_Hash.put("tMysqlInput_3", false);
			start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
			currentComponent = "tMysqlInput_3";

			int nb_line_tMysqlInput_3 = 0;
			java.sql.Connection conn_tMysqlInput_3 = null;
			conn_tMysqlInput_3 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_3 = stmt_tMysqlInput_3
					.executeQuery("SELECT branch_office_dim.office_id, branch_office_dim.global_office_num FROM branch_office_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
					.getMetaData();
			int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
					.getTime();

			globalMap
					.put(
							"tMysqlInput_3_QUERY",
							"SELECT branch_office_dim.office_id, branch_office_dim.global_office_num FROM branch_office_dim");

			while (rs_tMysqlInput_3.next()) {
				nb_line_tMysqlInput_3++;

				if (colQtyInRs_tMysqlInput_3 < 1) {

					row4.office_id = 0;

				} else {

					if (rs_tMysqlInput_3.getObject(1) != null) {
						row4.office_id = rs_tMysqlInput_3.getShort(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_3 < 2) {

					row4.global_office_num = null;

				} else {

					if (rs_tMysqlInput_3.getObject(2) != null) {
						row4.global_office_num = rs_tMysqlInput_3.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				/**
				 * [tMysqlInput_3 begin ] stop
				 */
				/**
				 * [tMysqlInput_3 main ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 main ] stop
				 */

				/**
				 * [tAdvancedHash_row4 main ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				row4Struct row4_HashRow = new row4Struct();

				row4_HashRow.office_id = row4.office_id;
				row4_HashRow.global_office_num = row4.global_office_num;
				tHash_Lookup_row4.put(row4_HashRow);

				/**
				 * [tAdvancedHash_row4 main ] stop
				 */

				/**
				 * [tMysqlInput_3 end ] start
				 */

				currentComponent = "tMysqlInput_3";

			}
			stmt_tMysqlInput_3.close();

			globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

			ok_Hash.put("tMysqlInput_3", true);
			end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

			/**
			 * [tMysqlInput_3 end ] stop
			 */

			/**
			 * [tAdvancedHash_row4 end ] start
			 */

			currentComponent = "tAdvancedHash_row4";

			ok_Hash.put("tAdvancedHash_row4", true);
			end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row4 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class row6Struct {

		java.util.Date moment;

		String pid;

		String father_pid;

		String root_pid;

		Long system_pid;

		String project;

		String job;

		String job_repository_id;

		String job_version;

		String context;

		String origin;

		String message_type;

		String message;

		Long duration;

	}

	public void tStatCatcher_1Process() throws TalendException {
		try {

			row6Struct row6 = new row6Struct();

			/**
			 * [tFileOutputDelimited_2 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_2", false);
			start_Hash
					.put("tFileOutputDelimited_2", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_2";

			String fileName_tFileOutputDelimited_2 = (new java.io.File(
					"loan_officer_dimension_stats.csv")).getAbsolutePath()
					.replace("\\", "/");
			String fullName_tFileOutputDelimited_2 = null;
			String extension_tFileOutputDelimited_2 = null;
			String directory_tFileOutputDelimited_2 = null;
			if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
						.substring(0, fileName_tFileOutputDelimited_2
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				}
				directory_tFileOutputDelimited_2 = "";
			}

			int nb_line_tFileOutputDelimited_2 = 0;
			int splitEvery_tFileOutputDelimited_2 = 1000;
			int splitedFileNo_tFileOutputDelimited_2 = 0;
			int currentRow_tFileOutputDelimited_2 = 0;

			final String OUT_DELIM_tFileOutputDelimited_2 = /**
															 * Start field
															 * tFileOutputDelimited_2:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_2:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_2 != null
					&& directory_tFileOutputDelimited_2.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
						directory_tFileOutputDelimited_2);
				if (!dir_tFileOutputDelimited_2.exists()) {
					dir_tFileOutputDelimited_2.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_2, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_2 = new java.io.File(
					fileName_tFileOutputDelimited_2);

			if (filetFileOutputDelimited_2.length() == 0) {

				outtFileOutputDelimited_2.write("moment");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("father_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("root_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("system_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("project");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job_repository_id");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job_version");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("context");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("origin");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("message_type");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("message");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("duration");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
			}

			/**
			 * [tFileOutputDelimited_2 begin ] stop
			 */

			/**
			 * [tStatCatcher_1 begin ] start
			 */

			ok_Hash.put("tStatCatcher_1", false);
			start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
			currentComponent = "tStatCatcher_1";

			for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
					.getMessages()) {
				row6.pid = pid;
				row6.root_pid = rootPid;
				row6.father_pid = fatherPid;
				row6.project = projectName;
				row6.job = jobName;
				row6.context = contextStr;
				row6.origin = (scm.getOrigin() == null
						|| scm.getOrigin().length() < 1 ? null : scm
						.getOrigin());
				row6.message = scm.getMessage();
				row6.duration = scm.getDuration();
				row6.moment = scm.getMoment();
				row6.message_type = scm.getMessageType();
				row6.job_version = scm.getJobVersion();
				row6.job_repository_id = scm.getJobId();
				row6.system_pid = scm.getSystemPid();

				/**
				 * [tStatCatcher_1 begin ] stop
				 */
				/**
				 * [tStatCatcher_1 main ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_2 main ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

				if (row6.moment != null) {

					sb_tFileOutputDelimited_2.append(

					FormatterUtils.format_Date(row6.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.pid != null) {

					sb_tFileOutputDelimited_2.append(

					row6.pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.father_pid != null) {

					sb_tFileOutputDelimited_2.append(

					row6.father_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.root_pid != null) {

					sb_tFileOutputDelimited_2.append(

					row6.root_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.system_pid != null) {

					sb_tFileOutputDelimited_2.append(

					row6.system_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.project != null) {

					sb_tFileOutputDelimited_2.append(

					row6.project

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.job != null) {

					sb_tFileOutputDelimited_2.append(

					row6.job

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.job_repository_id != null) {

					sb_tFileOutputDelimited_2.append(

					row6.job_repository_id

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.job_version != null) {

					sb_tFileOutputDelimited_2.append(

					row6.job_version

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.context != null) {

					sb_tFileOutputDelimited_2.append(

					row6.context

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.origin != null) {

					sb_tFileOutputDelimited_2.append(

					row6.origin

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.message_type != null) {

					sb_tFileOutputDelimited_2.append(

					row6.message_type

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.message != null) {

					sb_tFileOutputDelimited_2.append(

					row6.message

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row6.duration != null) {

					sb_tFileOutputDelimited_2.append(

					row6.duration

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
						.toString());

				nb_line_tFileOutputDelimited_2++;

				/**
				 * [tFileOutputDelimited_2 main ] stop
				 */

				/**
				 * [tStatCatcher_1 end ] start
				 */

				currentComponent = "tStatCatcher_1";

			}

			ok_Hash.put("tStatCatcher_1", true);
			end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

			tLogCatcher_1Process();
			/**
			 * [tStatCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_2 end ] start
			 */

			currentComponent = "tFileOutputDelimited_2";

			outtFileOutputDelimited_2.close();
			globalMap.put("tFileOutputDelimited_2_NB_LINE",
					nb_line_tFileOutputDelimited_2);

			ok_Hash.put("tFileOutputDelimited_2", true);
			end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = PersonnelDimensionLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/personneldimensionloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = PersonnelDimensionLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/personneldimensionloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			OLTP_DB_HOST = (String) context.getProperty("OLTP_DB_HOST");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_DB_SCHEMA = (String) context.getProperty("OLTP_DB_SCHEMA");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_SCHEMA = (String) context.getProperty("OLAP_DB_SCHEMA");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final PersonnelDimensionLoader PersonnelDimensionLoaderClass = new PersonnelDimensionLoader();
		PersonnelDimensionLoaderClass.tStatCatcher_1.addMessage("begin");
		try {
			PersonnelDimensionLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		PersonnelDimensionLoaderClass.tStatCatcher_1.addMessage(
				status == "" ? "end" : status, (end - start));
		try {
			PersonnelDimensionLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		currentComponent = "";
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 97430 characters generated by Talend OpenStudio on the March 27, 2008 7:15:55
 * PM GMT
 ******************************************************************************/
