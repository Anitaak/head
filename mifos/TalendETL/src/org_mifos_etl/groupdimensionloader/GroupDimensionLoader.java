// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.groupdimensionloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: GroupDimensionLoader Purpose: <br>
 * Description: Loads the center group data from the customer table <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class GroupDimensionLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String OLTP_DB_HOST;
	private static String OLTP_DB_PORT;
	private static String OLTP_DB_SCHEMA;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_PASSWORD;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_SCHEMA;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static final String jobName = "GroupDimensionLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private static final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	private static final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_LNuTUOxiEdyX_tDMRdlLaA", "0.1");

	private class TalendException extends Exception {
		private Exception e = null;
		private GroupDimensionLoader c = null;
		private String currentComponent = null;

		private TalendException(GroupDimensionLoader c, Exception e,
				String errorComponent) {
			this.currentComponent = errorComponent;
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}
					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getMessage(), 1);
						tLogCatcher_1Process();
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tJava_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());
		tJava_1_onSubJobError(exception);
	}

	public void tMysqlConnection_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
		tMysqlConnection_2_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tMysqlInput_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMap_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tLogCatcher_1_error(Exception exception) throws TalendException {
		end_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		tLogCatcher_1_onSubJobError(exception);
	}

	public void tMysqlInput_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tMysqlInput_3_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tStatCatcher_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tFileOutputDelimited_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		tStatCatcher_1_onSubJobError(exception);
	}

	public void tAdvancedHash_row3_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tAdvancedHash_row2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		tMysqlInput_3_onSubJobError(exception);
	}

	public void tJava_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tLogCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_3_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tStatCatcher_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_1Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tJava_1 begin ] start
			 */

			ok_Hash.put("tJava_1", false);
			start_Hash.put("tJava_1", System.currentTimeMillis());
			currentComponent = "tJava_1";

			java.util.Properties p = new java.util.Properties();

			java.io.InputStream inStream = GroupDimensionLoader.class
					.getClassLoader().getResourceAsStream(
							"hibernate.properties");

			p.load(inStream);
			OLTP_DB_PASSWORD = (String) p.get("OLTP_DB_PASSWORD");
			OLTP_DB_USER = (String) p.get("OLTP_DB_USER");
			OLTP_DB_SCHEMA = (String) p.get("OLTP_DB_NAME");
			OLTP_DB_PORT = (String) p.get("OLTP_DB_PORT");
			OLTP_DB_HOST = (String) p.get("OLTP_HOST_NAME");
			OLAP_DB_HOST = (String) p.get("OLAP_DB_HOST");
			OLAP_DB_PORT = (String) p.get("OLAP_DB_PORT");
			OLAP_DB_SCHEMA = (String) p.get("OLAP_DB_NAME");
			OLAP_DB_USER = (String) p.get("OLAP_DB_USER");
			OLAP_DB_PASSWORD = (String) p.get("OLAP_DB_PASSWORD");

			/**
			 * [tJava_1 begin ] stop
			 */
			/**
			 * [tJava_1 main ] start
			 */

			currentComponent = "tJava_1";

			/**
			 * [tJava_1 main ] stop
			 */

			/**
			 * [tJava_1 end ] start
			 */

			currentComponent = "tJava_1";

			ok_Hash.put("tJava_1", true);
			end_Hash.put("tJava_1", System.currentTimeMillis());

			/**
			 * [tJava_1 end ] stop
			 */

			tMysqlConnection_2Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_2Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_2 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_2", false);
			start_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_2";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_2 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_2 = OLAP_DB_USER;

			String password_tMysqlConnection_2 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_2 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_2,
							userName_tMysqlConnection_2,
							password_tMysqlConnection_2);

			conn_tMysqlConnection_2.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_2",
					conn_tMysqlConnection_2);

			/**
			 * [tMysqlConnection_2 begin ] stop
			 */
			/**
			 * [tMysqlConnection_2 main ] start
			 */

			currentComponent = "tMysqlConnection_2";

			/**
			 * [tMysqlConnection_2 main ] stop
			 */

			/**
			 * [tMysqlConnection_2 end ] start
			 */

			currentComponent = "tMysqlConnection_2";

			ok_Hash.put("tMysqlConnection_2", true);
			end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_2 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		String currentComponent = "";
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + OLTP_DB_HOST
					+ ":" + OLTP_DB_PORT + "/" + OLTP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = OLTP_DB_USER;

			String password_tMysqlConnection_1 = OLTP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tMysqlInput_1Process();
			tMysqlCommit_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class group_dimStruct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String global_cust_num;

		String display_name;

		Short center_id;

		Short loan_officer_id;

		String external_id;

		java.util.Date created_date;

		java.util.Date updated_date;

		java.util.Date mfi_joining_date;

		java.util.Date customer_activation_date;

		Short created_by;

		Short updated_by;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_cust_num == null) ? 0
								: this.global_cust_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final group_dimStruct other = (group_dimStruct) obj;

			if (this.global_cust_num == null) {
				if (other.global_cust_num != null)
					return false;
			} else if (!this.global_cust_num.equals(other.global_cust_num))
				return false;

			return true;
		}

	}

	private class row1Struct {

		String GLOBAL_CUST_NUM;

		Short LOAN_OFFICER_ID;

		String DISPLAY_NAME;

		String EXTERNAL_ID;

		java.util.Date CREATED_DATE;

		java.util.Date UPDATED_DATE;

		java.util.Date MFI_JOINING_DATE;

		java.util.Date CUSTOMER_ACTIVATION_DATE;

		Short CREATED_BY;

		Short UPDATED_BY;

		Integer PARENT_CUSTOMER_ID;

	}

	private class after_tMysqlInput_1Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String GLOBAL_CUST_NUM;

		Short LOAN_OFFICER_ID;

		String DISPLAY_NAME;

		String EXTERNAL_ID;

		java.util.Date CREATED_DATE;

		java.util.Date UPDATED_DATE;

		java.util.Date MFI_JOINING_DATE;

		java.util.Date CUSTOMER_ACTIVATION_DATE;

		Short CREATED_BY;

		Short UPDATED_BY;

		Integer PARENT_CUSTOMER_ID;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.GLOBAL_CUST_NUM == null) ? 0
								: this.GLOBAL_CUST_NUM.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_1Struct other = (after_tMysqlInput_1Struct) obj;

			if (this.GLOBAL_CUST_NUM == null) {
				if (other.GLOBAL_CUST_NUM != null)
					return false;
			} else if (!this.GLOBAL_CUST_NUM.equals(other.GLOBAL_CUST_NUM))
				return false;

			return true;
		}

	}

	public void tMysqlInput_1Process() throws TalendException {
		String currentComponent = "";
		try {
			tMysqlInput_2Process();
			tMysqlInput_3Process();

			row1Struct row1 = new row1Struct();
			group_dimStruct group_dim = new group_dimStruct();

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int keyCount_tMysqlOutput_1 = 1;
			if (keyCount_tMysqlOutput_1 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "group_dim";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("UPDATE `"
							+ "group_dim"
							+ "` SET `display_name` = ?,`center_id` = ?,`loan_officer_id` = ?,`external_id` = ?,`created_date` = ?,`updated_date` = ?,`mfi_joining_date` = ?,`customer_activation_date` = ?,`created_by` = ?,`updated_by` = ? WHERE `global_cust_num` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `"
							+ "group_dim"
							+ "` (`global_cust_num`,`display_name`,`center_id`,`loan_officer_id`,`external_id`,`created_date`,`updated_date`,`mfi_joining_date`,`customer_activation_date`,`created_by`,`updated_by`) VALUES (?,?,?,?,?,?,?,?,?,?,?)");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tMap_1 begin ] start
			 */

			ok_Hash.put("tMap_1", false);
			start_Hash.put("tMap_1", System.currentTimeMillis());
			currentComponent = "tMap_1";

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.commons.AdvancedLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.commons.AdvancedLookup<row3Struct>) globalMap
					.get("tHash_Lookup_row3");
			row3Struct row3HashKey = new row3Struct();
			row3Struct row3Default = new row3Struct();

			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.commons.AdvancedLookup<row2Struct>) globalMap
					.get("tHash_Lookup_row2");
			row2Struct row2HashKey = new row2Struct();
			row2Struct row2Default = new row2Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			// ###############################

			// ###############################
			// # Outputs initialization
			group_dimStruct group_dim_tmp = new group_dimStruct();
			// ###############################

			/**
			 * [tMap_1 begin ] stop
			 */

			/**
			 * [tMysqlInput_1 begin ] start
			 */

			ok_Hash.put("tMysqlInput_1", false);
			start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
			currentComponent = "tMysqlInput_1";

			int nb_line_tMysqlInput_1 = 0;
			java.sql.Connection conn_tMysqlInput_1 = null;
			conn_tMysqlInput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
					.executeQuery("SELECT customer.GLOBAL_CUST_NUM,  customer.LOAN_OFFICER_ID, customer.DISPLAY_NAME, customer.EXTERNAL_ID, customer.CREATED_DATE,  customer.UPDATED_DATE, customer.MFI_JOINING_DATE, customer.CUSTOMER_ACTIVATION_DATE,   customer.CREATED_BY, customer.UPDATED_BY, customer.PARENT_CUSTOMER_ID FROM customer where customer.CUSTOMER_LEVEL_ID = 2");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
					.getMetaData();
			int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
					.getTime();

			globalMap
					.put(
							"tMysqlInput_1_QUERY",
							"SELECT customer.GLOBAL_CUST_NUM,  customer.LOAN_OFFICER_ID, customer.DISPLAY_NAME, customer.EXTERNAL_ID, customer.CREATED_DATE,  customer.UPDATED_DATE, customer.MFI_JOINING_DATE, customer.CUSTOMER_ACTIVATION_DATE,   customer.CREATED_BY, customer.UPDATED_BY, customer.PARENT_CUSTOMER_ID FROM customer where customer.CUSTOMER_LEVEL_ID = 2");

			while (rs_tMysqlInput_1.next()) {
				nb_line_tMysqlInput_1++;

				if (colQtyInRs_tMysqlInput_1 < 1) {

					row1.GLOBAL_CUST_NUM = null;

				} else {

					if (rs_tMysqlInput_1.getObject(1) != null) {
						row1.GLOBAL_CUST_NUM = rs_tMysqlInput_1.getString(1);
					} else {

						row1.GLOBAL_CUST_NUM = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 2) {

					row1.LOAN_OFFICER_ID = null;

				} else {

					if (rs_tMysqlInput_1.getObject(2) != null) {
						row1.LOAN_OFFICER_ID = rs_tMysqlInput_1.getShort(2);
					} else {

						row1.LOAN_OFFICER_ID = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 3) {

					row1.DISPLAY_NAME = null;

				} else {

					if (rs_tMysqlInput_1.getObject(3) != null) {
						row1.DISPLAY_NAME = rs_tMysqlInput_1.getString(3);
					} else {

						row1.DISPLAY_NAME = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 4) {

					row1.EXTERNAL_ID = null;

				} else {

					if (rs_tMysqlInput_1.getObject(4) != null) {
						row1.EXTERNAL_ID = rs_tMysqlInput_1.getString(4);
					} else {

						row1.EXTERNAL_ID = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 5) {

					row1.CREATED_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(5) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(5);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.CREATED_DATE = rs_tMysqlInput_1
									.getTimestamp(5);
						} else {
							row1.CREATED_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.CREATED_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 6) {

					row1.UPDATED_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(6) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(6);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.UPDATED_DATE = rs_tMysqlInput_1
									.getTimestamp(6);
						} else {
							row1.UPDATED_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.UPDATED_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 7) {

					row1.MFI_JOINING_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(7) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(7);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.MFI_JOINING_DATE = rs_tMysqlInput_1
									.getTimestamp(7);
						} else {
							row1.MFI_JOINING_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.MFI_JOINING_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 8) {

					row1.CUSTOMER_ACTIVATION_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(8) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(8);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.CUSTOMER_ACTIVATION_DATE = rs_tMysqlInput_1
									.getTimestamp(8);
						} else {
							row1.CUSTOMER_ACTIVATION_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.CUSTOMER_ACTIVATION_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 9) {

					row1.CREATED_BY = null;

				} else {

					if (rs_tMysqlInput_1.getObject(9) != null) {
						row1.CREATED_BY = rs_tMysqlInput_1.getShort(9);
					} else {

						row1.CREATED_BY = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 10) {

					row1.UPDATED_BY = null;

				} else {

					if (rs_tMysqlInput_1.getObject(10) != null) {
						row1.UPDATED_BY = rs_tMysqlInput_1.getShort(10);
					} else {

						row1.UPDATED_BY = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 11) {

					row1.PARENT_CUSTOMER_ID = null;

				} else {

					if (rs_tMysqlInput_1.getObject(11) != null) {
						row1.PARENT_CUSTOMER_ID = rs_tMysqlInput_1.getInt(11);
					} else {

						row1.PARENT_CUSTOMER_ID = null;

					}

				}

				/**
				 * [tMysqlInput_1 begin ] stop
				 */
				/**
				 * [tMysqlInput_1 main ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 main ] stop
				 */
				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				boolean rejectedInnerJoin_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)

				row3HashKey.CUSTOMER_ID = row1.PARENT_CUSTOMER_ID;

				row3Struct row3ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row3HashKey.hashCodeDirty = true;
					tHash_Lookup_row3.get(row3HashKey);

					if (tHash_Lookup_row3.hasResult()) { // G 90

						row3ObjectFromLookup = (row3Struct) tHash_Lookup_row3
								.getResultObject();

					} // G 90
					else { // G 91

					} // G 91

				} // G 20

				if (tHash_Lookup_row3.getCount(row3HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.CUSTOMER_ID = '"
									+ row3HashKey.CUSTOMER_ID + "'");
				}

				row3Struct fromLookup_row3 = null;
				row3Struct row3 = row3Default;

				if (row3ObjectFromLookup != null) {

					fromLookup_row3 = row3ObjectFromLookup;
					row3 = fromLookup_row3;
				}

				row2HashKey.global_cust_num = row3.GLOBAL_CUST_NUM;

				row2Struct row2ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row2HashKey.hashCodeDirty = true;
					tHash_Lookup_row2.get(row2HashKey);

					if (tHash_Lookup_row2.hasResult()) { // G 90

						row2ObjectFromLookup = (row2Struct) tHash_Lookup_row2
								.getResultObject();

					} // G 90
					else { // G 91

					} // G 91

				} // G 20

				if (tHash_Lookup_row2.getCount(row2HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.global_cust_num = '"
									+ row2HashKey.global_cust_num + "'");
				}

				row2Struct fromLookup_row2 = null;
				row2Struct row2 = row2Default;

				if (row2ObjectFromLookup != null) {

					fromLookup_row2 = row2ObjectFromLookup;
					row2 = fromLookup_row2;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					// ###############################

					// ###############################
					// # Output tables
					group_dim = null;

					// # Output table : 'group_dim'
					group_dim_tmp.global_cust_num = row1.GLOBAL_CUST_NUM;
					group_dim_tmp.display_name = row1.DISPLAY_NAME;
					group_dim_tmp.center_id = row2.center_id;
					group_dim_tmp.loan_officer_id = row1.LOAN_OFFICER_ID;
					group_dim_tmp.external_id = row1.EXTERNAL_ID;
					group_dim_tmp.created_date = row1.CREATED_DATE;
					group_dim_tmp.updated_date = row1.UPDATED_DATE;
					group_dim_tmp.mfi_joining_date = row1.MFI_JOINING_DATE;
					group_dim_tmp.customer_activation_date = row1.CUSTOMER_ACTIVATION_DATE;
					group_dim_tmp.created_by = row1.CREATED_BY;
					group_dim_tmp.updated_by = row1.UPDATED_BY;
					group_dim = group_dim_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				/**
				 * [tMap_1 main ] stop
				 */
				// Start of branch "group_dim"
				if (group_dim != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;
					int updateFlag_tMysqlOutput_1 = 0;

					if (group_dim.display_name == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(1,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(1,
								group_dim.display_name);

					}

					if (group_dim.center_id == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(2,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(2,
								group_dim.center_id);

					}

					if (group_dim.loan_officer_id == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(3,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(3,
								group_dim.loan_officer_id);

					}

					if (group_dim.external_id == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(4,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(4,
								group_dim.external_id);

					}

					if (group_dim.created_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = group_dim.created_date.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(5,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(5, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(5,
								java.sql.Types.DATE);

					}

					if (group_dim.updated_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = group_dim.updated_date.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(6,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(6, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(6,
								java.sql.Types.DATE);

					}

					if (group_dim.mfi_joining_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = group_dim.mfi_joining_date
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(7,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(7, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(7,
								java.sql.Types.DATE);

					}

					if (group_dim.customer_activation_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = group_dim.customer_activation_date
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(8,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(8, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(8,
								java.sql.Types.DATE);

					}

					if (group_dim.created_by == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(9,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(9,
								group_dim.created_by);

					}

					if (group_dim.updated_by == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(10,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(10,
								group_dim.updated_by);

					}

					if (group_dim.global_cust_num == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(11,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(11,
								group_dim.global_cust_num);

					}

					try {
						updateFlag_tMysqlOutput_1 = pstmtUpdate_tMysqlOutput_1
								.executeUpdate();
						updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
								+ updateFlag_tMysqlOutput_1;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_1 == 0) {

						if (group_dim.global_cust_num == null) {
							pstmtInsert_tMysqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(1,
									group_dim.global_cust_num);

						}

						if (group_dim.display_name == null) {
							pstmtInsert_tMysqlOutput_1.setNull(2,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(2,
									group_dim.display_name);

						}

						if (group_dim.center_id == null) {
							pstmtInsert_tMysqlOutput_1.setNull(3,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(3,
									group_dim.center_id);

						}

						if (group_dim.loan_officer_id == null) {
							pstmtInsert_tMysqlOutput_1.setNull(4,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(4,
									group_dim.loan_officer_id);

						}

						if (group_dim.external_id == null) {
							pstmtInsert_tMysqlOutput_1.setNull(5,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(5,
									group_dim.external_id);

						}

						if (group_dim.created_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = group_dim.created_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(6,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(6,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(6,
									java.sql.Types.DATE);

						}

						if (group_dim.updated_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = group_dim.updated_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(7,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(7,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(7,
									java.sql.Types.DATE);

						}

						if (group_dim.mfi_joining_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = group_dim.mfi_joining_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(8,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(8,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(8,
									java.sql.Types.DATE);

						}

						if (group_dim.customer_activation_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = group_dim.customer_activation_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(9,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(9,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(9,
									java.sql.Types.DATE);

						}

						if (group_dim.created_by == null) {
							pstmtInsert_tMysqlOutput_1.setNull(10,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(10,
									group_dim.created_by);

						}

						if (group_dim.updated_by == null) {
							pstmtInsert_tMysqlOutput_1.setNull(11,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(11,
									group_dim.updated_by);

						}

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "group_dim"

				/**
				 * [tMysqlInput_1 end ] start
				 */

				currentComponent = "tMysqlInput_1";

			}
			stmt_tMysqlInput_1.close();

			globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

			ok_Hash.put("tMysqlInput_1", true);
			end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

			/**
			 * [tMysqlInput_1 end ] stop
			 */
			/**
			 * [tMap_1 end ] start
			 */

			currentComponent = "tMap_1";

			// ###############################
			// # Lookup hashes releasing
			globalMap.remove("tHash_row3");
			// ###############################

			globalMap.remove("tHash_row2");
			// ###############################

			ok_Hash.put("tMap_1", true);
			end_Hash.put("tMap_1", System.currentTimeMillis());

			/**
			 * [tMap_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmtUpdate_tMysqlOutput_1 != null) {

				pstmtUpdate_tMysqlOutput_1.close();

			}
			if (pstmtInsert_tMysqlOutput_1 != null) {

				pstmtInsert_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			/**
			 * [tMysqlOutput_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		String currentComponent = "";
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row5Struct {

		java.util.Date moment;

		String pid;

		String root_pid;

		String father_pid;

		String project;

		String job;

		String context;

		Integer priority;

		String type;

		String origin;

		String message;

		Integer code;

	}

	public void tLogCatcher_1Process() throws TalendException {
		String currentComponent = "";
		try {

			row5Struct row5 = new row5Struct();

			/**
			 * [tFileOutputDelimited_2 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_2", false);
			start_Hash
					.put("tFileOutputDelimited_2", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_2";

			String fileName_tFileOutputDelimited_2 = (new java.io.File(
					"group_dimension.csv")).getAbsolutePath()
					.replace("\\", "/");
			String fullName_tFileOutputDelimited_2 = null;
			String extension_tFileOutputDelimited_2 = null;
			String directory_tFileOutputDelimited_2 = null;
			if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
						.substring(0, fileName_tFileOutputDelimited_2
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
					extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(fileName_tFileOutputDelimited_2
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
					extension_tFileOutputDelimited_2 = "";
				}
				directory_tFileOutputDelimited_2 = "";
			}

			int nb_line_tFileOutputDelimited_2 = 0;
			int splitEvery_tFileOutputDelimited_2 = 1000;
			int splitedFileNo_tFileOutputDelimited_2 = 0;
			int currentRow_tFileOutputDelimited_2 = 0;

			final String OUT_DELIM_tFileOutputDelimited_2 = /**
															 * Start field
															 * tFileOutputDelimited_2:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_2:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_2 != null
					&& directory_tFileOutputDelimited_2.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
						directory_tFileOutputDelimited_2);
				if (!dir_tFileOutputDelimited_2.exists()) {
					dir_tFileOutputDelimited_2.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_2 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_2, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_2 = new java.io.File(
					fileName_tFileOutputDelimited_2);

			if (filetFileOutputDelimited_2.length() == 0) {

				outtFileOutputDelimited_2.write("moment");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("root_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("father_pid");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("project");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("job");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("context");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("priority");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("type");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("origin");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("message");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write("code");

				outtFileOutputDelimited_2
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
			}

			/**
			 * [tFileOutputDelimited_2 begin ] stop
			 */

			/**
			 * [tLogCatcher_1 begin ] start
			 */

			ok_Hash.put("tLogCatcher_1", false);
			start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
			currentComponent = "tLogCatcher_1";

			for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
					.getMessages()) {
				row5.type = lcm.getType();
				row5.origin = (lcm.getOrigin() == null
						|| lcm.getOrigin().length() < 1 ? null : lcm
						.getOrigin());
				row5.priority = lcm.getPriority();
				row5.message = lcm.getMessage();
				row5.code = lcm.getCode();

				row5.moment = java.util.Calendar.getInstance().getTime();

				row5.pid = pid;
				row5.root_pid = rootPid;
				row5.father_pid = fatherPid;

				row5.project = projectName;
				row5.job = jobName;
				row5.context = contextStr;

				/**
				 * [tLogCatcher_1 begin ] stop
				 */
				/**
				 * [tLogCatcher_1 main ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_2 main ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

				if (row5.moment != null) {

					sb_tFileOutputDelimited_2.append(

					FormatterUtils.format_Date(row5.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.pid != null) {

					sb_tFileOutputDelimited_2.append(

					row5.pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.root_pid != null) {

					sb_tFileOutputDelimited_2.append(

					row5.root_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.father_pid != null) {

					sb_tFileOutputDelimited_2.append(

					row5.father_pid

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.project != null) {

					sb_tFileOutputDelimited_2.append(

					row5.project

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.job != null) {

					sb_tFileOutputDelimited_2.append(

					row5.job

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.context != null) {

					sb_tFileOutputDelimited_2.append(

					row5.context

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.priority != null) {

					sb_tFileOutputDelimited_2.append(

					row5.priority

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.type != null) {

					sb_tFileOutputDelimited_2.append(

					row5.type

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.origin != null) {

					sb_tFileOutputDelimited_2.append(

					row5.origin

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.message != null) {

					sb_tFileOutputDelimited_2.append(

					row5.message

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_tFileOutputDelimited_2);

				if (row5.code != null) {

					sb_tFileOutputDelimited_2.append(

					row5.code

					);

				}

				sb_tFileOutputDelimited_2
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

				outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
						.toString());

				nb_line_tFileOutputDelimited_2++;

				/**
				 * [tFileOutputDelimited_2 main ] stop
				 */

				/**
				 * [tLogCatcher_1 end ] start
				 */

				currentComponent = "tLogCatcher_1";

			}

			ok_Hash.put("tLogCatcher_1", true);
			end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

			/**
			 * [tLogCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_2 end ] start
			 */

			currentComponent = "tFileOutputDelimited_2";

			outtFileOutputDelimited_2.close();
			globalMap.put("tFileOutputDelimited_2_NB_LINE",
					nb_line_tFileOutputDelimited_2);

			ok_Hash.put("tFileOutputDelimited_2", true);
			end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row3Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int CUSTOMER_ID;

		short CUSTOMER_LEVEL_ID;

		String GLOBAL_CUST_NUM;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CUSTOMER_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.CUSTOMER_ID != other.CUSTOMER_ID)
				return false;

			return true;
		}

	}

	public void tMysqlInput_2Process() throws TalendException {
		String currentComponent = "";
		try {

			row3Struct row3 = new row3Struct();

			/**
			 * [tAdvancedHash_row3 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row3", false);
			start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row3";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.commons.AdvancedLookup
					.<row3Struct> getLookup(matchingModeEnum_row3);
			globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

			/**
			 * [tAdvancedHash_row3 begin ] stop
			 */

			/**
			 * [tMysqlInput_2 begin ] start
			 */

			ok_Hash.put("tMysqlInput_2", false);
			start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
			currentComponent = "tMysqlInput_2";

			int nb_line_tMysqlInput_2 = 0;
			java.sql.Connection conn_tMysqlInput_2 = null;
			conn_tMysqlInput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
					.executeQuery("SELECT customer.CUSTOMER_ID, customer.CUSTOMER_LEVEL_ID, customer.GLOBAL_CUST_NUM FROM customer where customer.CUSTOMER_LEVEL_ID = 3");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
					.getMetaData();
			int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
					.getTime();

			globalMap
					.put(
							"tMysqlInput_2_QUERY",
							"SELECT customer.CUSTOMER_ID, customer.CUSTOMER_LEVEL_ID, customer.GLOBAL_CUST_NUM FROM customer where customer.CUSTOMER_LEVEL_ID = 3");

			while (rs_tMysqlInput_2.next()) {
				nb_line_tMysqlInput_2++;

				if (colQtyInRs_tMysqlInput_2 < 1) {

					row3.CUSTOMER_ID = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(1) != null) {
						row3.CUSTOMER_ID = rs_tMysqlInput_2.getInt(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 2) {

					row3.CUSTOMER_LEVEL_ID = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(2) != null) {
						row3.CUSTOMER_LEVEL_ID = rs_tMysqlInput_2.getShort(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 3) {

					row3.GLOBAL_CUST_NUM = null;

				} else {

					if (rs_tMysqlInput_2.getObject(3) != null) {
						row3.GLOBAL_CUST_NUM = rs_tMysqlInput_2.getString(3);
					} else {

						row3.GLOBAL_CUST_NUM = null;

					}

				}

				/**
				 * [tMysqlInput_2 begin ] stop
				 */
				/**
				 * [tMysqlInput_2 main ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row3 main ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				row3Struct row3_HashRow = new row3Struct();

				row3_HashRow.CUSTOMER_ID = row3.CUSTOMER_ID;
				row3_HashRow.CUSTOMER_LEVEL_ID = row3.CUSTOMER_LEVEL_ID;
				row3_HashRow.GLOBAL_CUST_NUM = row3.GLOBAL_CUST_NUM;
				tHash_Lookup_row3.put(row3_HashRow);

				/**
				 * [tAdvancedHash_row3 main ] stop
				 */

				/**
				 * [tMysqlInput_2 end ] start
				 */

				currentComponent = "tMysqlInput_2";

			}
			stmt_tMysqlInput_2.close();

			globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

			ok_Hash.put("tMysqlInput_2", true);
			end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

			/**
			 * [tMysqlInput_2 end ] stop
			 */

			/**
			 * [tAdvancedHash_row3 end ] start
			 */

			currentComponent = "tAdvancedHash_row3";

			ok_Hash.put("tAdvancedHash_row3", true);
			end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row3 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row2Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		short center_id;

		String global_cust_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_cust_num == null) ? 0
								: this.global_cust_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.global_cust_num == null) {
				if (other.global_cust_num != null)
					return false;
			} else if (!this.global_cust_num.equals(other.global_cust_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_3Process() throws TalendException {
		String currentComponent = "";
		try {

			row2Struct row2 = new row2Struct();

			/**
			 * [tAdvancedHash_row2 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row2", false);
			start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row2";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.commons.AdvancedLookup
					.<row2Struct> getLookup(matchingModeEnum_row2);
			globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

			/**
			 * [tAdvancedHash_row2 begin ] stop
			 */

			/**
			 * [tMysqlInput_3 begin ] start
			 */

			ok_Hash.put("tMysqlInput_3", false);
			start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
			currentComponent = "tMysqlInput_3";

			int nb_line_tMysqlInput_3 = 0;
			java.sql.Connection conn_tMysqlInput_3 = null;
			conn_tMysqlInput_3 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_3 = stmt_tMysqlInput_3
					.executeQuery("SELECT center_dim.center_id, center_dim.global_cust_num FROM center_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
					.getMetaData();
			int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
					.getTime();

			globalMap
					.put("tMysqlInput_3_QUERY",
							"SELECT center_dim.center_id, center_dim.global_cust_num FROM center_dim");

			while (rs_tMysqlInput_3.next()) {
				nb_line_tMysqlInput_3++;

				if (colQtyInRs_tMysqlInput_3 < 1) {

					row2.center_id = 0;

				} else {

					if (rs_tMysqlInput_3.getObject(1) != null) {
						row2.center_id = rs_tMysqlInput_3.getShort(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_3 < 2) {

					row2.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_3.getObject(2) != null) {
						row2.global_cust_num = rs_tMysqlInput_3.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				/**
				 * [tMysqlInput_3 begin ] stop
				 */
				/**
				 * [tMysqlInput_3 main ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.center_id = row2.center_id;
				row2_HashRow.global_cust_num = row2.global_cust_num;
				tHash_Lookup_row2.put(row2_HashRow);

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tMysqlInput_3 end ] start
				 */

				currentComponent = "tMysqlInput_3";

			}
			stmt_tMysqlInput_3.close();

			globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

			ok_Hash.put("tMysqlInput_3", true);
			end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

			/**
			 * [tMysqlInput_3 end ] stop
			 */

			/**
			 * [tAdvancedHash_row2 end ] start
			 */

			currentComponent = "tAdvancedHash_row2";

			ok_Hash.put("tAdvancedHash_row2", true);
			end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	private class row6Struct {

		java.util.Date moment;

		String pid;

		String father_pid;

		String root_pid;

		Long system_pid;

		String project;

		String job;

		String job_repository_id;

		String job_version;

		String context;

		String origin;

		String message_type;

		String message;

		Long duration;

	}

	public void tStatCatcher_1Process() throws TalendException {
		String currentComponent = "";
		try {

			row6Struct row6 = new row6Struct();

			/**
			 * [tFileOutputDelimited_1 begin ] start
			 */

			ok_Hash.put("tFileOutputDelimited_1", false);
			start_Hash
					.put("tFileOutputDelimited_1", System.currentTimeMillis());
			currentComponent = "tFileOutputDelimited_1";

			String fileName_tFileOutputDelimited_1 = (new java.io.File(
					"group_dimension_stats.csv")).getAbsolutePath().replace(
					"\\", "/");
			String fullName_tFileOutputDelimited_1 = null;
			String extension_tFileOutputDelimited_1 = null;
			String directory_tFileOutputDelimited_1 = null;
			if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
				if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
						.lastIndexOf("/")) {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
					extension_tFileOutputDelimited_1 = "";
				} else {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
					extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
				}
				directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
						.substring(0, fileName_tFileOutputDelimited_1
								.lastIndexOf("/"));
			} else {
				if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
					extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(fileName_tFileOutputDelimited_1
									.lastIndexOf("."));
				} else {
					fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
					extension_tFileOutputDelimited_1 = "";
				}
				directory_tFileOutputDelimited_1 = "";
			}

			int nb_line_tFileOutputDelimited_1 = 0;
			int splitEvery_tFileOutputDelimited_1 = 1000;
			int splitedFileNo_tFileOutputDelimited_1 = 0;
			int currentRow_tFileOutputDelimited_1 = 0;

			final String OUT_DELIM_tFileOutputDelimited_1 = /**
															 * Start field
															 * tFileOutputDelimited_1:FIELDSEPARATOR
															 */
			";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
			;

			final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																	 * Start
																	 * field
																	 * tFileOutputDelimited_1:ROWSEPARATOR
																	 */
			"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
			;

			// create directory only if not exists
			if (directory_tFileOutputDelimited_1 != null
					&& directory_tFileOutputDelimited_1.trim().length() != 0) {
				java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
						directory_tFileOutputDelimited_1);
				if (!dir_tFileOutputDelimited_1.exists()) {
					dir_tFileOutputDelimited_1.mkdirs();
				}
			}

			java.io.BufferedWriter outtFileOutputDelimited_1 = new java.io.BufferedWriter(
					new java.io.OutputStreamWriter(
							new java.io.FileOutputStream(
									fileName_tFileOutputDelimited_1, true),
							"ISO-8859-15"));
			java.io.File filetFileOutputDelimited_1 = new java.io.File(
					fileName_tFileOutputDelimited_1);

			if (filetFileOutputDelimited_1.length() == 0) {

				outtFileOutputDelimited_1.write("moment");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("father_pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("root_pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("system_pid");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("project");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("job");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("job_repository_id");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("job_version");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("context");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("origin");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("message_type");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("message");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write("duration");

				outtFileOutputDelimited_1
						.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
			}

			/**
			 * [tFileOutputDelimited_1 begin ] stop
			 */

			/**
			 * [tStatCatcher_1 begin ] start
			 */

			ok_Hash.put("tStatCatcher_1", false);
			start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
			currentComponent = "tStatCatcher_1";

			for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
					.getMessages()) {
				row6.pid = pid;
				row6.root_pid = rootPid;
				row6.father_pid = fatherPid;
				row6.project = projectName;
				row6.job = jobName;
				row6.context = contextStr;
				row6.origin = (scm.getOrigin() == null
						|| scm.getOrigin().length() < 1 ? null : scm
						.getOrigin());
				row6.message = scm.getMessage();
				row6.duration = scm.getDuration();
				row6.moment = scm.getMoment();
				row6.message_type = scm.getMessageType();
				row6.job_version = scm.getJobVersion();
				row6.job_repository_id = scm.getJobId();
				row6.system_pid = scm.getSystemPid();

				/**
				 * [tStatCatcher_1 begin ] stop
				 */
				/**
				 * [tStatCatcher_1 main ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 main ] stop
				 */
				/**
				 * [tFileOutputDelimited_1 main ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

				if (row6.moment != null) {

					sb_tFileOutputDelimited_1.append(

					FormatterUtils.format_Date(row6.moment,
							"yyyy-MM-dd HH:mm:ss")

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.pid != null) {

					sb_tFileOutputDelimited_1.append(

					row6.pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.father_pid != null) {

					sb_tFileOutputDelimited_1.append(

					row6.father_pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.root_pid != null) {

					sb_tFileOutputDelimited_1.append(

					row6.root_pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.system_pid != null) {

					sb_tFileOutputDelimited_1.append(

					row6.system_pid

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.project != null) {

					sb_tFileOutputDelimited_1.append(

					row6.project

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.job != null) {

					sb_tFileOutputDelimited_1.append(

					row6.job

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.job_repository_id != null) {

					sb_tFileOutputDelimited_1.append(

					row6.job_repository_id

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.job_version != null) {

					sb_tFileOutputDelimited_1.append(

					row6.job_version

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.context != null) {

					sb_tFileOutputDelimited_1.append(

					row6.context

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.origin != null) {

					sb_tFileOutputDelimited_1.append(

					row6.origin

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.message_type != null) {

					sb_tFileOutputDelimited_1.append(

					row6.message_type

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.message != null) {

					sb_tFileOutputDelimited_1.append(

					row6.message

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_tFileOutputDelimited_1);

				if (row6.duration != null) {

					sb_tFileOutputDelimited_1.append(

					row6.duration

					);

				}

				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
						.toString());

				nb_line_tFileOutputDelimited_1++;

				/**
				 * [tFileOutputDelimited_1 main ] stop
				 */

				/**
				 * [tStatCatcher_1 end ] start
				 */

				currentComponent = "tStatCatcher_1";

			}

			ok_Hash.put("tStatCatcher_1", true);
			end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

			tLogCatcher_1Process();
			/**
			 * [tStatCatcher_1 end ] stop
			 */
			/**
			 * [tFileOutputDelimited_1 end ] start
			 */

			currentComponent = "tFileOutputDelimited_1";

			outtFileOutputDelimited_1.close();
			globalMap.put("tFileOutputDelimited_1_NB_LINE",
					nb_line_tFileOutputDelimited_1);

			ok_Hash.put("tFileOutputDelimited_1", true);
			end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

			/**
			 * [tFileOutputDelimited_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e, currentComponent);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;
	private static ThreadLocal threadLocal = new ThreadLocal();
	private static SyncInt runningThreadCount = new SyncInt();

	private static class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = GroupDimensionLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/groupdimensionloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = GroupDimensionLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/groupdimensionloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			OLTP_DB_HOST = (String) context.getProperty("OLTP_DB_HOST");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_DB_SCHEMA = (String) context.getProperty("OLTP_DB_SCHEMA");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_SCHEMA = (String) context.getProperty("OLAP_DB_SCHEMA");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final GroupDimensionLoader GroupDimensionLoaderClass = new GroupDimensionLoader();
		GroupDimensionLoaderClass.tStatCatcher_1.addMessage("begin");
		try {
			GroupDimensionLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put(errorCode, null);
				threadRunResultMap.put(status, "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put(errorCode, null);
					GroupDimensionLoaderClass.tJava_1Process();
					((java.util.Map) threadLocal.get()).put(status, "end");
				} catch (TalendException e_tJava_1) {
					((java.util.Map) threadLocal.get()).put(status, "failure");
					e_tJava_1.printStackTrace();

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get(errorCode));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get(status));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				} else if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		while (GroupDimensionLoaderClass.runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		GroupDimensionLoaderClass.tStatCatcher_1.addMessage(
				status == "" ? "end" : status, (end - start));
		try {
			GroupDimensionLoaderClass.tStatCatcher_1Process();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		threadLocal = new ThreadLocal();
		runningThreadCount = new SyncInt();
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 87880 characters generated by Talend OpenStudio on the April 2, 2008 4:20:24
 * PM BST
 ******************************************************************************/
