// ============================================================================
//
// Copyright (c) 2005-2007, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 2.3.0.RC1_r8112).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org_mifos_etl.clientloanaccountloader;

import routines.DataOperation;
import routines.Mathematical;
import routines.Numeric;
import routines.Relational;
import routines.StringHandling;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.TalendString;
import routines.system.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;

/**
 * Job: ClientLoanAccountLoader Purpose: Loads the client loan account data.<br>
 * Description: Load the client loan account data from OLTP db to the OLAP
 * schema. <br>
 * 
 * @author ravikasar@gmail.com
 * @version 0.1
 * @status DEV
 */
public class ClientLoanAccountLoader {
	// create and load default properties
	private static java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	private static java.util.Properties context = new java.util.Properties();
	private static String OLTP_DB_HOST;
	private static String OLTP_DB_PORT;
	private static String OLTP_DB_SCHEMA;
	private static String OLTP_DB_USER;
	private static String OLTP_DB_PASSWORD;
	private static String OLAP_DB_HOST;
	private static String OLAP_DB_PORT;
	private static String OLAP_DB_SCHEMA;
	private static String OLAP_DB_USER;
	private static String OLAP_DB_PASSWORD;
	private static final String jobName = "ClientLoanAccountLoader";
	private static final String projectName = "ORG_MIFOS_ETL";
	public static Integer errorCode = null;
	private static String currentComponent = "";
	private static final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private static final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private static final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private class TalendException extends Exception {
		private Exception e = null;
		private ClientLoanAccountLoader c = null;

		private TalendException(ClientLoanAccountLoader c, Exception e) {
			this.e = e;
			this.c = c;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				e.printStackTrace();
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(c, new Object[] { e });
							break;
						}
					}

				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception) throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());
		tJava_1_onSubJobError(exception);
	}

	public void tMysqlConnection_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
		tMysqlConnection_1_onSubJobError(exception);
	}

	public void tMysqlConnection_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
		tMysqlConnection_2_onSubJobError(exception);
	}

	public void tMysqlCommit_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
		tMysqlCommit_1_onSubJobError(exception);
	}

	public void tMysqlInput_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMap_1_error(Exception exception) throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlOutput_1_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		tMysqlInput_1_onSubJobError(exception);
	}

	public void tMysqlCommit_2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
		tMysqlCommit_2_onSubJobError(exception);
	}

	public void tMysqlInput_2_error(Exception exception) throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tAdvancedHash_row2_error(Exception exception)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		tMysqlInput_2_onSubJobError(exception);
	}

	public void tJava_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlConnection_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_1_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlCommit_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tMysqlInput_2_onSubJobError(Exception exception)
			throws TalendException {
	}

	public void tJava_1Process() throws TalendException {
		try {

			/**
			 * [tJava_1 begin ] start
			 */

			ok_Hash.put("tJava_1", false);
			start_Hash.put("tJava_1", System.currentTimeMillis());
			currentComponent = "tJava_1";

			java.util.Properties p = new java.util.Properties();

			java.io.InputStream inStream = this.getClass().getClassLoader()
					.getResourceAsStream("hibernate.properties");

			p.load(inStream);
			OLTP_DB_PASSWORD = (String) p.get("OLTP_DB_PASSWORD");
			OLTP_DB_USER = (String) p.get("OLTP_DB_USER");
			OLTP_DB_SCHEMA = (String) p.get("OLTP_DB_NAME");
			OLTP_DB_PORT = (String) p.get("OLTP_DB_PORT");
			OLTP_DB_HOST = (String) p.get("OLTP_HOST_NAME");
			OLAP_DB_HOST = (String) p.get("OLAP_DB_HOST");
			OLAP_DB_PORT = (String) p.get("OLAP_DB_PORT");
			OLAP_DB_SCHEMA = (String) p.get("OLAP_DB_NAME");
			OLAP_DB_USER = (String) p.get("OLAP_DB_USER");
			OLAP_DB_PASSWORD = (String) p.get("OLAP_DB_PASSWORD");

			/**
			 * [tJava_1 begin ] stop
			 */
			/**
			 * [tJava_1 main ] start
			 */

			currentComponent = "tJava_1";

			/**
			 * [tJava_1 main ] stop
			 */

			/**
			 * [tJava_1 end ] start
			 */

			currentComponent = "tJava_1";

			ok_Hash.put("tJava_1", true);
			end_Hash.put("tJava_1", System.currentTimeMillis());

			/**
			 * [tJava_1 end ] stop
			 */

			tMysqlConnection_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_1Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_1 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_1", false);
			start_Hash.put("tMysqlConnection_1", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_1";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_1 = "jdbc:mysql://" + OLAP_DB_HOST
					+ ":" + OLAP_DB_PORT + "/" + OLAP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_1 = OLAP_DB_USER;

			String password_tMysqlConnection_1 = OLAP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_1 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_1,
							userName_tMysqlConnection_1,
							password_tMysqlConnection_1);

			conn_tMysqlConnection_1.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_1",
					conn_tMysqlConnection_1);

			/**
			 * [tMysqlConnection_1 begin ] stop
			 */
			/**
			 * [tMysqlConnection_1 main ] start
			 */

			currentComponent = "tMysqlConnection_1";

			/**
			 * [tMysqlConnection_1 main ] stop
			 */

			/**
			 * [tMysqlConnection_1 end ] start
			 */

			currentComponent = "tMysqlConnection_1";

			ok_Hash.put("tMysqlConnection_1", true);
			end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_1 end ] stop
			 */

			tMysqlConnection_2Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlConnection_2Process() throws TalendException {
		try {

			/**
			 * [tMysqlConnection_2 begin ] start
			 */

			ok_Hash.put("tMysqlConnection_2", false);
			start_Hash.put("tMysqlConnection_2", System.currentTimeMillis());
			currentComponent = "tMysqlConnection_2";

			java.lang.Class.forName("org.gjt.mm.mysql.Driver");

			String url_tMysqlConnection_2 = "jdbc:mysql://" + OLTP_DB_HOST
					+ ":" + OLTP_DB_PORT + "/" + OLTP_DB_SCHEMA + "?"
					+ "noDatetimeStringSync=true";

			String userName_tMysqlConnection_2 = OLTP_DB_USER;

			String password_tMysqlConnection_2 = OLTP_DB_PASSWORD;

			java.sql.Connection conn_tMysqlConnection_2 = java.sql.DriverManager
					.getConnection(url_tMysqlConnection_2,
							userName_tMysqlConnection_2,
							password_tMysqlConnection_2);

			conn_tMysqlConnection_2.setAutoCommit(false);

			globalMap.put("conn_" + "tMysqlConnection_2",
					conn_tMysqlConnection_2);

			/**
			 * [tMysqlConnection_2 begin ] stop
			 */
			/**
			 * [tMysqlConnection_2 main ] start
			 */

			currentComponent = "tMysqlConnection_2";

			/**
			 * [tMysqlConnection_2 main ] stop
			 */

			/**
			 * [tMysqlConnection_2 end ] start
			 */

			currentComponent = "tMysqlConnection_2";

			ok_Hash.put("tMysqlConnection_2", true);
			end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

			/**
			 * [tMysqlConnection_2 end ] stop
			 */

			tMysqlCommit_1Process();
			tMysqlInput_1Process();

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlCommit_1Process() throws TalendException {
		try {
			/**
			 * [tMysqlCommit_1 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_1", false);
			start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_1";

			/**
			 * [tMysqlCommit_1 begin ] stop
			 */
			/**
			 * [tMysqlCommit_1 main ] start
			 */

			currentComponent = "tMysqlCommit_1";

			java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");
			if (conn_tMysqlCommit_1 != null && !conn_tMysqlCommit_1.isClosed()) {
				conn_tMysqlCommit_1.commit();
			}

			/**
			 * [tMysqlCommit_1 main ] stop
			 */
			/**
			 * [tMysqlCommit_1 end ] start
			 */

			currentComponent = "tMysqlCommit_1";

			ok_Hash.put("tMysqlCommit_1", true);
			end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class loan_account_dimStruct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		String global_account_num;

		Short created_by;

		java.util.Date created_date;

		Short updated_by;

		java.util.Date updated_date;

		java.util.Date closed_date;

		short NO_OF_INSTALLMENTS;

		java.util.Date DISBURSEMENT_DATE;

		Short GRACE_PERIOD_DURATION;

		Short INTEREST_AT_DISB;

		int client_id;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.client_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loan_account_dimStruct other = (loan_account_dimStruct) obj;

			if (this.client_id != other.client_id)
				return false;

			return true;
		}

	}

	private class row1Struct {

		String global_cust_num;

		String global_account_num;

		Short created_by;

		java.util.Date created_date;

		Short updated_by;

		java.util.Date updated_date;

		java.util.Date closed_date;

		short NO_OF_INSTALLMENTS;

		java.util.Date DISBURSEMENT_DATE;

		Short GRACE_PERIOD_DURATION;

		Short INTEREST_AT_DISB;

	}

	private class after_tMysqlInput_1Struct {

		String global_cust_num;

		String global_account_num;

		Short created_by;

		java.util.Date created_date;

		Short updated_by;

		java.util.Date updated_date;

		java.util.Date closed_date;

		short NO_OF_INSTALLMENTS;

		java.util.Date DISBURSEMENT_DATE;

		Short GRACE_PERIOD_DURATION;

		Short INTEREST_AT_DISB;

	}

	public void tMysqlInput_1Process() throws TalendException {
		try {
			tMysqlInput_2Process();

			row1Struct row1 = new row1Struct();
			loan_account_dimStruct loan_account_dim = new loan_account_dimStruct();

			/**
			 * [tMysqlOutput_1 begin ] start
			 */

			ok_Hash.put("tMysqlOutput_1", false);
			start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
			currentComponent = "tMysqlOutput_1";

			int keyCount_tMysqlOutput_1 = 3;
			if (keyCount_tMysqlOutput_1 < 1) {
				throw new Exception(
						"For update or delete, Schema must have a key");
			}

			int nb_line_tMysqlOutput_1 = 0;
			int nb_line_update_tMysqlOutput_1 = 0;
			int nb_line_inserted_tMysqlOutput_1 = 0;
			int nb_line_deleted_tMysqlOutput_1 = 0;

			int deletedCount_tMysqlOutput_1 = 0;
			int updatedCount_tMysqlOutput_1 = 0;
			int insertedCount_tMysqlOutput_1 = 0;

			String tableName_tMysqlOutput_1 = "client_loan_account_dim";
			boolean whetherReject_tMysqlOutput_1 = false;

			java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
			long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
			long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
					.getTime();
			long date_tMysqlOutput_1;

			java.sql.Connection conn_tMysqlOutput_1 = null;
			conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("UPDATE `"
							+ "client_loan_account_dim"
							+ "` SET `created_by` = ?,`created_date` = ?,`updated_by` = ?,`updated_date` = ?,`closed_date` = ?,`NO_OF_INSTALLMENTS` = ?,`GRACE_PERIOD_DURATION` = ?,`INTEREST_AT_DISB` = ? WHERE `global_account_num` = ? AND `DISBURSEMENT_DATE` = ? AND `client_id` = ?");

			java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
					.prepareStatement("INSERT INTO `"
							+ "client_loan_account_dim"
							+ "` (`global_account_num`,`created_by`,`created_date`,`updated_by`,`updated_date`,`closed_date`,`NO_OF_INSTALLMENTS`,`DISBURSEMENT_DATE`,`GRACE_PERIOD_DURATION`,`INTEREST_AT_DISB`,`client_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?)");

			/**
			 * [tMysqlOutput_1 begin ] stop
			 */

			/**
			 * [tMap_1 begin ] start
			 */

			ok_Hash.put("tMap_1", false);
			start_Hash.put("tMap_1", System.currentTimeMillis());
			currentComponent = "tMap_1";

			// ###############################
			// # Lookup's keys initialization

			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.commons.AdvancedLookup<row2Struct>) globalMap
					.get("tHash_Lookup_row2");
			row2Struct row2HashKey = new row2Struct();
			row2Struct row2Default = new row2Struct();
			// ###############################

			// ###############################
			// # Vars initialization
			// ###############################

			// ###############################
			// # Outputs initialization
			loan_account_dimStruct loan_account_dim_tmp = new loan_account_dimStruct();
			// ###############################

			/**
			 * [tMap_1 begin ] stop
			 */

			/**
			 * [tMysqlInput_1 begin ] start
			 */

			ok_Hash.put("tMysqlInput_1", false);
			start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
			currentComponent = "tMysqlInput_1";

			int nb_line_tMysqlInput_1 = 0;
			java.sql.Connection conn_tMysqlInput_1 = null;
			conn_tMysqlInput_1 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_2");

			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
					.executeQuery("select c.global_cust_num, a.global_account_num, a.created_by, a.created_date, a.updated_by, a.updated_date, a.closed_date, la.no_of_installments, la.disbursement_date, la.grace_period_duration, la.interest_at_disb from account a, loan_account la, customer c where a.account_id = la.account_id and a.customer_id = c.customer_id and la.account_id > 500000 and la.account_id < 600000");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
					.getMetaData();
			int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
					.getTime();

			globalMap
					.put(
							"tMysqlInput_1_QUERY",
							"select c.global_cust_num, a.global_account_num, a.created_by, a.created_date, a.updated_by, a.updated_date, a.closed_date, la.no_of_installments, la.disbursement_date, la.grace_period_duration, la.interest_at_disb from account a, loan_account la, customer c where a.account_id = la.account_id and a.customer_id = c.customer_id and la.account_id > 500000 and la.account_id < 600000");

			while (rs_tMysqlInput_1.next()) {
				nb_line_tMysqlInput_1++;

				if (colQtyInRs_tMysqlInput_1 < 1) {

					row1.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(1) != null) {
						row1.global_cust_num = rs_tMysqlInput_1.getString(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 2) {

					row1.global_account_num = null;

				} else {

					if (rs_tMysqlInput_1.getObject(2) != null) {
						row1.global_account_num = rs_tMysqlInput_1.getString(2);
					} else {

						row1.global_account_num = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 3) {

					row1.created_by = null;

				} else {

					if (rs_tMysqlInput_1.getObject(3) != null) {
						row1.created_by = rs_tMysqlInput_1.getShort(3);
					} else {

						row1.created_by = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 4) {

					row1.created_date = null;

				} else {

					if (rs_tMysqlInput_1.getString(4) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(4);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.created_date = rs_tMysqlInput_1
									.getTimestamp(4);
						} else {
							row1.created_date = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.created_date = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 5) {

					row1.updated_by = null;

				} else {

					if (rs_tMysqlInput_1.getObject(5) != null) {
						row1.updated_by = rs_tMysqlInput_1.getShort(5);
					} else {

						row1.updated_by = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 6) {

					row1.updated_date = null;

				} else {

					if (rs_tMysqlInput_1.getString(6) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(6);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.updated_date = rs_tMysqlInput_1
									.getTimestamp(6);
						} else {
							row1.updated_date = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.updated_date = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 7) {

					row1.closed_date = null;

				} else {

					if (rs_tMysqlInput_1.getString(7) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(7);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.closed_date = rs_tMysqlInput_1.getTimestamp(7);
						} else {
							row1.closed_date = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.closed_date = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 8) {

					row1.NO_OF_INSTALLMENTS = 0;

				} else {

					if (rs_tMysqlInput_1.getObject(8) != null) {
						row1.NO_OF_INSTALLMENTS = rs_tMysqlInput_1.getShort(8);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 9) {

					row1.DISBURSEMENT_DATE = null;

				} else {

					if (rs_tMysqlInput_1.getString(9) != null) {
						String dateString_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(9);
						if (!dateString_tMysqlInput_1.equals("0000-00-00")
								&& !dateString_tMysqlInput_1
										.equals("0000-00-00 00:00:00")) {
							row1.DISBURSEMENT_DATE = rs_tMysqlInput_1
									.getTimestamp(9);
						} else {
							row1.DISBURSEMENT_DATE = (java.util.Date) year0_tMysqlInput_1
									.clone();
						}
					} else {
						row1.DISBURSEMENT_DATE = null;
					}

				}

				if (colQtyInRs_tMysqlInput_1 < 10) {

					row1.GRACE_PERIOD_DURATION = null;

				} else {

					if (rs_tMysqlInput_1.getObject(10) != null) {
						row1.GRACE_PERIOD_DURATION = rs_tMysqlInput_1
								.getShort(10);
					} else {

						row1.GRACE_PERIOD_DURATION = null;

					}

				}

				if (colQtyInRs_tMysqlInput_1 < 11) {

					row1.INTEREST_AT_DISB = null;

				} else {

					if (rs_tMysqlInput_1.getObject(11) != null) {
						row1.INTEREST_AT_DISB = rs_tMysqlInput_1.getShort(11);
					} else {

						row1.INTEREST_AT_DISB = null;

					}

				}

				/**
				 * [tMysqlInput_1 begin ] stop
				 */
				/**
				 * [tMysqlInput_1 main ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 main ] stop
				 */
				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				boolean rejectedInnerJoin_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)

				row2HashKey.global_cust_num = row1.global_cust_num;

				row2Struct row2ObjectFromLookup = null;

				if (!rejectedInnerJoin_tMap_1) { // G 20
					row2HashKey.hashCodeDirty = true;
					tHash_Lookup_row2.get(row2HashKey);

					if (tHash_Lookup_row2.hasResult()) { // G 90

						row2ObjectFromLookup = (row2Struct) tHash_Lookup_row2
								.getResultObject();

					} // G 90
					else { // G 91

					} // G 91

				} // G 20

				if (tHash_Lookup_row2.getCount(row2HashKey) > 1) {

					System.out
							.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.global_cust_num = '"
									+ row2HashKey.global_cust_num + "'");
				}

				row2Struct fromLookup_row2 = null;
				row2Struct row2 = row2Default;

				if (row2ObjectFromLookup != null) {

					fromLookup_row2 = row2ObjectFromLookup;
					row2 = fromLookup_row2;
				}

				// ###############################

				{ // start of Var scope

					// ###############################
					// # Vars tables
					// ###############################

					// ###############################
					// # Output tables
					loan_account_dim = null;

					// # Output table : 'loan_account_dim'
					loan_account_dim_tmp.global_account_num = row1.global_account_num;
					loan_account_dim_tmp.created_by = row1.created_by;
					loan_account_dim_tmp.created_date = row1.created_date;
					loan_account_dim_tmp.updated_by = row1.updated_by;
					loan_account_dim_tmp.updated_date = row1.updated_date;
					loan_account_dim_tmp.closed_date = row1.closed_date;
					loan_account_dim_tmp.NO_OF_INSTALLMENTS = row1.NO_OF_INSTALLMENTS;
					loan_account_dim_tmp.DISBURSEMENT_DATE = row1.DISBURSEMENT_DATE;
					loan_account_dim_tmp.GRACE_PERIOD_DURATION = row1.GRACE_PERIOD_DURATION;
					loan_account_dim_tmp.INTEREST_AT_DISB = row1.INTEREST_AT_DISB;
					loan_account_dim_tmp.client_id = row2.client_id;
					loan_account_dim = loan_account_dim_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				/**
				 * [tMap_1 main ] stop
				 */
				// Start of branch "loan_account_dim"
				if (loan_account_dim != null) {

					/**
					 * [tMysqlOutput_1 main ] start
					 */

					currentComponent = "tMysqlOutput_1";

					whetherReject_tMysqlOutput_1 = false;
					int updateFlag_tMysqlOutput_1 = 0;

					if (loan_account_dim.created_by == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(1,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(1,
								loan_account_dim.created_by);

					}

					if (loan_account_dim.created_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = loan_account_dim.created_date
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(2,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(2, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(2,
								java.sql.Types.DATE);

					}

					if (loan_account_dim.updated_by == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(3,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(3,
								loan_account_dim.updated_by);

					}

					if (loan_account_dim.updated_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = loan_account_dim.updated_date
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(4,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(4, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(4,
								java.sql.Types.DATE);

					}

					if (loan_account_dim.closed_date != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = loan_account_dim.closed_date
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(5,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(5, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(5,
								java.sql.Types.DATE);

					}

					pstmtUpdate_tMysqlOutput_1.setShort(6,
							loan_account_dim.NO_OF_INSTALLMENTS);

					if (loan_account_dim.GRACE_PERIOD_DURATION == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(7,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(7,
								loan_account_dim.GRACE_PERIOD_DURATION);

					}

					if (loan_account_dim.INTEREST_AT_DISB == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(8,
								java.sql.Types.INTEGER);

					} else {

						pstmtUpdate_tMysqlOutput_1.setShort(8,
								loan_account_dim.INTEREST_AT_DISB);

					}

					if (loan_account_dim.global_account_num == null) {
						pstmtUpdate_tMysqlOutput_1.setNull(9,
								java.sql.Types.VARCHAR);

					} else {

						pstmtUpdate_tMysqlOutput_1.setString(9,
								loan_account_dim.global_account_num);

					}

					if (loan_account_dim.DISBURSEMENT_DATE != null) {
						// timestamp < min java date value (year 1) || timestamp
						// > max mysql value (year 10000) => set 0000-00-00 as
						// date in MySQL
						date_tMysqlOutput_1 = loan_account_dim.DISBURSEMENT_DATE
								.getTime();
						if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
								|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
							pstmtUpdate_tMysqlOutput_1.setString(10,
									"0000-00-00 00:00:00");
						} else {
							pstmtUpdate_tMysqlOutput_1
									.setTimestamp(10, new java.sql.Timestamp(
											date_tMysqlOutput_1));
						}
					} else {

						pstmtUpdate_tMysqlOutput_1.setNull(10,
								java.sql.Types.DATE);

					}

					pstmtUpdate_tMysqlOutput_1.setInt(11,
							loan_account_dim.client_id);

					try {
						updateFlag_tMysqlOutput_1 = pstmtUpdate_tMysqlOutput_1
								.executeUpdate();
						updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
								+ updateFlag_tMysqlOutput_1;

					} catch (Exception e) {
						whetherReject_tMysqlOutput_1 = true;
						System.err.print(e.getMessage());
					}
					if (updateFlag_tMysqlOutput_1 == 0) {

						if (loan_account_dim.global_account_num == null) {
							pstmtInsert_tMysqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);

						} else {

							pstmtInsert_tMysqlOutput_1.setString(1,
									loan_account_dim.global_account_num);

						}

						if (loan_account_dim.created_by == null) {
							pstmtInsert_tMysqlOutput_1.setNull(2,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(2,
									loan_account_dim.created_by);

						}

						if (loan_account_dim.created_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = loan_account_dim.created_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(3,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(3,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(3,
									java.sql.Types.DATE);

						}

						if (loan_account_dim.updated_by == null) {
							pstmtInsert_tMysqlOutput_1.setNull(4,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(4,
									loan_account_dim.updated_by);

						}

						if (loan_account_dim.updated_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = loan_account_dim.updated_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(5,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(5,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(5,
									java.sql.Types.DATE);

						}

						if (loan_account_dim.closed_date != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = loan_account_dim.closed_date
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(6,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(6,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(6,
									java.sql.Types.DATE);

						}

						pstmtInsert_tMysqlOutput_1.setShort(7,
								loan_account_dim.NO_OF_INSTALLMENTS);

						if (loan_account_dim.DISBURSEMENT_DATE != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tMysqlOutput_1 = loan_account_dim.DISBURSEMENT_DATE
									.getTime();
							if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
									|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
								pstmtInsert_tMysqlOutput_1.setString(8,
										"0000-00-00 00:00:00");
							} else {
								pstmtInsert_tMysqlOutput_1.setTimestamp(8,
										new java.sql.Timestamp(
												date_tMysqlOutput_1));
							}
						} else {

							pstmtInsert_tMysqlOutput_1.setNull(8,
									java.sql.Types.DATE);

						}

						if (loan_account_dim.GRACE_PERIOD_DURATION == null) {
							pstmtInsert_tMysqlOutput_1.setNull(9,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(9,
									loan_account_dim.GRACE_PERIOD_DURATION);

						}

						if (loan_account_dim.INTEREST_AT_DISB == null) {
							pstmtInsert_tMysqlOutput_1.setNull(10,
									java.sql.Types.INTEGER);

						} else {

							pstmtInsert_tMysqlOutput_1.setShort(10,
									loan_account_dim.INTEREST_AT_DISB);

						}

						pstmtInsert_tMysqlOutput_1.setInt(11,
								loan_account_dim.client_id);

						try {
							insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
									+ pstmtInsert_tMysqlOutput_1
											.executeUpdate();
						} catch (Exception e) {
							whetherReject_tMysqlOutput_1 = true;
							System.err.print(e.getMessage());
						}
					}
					nb_line_tMysqlOutput_1++;
					if (!whetherReject_tMysqlOutput_1) {
					}
					/**
					 * [tMysqlOutput_1 main ] stop
					 */

				} // End of branch "loan_account_dim"

				/**
				 * [tMysqlInput_1 end ] start
				 */

				currentComponent = "tMysqlInput_1";

			}
			stmt_tMysqlInput_1.close();

			globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

			ok_Hash.put("tMysqlInput_1", true);
			end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

			/**
			 * [tMysqlInput_1 end ] stop
			 */
			/**
			 * [tMap_1 end ] start
			 */

			currentComponent = "tMap_1";

			// ###############################
			// # Lookup hashes releasing
			globalMap.remove("tHash_row2");
			// ###############################

			ok_Hash.put("tMap_1", true);
			end_Hash.put("tMap_1", System.currentTimeMillis());

			/**
			 * [tMap_1 end ] stop
			 */
			/**
			 * [tMysqlOutput_1 end ] start
			 */

			currentComponent = "tMysqlOutput_1";

			if (pstmtUpdate_tMysqlOutput_1 != null) {

				pstmtUpdate_tMysqlOutput_1.close();

			}
			if (pstmtInsert_tMysqlOutput_1 != null) {

				pstmtInsert_tMysqlOutput_1.close();

			}

			nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
					+ deletedCount_tMysqlOutput_1;
			nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
					+ updatedCount_tMysqlOutput_1;
			nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
					+ insertedCount_tMysqlOutput_1;

			globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
					nb_line_update_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
					nb_line_inserted_tMysqlOutput_1);
			globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
					nb_line_deleted_tMysqlOutput_1);

			ok_Hash.put("tMysqlOutput_1", true);
			end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

			tMysqlCommit_2Process();
			/**
			 * [tMysqlOutput_1 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public void tMysqlCommit_2Process() throws TalendException {
		try {
			/**
			 * [tMysqlCommit_2 begin ] start
			 */

			ok_Hash.put("tMysqlCommit_2", false);
			start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());
			currentComponent = "tMysqlCommit_2";

			/**
			 * [tMysqlCommit_2 begin ] stop
			 */
			/**
			 * [tMysqlCommit_2 main ] start
			 */

			currentComponent = "tMysqlCommit_2";

			java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");
			if (conn_tMysqlCommit_2 != null && !conn_tMysqlCommit_2.isClosed()) {
				conn_tMysqlCommit_2.commit();
			}

			/**
			 * [tMysqlCommit_2 main ] stop
			 */
			/**
			 * [tMysqlCommit_2 end ] start
			 */

			currentComponent = "tMysqlCommit_2";

			ok_Hash.put("tMysqlCommit_2", true);
			end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

			/**
			 * [tMysqlCommit_2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	private class row2Struct {
		private static final int DEFAULT_HASHCODE = 1;
		private static final int PRIME = 31;
		private int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		int client_id;

		String global_cust_num;

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.global_cust_num == null) ? 0
								: this.global_cust_num.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.global_cust_num == null) {
				if (other.global_cust_num != null)
					return false;
			} else if (!this.global_cust_num.equals(other.global_cust_num))
				return false;

			return true;
		}

	}

	public void tMysqlInput_2Process() throws TalendException {
		try {

			row2Struct row2 = new row2Struct();

			/**
			 * [tAdvancedHash_row2 begin ] start
			 */

			ok_Hash.put("tAdvancedHash_row2", false);
			start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
			currentComponent = "tAdvancedHash_row2";

			org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.commons.AdvancedLookup.MATCHING_MODE.UNIQUE_MATCH;
			org.talend.designer.components.commons.AdvancedLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.commons.AdvancedLookup
					.<row2Struct> getLookup(matchingModeEnum_row2);
			globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

			/**
			 * [tAdvancedHash_row2 begin ] stop
			 */

			/**
			 * [tMysqlInput_2 begin ] start
			 */

			ok_Hash.put("tMysqlInput_2", false);
			start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
			currentComponent = "tMysqlInput_2";

			int nb_line_tMysqlInput_2 = 0;
			java.sql.Connection conn_tMysqlInput_2 = null;
			conn_tMysqlInput_2 = (java.sql.Connection) globalMap
					.get("conn_tMysqlConnection_1");

			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
					.createStatement();
			java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
					.executeQuery("SELECT client_dim.client_id, client_dim.global_cust_num FROM client_dim");
			java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
					.getMetaData();
			int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

			java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
					.getInstance();
			calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
			java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
					.getTime();

			globalMap
					.put("tMysqlInput_2_QUERY",
							"SELECT client_dim.client_id, client_dim.global_cust_num FROM client_dim");

			while (rs_tMysqlInput_2.next()) {
				nb_line_tMysqlInput_2++;

				if (colQtyInRs_tMysqlInput_2 < 1) {

					row2.client_id = 0;

				} else {

					if (rs_tMysqlInput_2.getObject(1) != null) {
						row2.client_id = rs_tMysqlInput_2.getInt(1);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				if (colQtyInRs_tMysqlInput_2 < 2) {

					row2.global_cust_num = null;

				} else {

					if (rs_tMysqlInput_2.getObject(2) != null) {
						row2.global_cust_num = rs_tMysqlInput_2.getString(2);
					} else {

						throw new RuntimeException(
								"Null value in non-Nullable column");
					}

				}

				/**
				 * [tMysqlInput_2 begin ] stop
				 */
				/**
				 * [tMysqlInput_2 main ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.client_id = row2.client_id;
				row2_HashRow.global_cust_num = row2.global_cust_num;
				tHash_Lookup_row2.put(row2_HashRow);

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tMysqlInput_2 end ] start
				 */

				currentComponent = "tMysqlInput_2";

			}
			stmt_tMysqlInput_2.close();

			globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

			ok_Hash.put("tMysqlInput_2", true);
			end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

			/**
			 * [tMysqlInput_2 end ] stop
			 */

			/**
			 * [tAdvancedHash_row2 end ] start
			 */

			currentComponent = "tAdvancedHash_row2";

			ok_Hash.put("tAdvancedHash_row2", true);
			end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

			/**
			 * [tAdvancedHash_row2 end ] stop
			 */

		} catch (Exception e) {
			throw new TalendException(this, e);
		}
	}

	public static boolean watch = false;
	public static int portStats = 3334;
	public static int portTraces = 4334;
	public static String clientHost;
	public static String defaultClientHost = "localhost";
	public static String contextStr = "Default";
	public static String pid = "0";
	public static String rootPid = null;
	public static String fatherPid = null;

	private static java.util.Properties context_param = new java.util.Properties();

	public static String status = "";

	public static void main(String[] args) {
		int exitCode = runJob(args);
		System.exit(exitCode);
	}

	public static synchronized int runJob(String[] args) {

		init();

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		pid = TalendString.getAsciiRandomString(6);
		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		}

		try {
			java.io.InputStream inContext = ClientLoanAccountLoader.class
					.getClassLoader()
					.getResourceAsStream(
							"org_mifos_etl/clientloanaccountloader/contexts/Default.properties");
			if (inContext != null) {
				defaultProps.load(inContext);
				inContext.close();
				context = new java.util.Properties(defaultProps);
			}

			if (contextStr.compareTo("Default") != 0) {
				inContext = ClientLoanAccountLoader.class.getClassLoader()
						.getResourceAsStream(
								"org_mifos_etl/clientloanaccountloader/contexts/"
										+ contextStr + ".properties");
				if (inContext != null) {
					context.load(inContext);
					inContext.close();
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			OLTP_DB_HOST = (String) context.getProperty("OLTP_DB_HOST");

			OLTP_DB_PORT = (String) context.getProperty("OLTP_DB_PORT");

			OLTP_DB_SCHEMA = (String) context.getProperty("OLTP_DB_SCHEMA");

			OLTP_DB_USER = (String) context.getProperty("OLTP_DB_USER");

			OLTP_DB_PASSWORD = (String) context.getProperty("OLTP_DB_PASSWORD");

			OLAP_DB_HOST = (String) context.getProperty("OLAP_DB_HOST");

			OLAP_DB_PORT = (String) context.getProperty("OLAP_DB_PORT");

			OLAP_DB_SCHEMA = (String) context.getProperty("OLAP_DB_SCHEMA");

			OLAP_DB_USER = (String) context.getProperty("OLAP_DB_USER");

			OLAP_DB_PASSWORD = (String) context.getProperty("OLAP_DB_PASSWORD");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		long end = 0;
		long start = System.currentTimeMillis();
		final ClientLoanAccountLoader ClientLoanAccountLoaderClass = new ClientLoanAccountLoader();
		try {
			errorCode = null;
			ClientLoanAccountLoaderClass.tJava_1Process();
			status = "end";
		} catch (TalendException e_tJava_1) {
			status = "failure";
			e_tJava_1.printStackTrace();

		} finally {
		}
		end = System.currentTimeMillis();
		if (watch) {
			System.out.println((end - start) + " milliseconds");
		}
		if (errorCode == null) {
			return status != null && status.equals("failure") ? 1 : 0;
		} else {
			return errorCode.intValue();
		}
	}

	public static void evalParam(String arg) {
		if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			portStats = Integer.parseInt(arg.substring(12));
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	private static void init() {

		defaultProps.clear();
		context.clear();
		errorCode = null;
		currentComponent = "";
		start_Hash.clear();
		end_Hash.clear();
		ok_Hash.clear();
		globalMap.clear();
		watch = false;
		portStats = 3334;
		portTraces = 4334;
		clientHost = null;
		defaultClientHost = "localhost";
		contextStr = "Default";
		pid = "0";
		rootPid = null;
		fatherPid = null;
		context_param.clear();
		status = "";
	}
}
/*******************************************************************************
 * 49696 characters generated by Talend OpenStudio on the April 2, 2008 4:29:47
 * PM BST
 ******************************************************************************/
