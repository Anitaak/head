<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:artifact="urn:maven-artifact-ant" name="mifos" default="dist" basedir=".">

    <path id="maven-ant-tasks.classpath" path="build-lib/maven-ant-tasks-2.0.9.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
        uri="urn:maven-artifact-ant"
        classpathref="maven-ant-tasks.classpath" />

    <property environment="env"/>
    <property name="build.compiler" value="modern"/>
    <property name="java.home" value="${env.JAVA_HOME}"/>
    <property name="src.dir" value="${basedir}/src/main/java"/>
    <property name="test.dir" value="${basedir}/src/test/java"/>
    <property name="conf.dir" value="${src.dir}/org/mifos/config/resources"/>
    <property name="test.conf.dir" value="${test.dir}/org/mifos/config/resources"/>


    <!-- mimics ConfigurationLocator directory search behavior -->
    <!--
    Simulate functionality in ConfigurationLocator used to find the Mifos
    database (and other miscellaneous settings) configuration file. Note that,
    unlike ConfigurationLocator, Ant will _combine_ properties from any/all of
    the below files which exist. The first definition of each property wins.
    -->
    <property file="${user.home}/.mifos/local.properties"/>
    <property file="${env.MIFOS_CONF}/local.properties"/>
    <property file="${mifos.conf}/local.properties"/>
    <!--
    Don't search System.getProperty("conf.dir") for local.properties; no need.
    It is only used to override settings in acceptanceDatabase.properties.
    -->

    <!--
    Finally, pull in default settings.
    -->
    <property file="${conf.dir}/build.properties"/>
    <property file="${conf.dir}/mainDatabase.properties"/>
    <property file="${test.conf.dir}/integrationDatabase.properties"/>
    <property file="${test.conf.dir}/acceptanceDatabase.properties"/>

    <property name="main.database.url"
        value="jdbc:mysql://${main.database.host}:${main.database.port}/${main.database}?${main.database.params}"/>
    <property name="integration.database.url"
        value="jdbc:mysql://${integration.database.host}:${integration.database.port}/${integration.database}?${integration.database.params}"/>
    <property name="acceptance.database.url"
        value="jdbc:mysql://${acceptance.database.host}:${acceptance.database.port}/${acceptance.database}?${acceptance.database.params}"/>

    <!--
    Which suite to run in the run_test target. Normally the whole suite,
    but can be set to a sub-suite or individual test, for example by specifying
    -Dtest.suite=FastTests on the ant command line.
    -->
    <property name="test.suite" value="ApplicationTestSuite" />

    <!-- Probably need about 550M for 64-bit systems 
    (instead of 350M for 32-bit). -->
    <property name="test.memory" value="1024M" />

    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="birt.web.viewer.dir" value="${basedir}/BirtWebViewer"/>
    <property name="birt.report.design.dir" value="${basedir}/BirtReportDesign"/>
    <property name="birt.report.resource.dir" value="${basedir}/BirtReportResource"/>
    <property name="sql.dir" value="${basedir}/src/main/sql"/>
    <property name="test.sql.dir" value="${basedir}/src/test/sql"/>
    <property name="build.dir" value="${basedir}/target"/>
    <property name="dist.dir" value="${basedir}/dist"/>

    <!--Helper path for building, copying resources etc-->
    <property name="doc.dir" value="${dist.dir}/docs"/>
    <property name="build.src.dir" value="${build.dir}/mifos"/>
    <property name="build.test.dir" value="${build.dir}/test-classes"/>
    <property name="build.web-inf" value="${build.src.dir}/WEB-INF"/>
    <property name="build.classes" value="${build.web-inf}/classes"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.adminReport" value="${build.src.dir}/adminReport"/>
    <property name="src.webapp.dir" value="${basedir}/src/main/webapp"/>
    <property name="src.web-inf.dir" value="${src.webapp.dir}/WEB-INF"/>

    <property name="test.classes" value="${build.test.dir}"/>

    <property name="current.release.number" value="1.1.0"/>
    <property name="current.release.name" value="mifos_v${current.release.number}"/>

    <property name="database.driver" value="com.mysql.jdbc.Driver"/>
    <property name="database.driver.jar" 
        value="./lib/mysql-connector-java-5.1.5-bin.jar"/>

    <path id="class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${build.src.dir}"/>
        <pathelement location="${build.classes}"/>
    </path>

    <!-- read latest SVN revision number -->
    <target name="svn-revision">
        <loadfile property="svn.version" srcFile="${basedir}/.svn/entries" failonerror="true">
            <filterchain>
                <headfilter lines="6"/>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern=".*[\r\n]+dir[\r\n]+([0-9]+)[\r\n]+http.*"
                        flags="s" replace="\1"/>
                </tokenfilter>
            </filterchain>
        </loadfile>
        <loadfile property="svn.branch" srcFile="${basedir}/.svn/entries" failonerror="true">
            <filterchain>
                <headfilter lines="6"/>
                <tokenfilter>
                    <filetokenizer/>
                    <replaceregex pattern=".*[\r\n]+https://mifos\.dev\.java\.net/svn/mifos(/branches|/tags)?/([^/]*)/.*"
                        flags="s" replace="\2"/>
                </tokenfilter>
            </filterchain>
        </loadfile>
    </target>

    <target name="copy-revision" depends="svn-revision, maven_dependencies" description="Creates revision property file">
        <copy file="${conf.dir}/versionInfo.properties" todir="${build.classes}/org/mifos/config/resources" overwrite="true" >
            <filterset>
                <filter token="revision" value="${svn.version}" />
                <filter token="branch" value="${svn.branch}" />
            </filterset>
        </copy>
    </target>

    <target name="make_dir">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.adminReport}"/>
        <mkdir dir="${build.web-inf}"/>
        <mkdir dir="${build.web-inf}/services/MifosService/META-INF"/>
        <mkdir dir="${build.web-inf}/services/MifosService/modules"/>
        <mkdir dir="${test.classes}"/>
    </target>

    <target name="clean" description="Cleans the temp build directory">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile" depends="make_dir,copy_files,maven_dependencies" 
        description="Compiles the source files">
        <javac srcdir="${src.dir}" 
            destdir="${build.classes}" 
            debug="${debug.flag}"
            target="1.5"
            includes="**/*.java"
            excludes="${global.exclude}">
            <classpath>
                <path refid="class.path"/>
                <path refid="maven-dependencies.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="compile_test" depends="compile,maven_test_dependencies" 
        description="Compiles the test files">
        <javac srcdir="${test.dir}" 
            destdir="${test.classes}" 
            debug="${debug.flag}"
            includes="**/*.java"
            excludes="${global.exclude}">
            <classpath>
                <path refid="class.path"/>
                <pathelement location="{build.classes}"/>
                <path refid="maven-dependencies.classpath"/>
                <path refid="test.maven-dependencies.classpath"/>
            </classpath>

        </javac>
    </target>

    <!-- task to minify javascript files (remove comments & whitespace for faster downloads) -->
    <taskdef name="jsmin" classname="net.matthaynes.jsmin.JSMin_Task" classpath="${lib.dir}/jsmin-0.2.2.jar"/>

    <target name="copy_files" depends="copy-revision">
        <copy todir="${build.web-inf}/lib">
            <fileset dir="${lib.dir}" 
                excludes="easymock*.jar, javax.servlet.jar, jaxb-xjc.jar, jetty*.jar, jsp-api.jar, junit*.jar,
                mayfly*.jar, servlet-api-2.5-6.0.0.jar, strutstest-2.1.3.jar, trang.jar, trangtask.jar">
                <exclude name="*.tld"/>
            </fileset>
        </copy>
        <copy todir="${build.web-inf}">
            <fileset dir="${src.web-inf.dir}">
                <exclude name="web.xml"/>
            </fileset>
        </copy>
        <copy todir="${build.src.dir}/pages">
            <fileset dir="${src.webapp.dir}/pages"/>
        </copy>
        <copy todir="${build.classes}/sql">
            <fileset dir="${sql.dir}">
                <include name="*.sql" />
            </fileset>
        </copy>
        <copy todir="${build.classes}/org/mifos/application">
            <fileset dir="${src.dir}/org/mifos/application">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${build.classes}/org/mifos/framework">
            <fileset dir="${src.dir}/org/mifos/framework">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${build.classes}/org/mifos/config">
            <fileset dir="${src.dir}/org/mifos/config">
                <exclude name="**/*.java"/>
                <exclude name="**/integrationDatabase.properties" />
            </fileset>
        </copy>
        <copy file="${conf.dir}/ehcache.xml" todir="${build.classes}/org/mifos/config/resources" />
        <copy todir="${build.web-inf}/services/MifosService/META-INF">
            <fileset dir="${src.dir}/org/mifos/api/resources">
                <include name="services.xml" />
                <include name="*.wsdl" />
            </fileset>
        </copy>
        <copy todir="${build.src.dir}/pages/application/reports/uploads">
            <fileset dir="${src.dir}/org/mifos/application/reports/uploads">
                <include name="*.jrxml"/>
                <include name="*.jasper"/>
            </fileset>
        </copy>
        <copy todir="${build.classes}">
            <fileset dir="${basedir}/src/main/resources">
                <include name="**/*.xml"/>
                <include name="**/*.xsd"/>
            </fileset>
        </copy>
        <copy todir="${test.classes}">
            <fileset dir="${basedir}/src/test/resources">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <jsmin force="true">
            <fileset dir="${build.src.dir}/pages" includes="**/*.js"/>
        </jsmin>
    </target>

    <target name="integrate_birt_web_viewer">
        <copy todir="${build.src.dir}">
            <fileset dir="${birt.web.viewer.dir}" excludes="*.jsp, *.rptdesign, **/web.xml"/>
        </copy>
        <concat destfile="${build.web-inf}/web.xml" append="no" force="yes" >
            <fileset dir="${src.web-inf.dir}" includes="web.xml"/>
            <fileset dir="${birt.web.viewer.dir}" includes="**/web.xml"/>
        </concat>
        <replaceregexp file="${build.web-inf}/web.xml" byline="no" flags="s" match="&lt;/web-app&gt;.*&lt;/display-name&gt;" replace="   &lt;!-- section: birt web viewer --&gt;" />
    </target>

    <target name="copy_birt_reports">
        <copy todir="${build.src.dir}/report">
            <fileset dir="${birt.report.design.dir}" />
        </copy>
        <copy todir="${build.src.dir}/report/BirtReportResource">
            <fileset dir="${birt.report.resource.dir}" />
        </copy>
    </target>

    <target name="lib" depends="compile" description="Build the mifos library">
        <mkdir dir="${build.lib}"/>
        <copy todir="${build.lib}">
            <fileset dir="${build.classes}">
                <exclude name="**/struts/**"/>
            </fileset>
        </copy>
        <jar basedir="${build.lib}"
            destfile="${dist.dir}/mifos-lib.jar" />
    </target>

    <target name="copy_test_files">
        <copy todir="${test.classes}">
            <fileset dir="${test.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${build.test.dir}/sql">
            <fileset dir="${test.sql.dir}">
                <include name="upgrade_to_*.sql" />
            </fileset>
        </copy>

        <copy todir="${test.classes}/WEB-INF">
            <fileset dir="${src.web-inf.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${test.classes}/org/mifos/config/resources/">
            <fileset dir="${test.conf.dir}">
                <include name="integrationDatabase.properties"/>
            </fileset>
        </copy>
        <copy todir="${test.classes}/org/mifos/config">
            <fileset dir="${test.dir}/org/mifos/config">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>


    </target>

    <target name="run_test" 
        depends="compile,copy_files,compile_test,copy_test_files,build_test_db" 
        description="Run tests.">
        <echo>Using database: ${integration.database} at ${integration.database.host} port ${integration.database.port}</echo>
        <junit printsummary="on" fork="true" maxmemory="${test.memory}" 
            dir="${basedir}"
            haltonfailure="${test.haltonfailure}" haltonerror="${test.haltonerror}"
            failureproperty="tests.failure">
            <sysproperty key="mifos.test.mode" value="integration"/>
            <classpath>
                <path refid="class.path"/>
                <pathelement location="${build.classes}"/>
                <pathelement location="${test.classes}"/>
                <pathelement location="${test.classes}/org/mifos/config/resources"/>
                <path refid="test.maven-dependencies.classpath"/>
            </classpath>

            <formatter type="xml" />
            <batchtest todir="${dist.dir}" >
                <fileset dir="${test.classes}">
                    <include name="**/${test.suite}.class" />
                </fileset>
            </batchtest>
            <assertions>
                <enable />
            </assertions>
        </junit>
        <fail if="tests.failure" 
            message="Unit tests failed - Report is available at ${dist.dir}"
            status="1"/>
    </target>

    <target name="run_unit_test" 
        depends="compile,copy_files,compile_test,copy_test_files" 
        description="Run tests with no database initialization.">
        <echo>Using database: ${integration.database} at ${integration.database.host} port ${integration.database.port}</echo>
        <junit printsummary="on" fork="true" maxmemory="${test.memory}" 
            dir="${basedir}"
            haltonfailure="${test.haltonfailure}" haltonerror="${test.haltonerror}"
            failureproperty="tests.failure">
            <sysproperty key="mifos.test.mode" value="integration"/>
            <classpath>
                <path refid="class.path"/>
                <pathelement location="${build.classes}"/>
                <pathelement location="${test.classes}"/>
                <pathelement location="${test.classes}/org/mifos/config/resources"/>
                <path refid="test.maven-dependencies.classpath"/>
            </classpath>

            <formatter type="xml" />
            <batchtest todir="${dist.dir}" >
                <fileset dir="${test.classes}">
                    <include name="**/${test.suite}.class" />
                </fileset>
            </batchtest>
            <assertions>
                <enable />
            </assertions>
        </junit>
        <fail if="tests.failure" 
            message="Unit tests failed - Report is available at ${dist.dir}"
            status="1"/>
    </target>

    <target name="build" depends="compile,compile_test,copy_test_files,integrate_birt_web_viewer,copy_birt_reports"/>

    <target name="war" depends="build">
        <war destfile="${dist.dir}/${webapplication.name}.war" 
            webxml="${build.web-inf}/web.xml">
            <fileset dir="${build.src.dir}" excludes="**/web.xml" />
        </war>
    </target>

    <target name="dist" 
        depends="clean,compile,copy_files,compile_test,copy_test_files,run_test,war,deploy" 
        description="Compiles, runs test, builds a distributable war and places in the dist directory. Copies to the web server in use. Does not rebuild the production database"
        />

    <target name="dist_build_db" 
        depends="clean,compile,copy_files,compile_test,copy_test_files,run_test,war,deploy,build_db" 
        description="Compiles, runs test, builds a distributable war and places in the dist directory. Copies to the web server in use. Rebuilds the production database"
        />

    <property name="main.database.url"
        value="jdbc:mysql://${main.database.host}:${main.database.port}/${main.database}?${main.database.params}"/>

    <target name="build_production_db" description="Builds the application database without custom config data">
        <echo>Using database: ${main.database} at ${main.database.host} port ${main.database.port}, user: ${main.database.user}</echo>
        <sql driver="${database.driver}" url="${main.database.url}" 
            userid="${main.database.user}" password="${main.database.password}"
            classpath="${database.driver.jar}">
            <transaction>
                Drop database if exists ${main.database};
                create database ${main.database};         
                use ${main.database};
            </transaction>
            <transaction src="${sql.dir}/mifosdroptables.sql" />
            <transaction src="${sql.dir}/latest-schema.sql" />
            <transaction src="${sql.dir}/latest-data.sql" />
            <transaction src="${sql.dir}/init_mifos_password.sql" />
        </sql>
    </target>

    <target name="build_db" description="Builds the application database">
        <echo>Using database: ${main.database} at ${main.database.host} port ${main.database.port}, user: ${main.database.user}</echo>
        <sql driver="${database.driver}" url="${main.database.url}" 
            userid="${main.database.user}" password="${main.database.password}"
            classpath="${database.driver.jar}">
            <transaction>
                Drop database if exists ${main.database};
                create database ${main.database};         
                use ${main.database};
            </transaction>
            <transaction src="${sql.dir}/mifosdroptables.sql" />
            <transaction src="${sql.dir}/latest-schema.sql" />
            <transaction src="${sql.dir}/latest-data.sql" />
            <transaction src="${sql.dir}/custom_data.sql" />
            <transaction src="${sql.dir}/init_mifos_password.sql" />
        </sql>
    </target>

    <target name="build_test_db">
        <echo>Using database: ${integration.database} at ${integration.database.host} port ${integration.database.port}</echo>
        <sql driver="${database.driver}" url="${integration.database.url}" 
            userid="${integration.database.user}" password="${integration.database.password}"
            classpath="${database.driver.jar}">
            <transaction>
                Drop database if exists ${integration.database};
                create database ${integration.database};
                use ${integration.database};
            </transaction>
            <!-- The following list of scripts is supposed to
            be the same as the one in build_db except
            for testdbinsertionscript.sql.  -->
            <transaction src="${sql.dir}/mifosdroptables.sql" />
            <transaction src="${sql.dir}/latest-schema.sql" />
            <transaction src="${sql.dir}/latest-data.sql" />
            <transaction src="${sql.dir}/custom_data.sql" />

            <transaction src="${sql.dir}/testdbinsertionscript.sql" />
        </sql>
    </target>

    <target name="build_acceptance_db">
        <echo>Using database: ${acceptance.database} at ${acceptance.database.host} port ${acceptance.database.port}</echo>
        <sql driver="${database.driver}" url="${acceptance.database.url}" 
            userid="${acceptance.database.user}" password="${acceptance.database.password}"
            classpath="${database.driver.jar}">
            <transaction>
                Drop database if exists ${acceptance.database};
                create database ${acceptance.database};
                use ${acceptance.database};
            </transaction>
            <!-- The following list of scripts is supposed to
            be the same as the one in build_db except -->
            <transaction src="${sql.dir}/mifosdroptables.sql" />
            <transaction src="${sql.dir}/latest-schema.sql" />
            <transaction src="${sql.dir}/latest-data.sql" />
            <transaction src="${sql.dir}/custom_data.sql" />
            <transaction src="${sql.dir}/init_mifos_password.sql" />
        </sql>
    </target>

    <target name="deploy" depends="war">
        <echo message="Deploying application ${webapplication.name}.war to ${deploy.destination}"/>
        <copy file="${dist.dir}/${webapplication.name}.war" 
            todir="${deploy.destination}"
            />
    </target>

    <target name="release_package">
        <echo message="Creating distribution package from war ${dist.dir}/${webapplication.name}.war"/>
        <zip destfile="${dist.dir}/${current.release.name}.zip">
            <zipfileset dir="${basedir}" includes="INSTALL,LICENSE" prefix="${current.release.name}"/>
            <zipfileset dir="${basedir}" includes="sql/create_mifos_db.sql,
                sql/latest-schema.sql,
                sql/latest-data.sql,
                sql/init_mifos_password.sql" prefix="${current.release.name}"/>
            <zipfileset dir="${basedir}" includes = "dist/mifos.war" fullpath="${current.release.name}/mifos.war" />
        </zip>
    </target>

    <target name="javadoc">
        <mkdir dir="${doc.dir}/api"/>
        <javadoc packagenames="org.*"
            sourcepath="${src.dir}" 
            destdir="${doc.dir}/api"
            author="true" version="true" use="true">
            <classpath refid="class.path"/>
        </javadoc>
    </target>

    <target name="maven_dependencies">
        <artifact:dependencies pathId="maven-dependencies.classpath" useScope="runtime">
            <artifact:pom id="maven.project.dependencies" file="pom.xml" />
        </artifact:dependencies>
        <artifact:dependencies filesetId="maven-dependencies.fileset" useScope="runtime">
            <artifact:pom id="maven.project.dependencies" file="pom.xml" />
        </artifact:dependencies>
        <copy todir="${build.web-inf}/lib">
            <fileset refid="maven-dependencies.fileset" />
            <mapper type="flatten" />
        </copy>
    </target>

    <target name="maven_test_dependencies">
        <artifact:dependencies pathId="test.maven-dependencies.classpath" useScope="test">
            <artifact:pom id="maven.project.dependencies" file="pom.xml" />
        </artifact:dependencies>
    </target>

</project>
